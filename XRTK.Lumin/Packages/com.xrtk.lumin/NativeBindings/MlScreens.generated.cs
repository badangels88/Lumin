//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlScreens
    {
        /// <summary>
        /// APIs for the Screens system
        ///  Screens
        /// </summary>
        /// <remarks>
        /// Screens API provides functions to:
        /// - add, remove, list and update the watch history
        /// - list the screen information
        /// \
        /// {
        /// </remarks>
        public const int MLResultAPIPrefix_Screens = unchecked((int)0xFB4E << 16);

        /// <summary>
        /// Return values for Screens API calls
        /// @apilevel 6
        /// </summary>
        public enum MLScreensResult : int
        {
            MLScreensResult_ServiceNotAvailable = unchecked((int)MLResultAPIPrefix_Screens),

            /// <summary>
            /// Application does not have permission for the operation
            /// </summary>
            MLScreensResult_PermissionDenied,

            /// <summary>
            /// Invalid screen id
            /// </summary>
            MLScreensResult_InvalidScreenId,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLScreensResult_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// An item that may be displayed in the Screens Launcher application
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLScreensWatchHistoryEntry
        {
            /// <summary>
            /// Entry identification
            /// </summary>
            public long id;

            /// <summary>
            /// Media title
            /// </summary>
            public IntPtr title;

            /// <summary>
            /// Media subtitle
            /// </summary>
            public IntPtr subtitle;

            /// <summary>
            /// Current media playback position in milliseconds
            /// </summary>
            public uint playback_position_ms;

            /// <summary>
            /// Total duration of the media in milliseconds
            /// </summary>
            public uint playback_duration_ms;

            /// <summary>
            /// Custom data as C-String (NULL-terminated) This may represent an URL or any
            /// other generic custom information
            /// </summary>
            public IntPtr custom_data;
        }

        /// <summary>
        /// List of items returned by MLScreensGetWatchHistoryList
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLScreensWatchHistoryList
        {
            /// <summary>
            /// Number of elements in the list
            /// </summary>
            public uint count;

            /// <summary>
            /// An array containing "count" entries
            /// </summary>
            public IntPtr entries;
        }

        /// <summary>
        /// This contains the information necessary for positioning of a screen
        /// </summary>
        /// <remarks>
        /// Deprecated since 0180 Scheduled for removal Replaced by MLScreensScreenInfoEx
        /// </remarks>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLScreensScreenInfo
        {
            /// <summary>
            /// Position and orientation of screen
            /// </summary>
            public MlTypes.MLTransform transform;

            /// <summary>
            /// Dimensions of the screen (in meters)
            /// </summary>
            public MlTypes.MLVec3f dimensions;
        }

        /// <summary>
        /// This contains the information necessary for positioning of a screen
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLScreensScreenInfoEx
        {
            /// <summary>
            /// Version of the struct
            /// </summary>
            public uint version;

            /// <summary>
            /// Unique screen identification
            /// </summary>
            public ulong screen_id;

            /// <summary>
            /// Default screen dimensions This is the approximate dimensions of the Screens Home prism
            /// </summary>
            public MlTypes.MLVec3f dimensions;

            /// <summary>
            /// Position, orientation and scale of the screen in a 4x4 matrix
            /// </summary>
            public MlTypes.MLMat4f transform;
        }

        /// <summary>
        /// List of items returned by MLScreensGetScreenInfoList
        /// </summary>
        /// <remarks>
        /// Deprecated since 0180 Scheduled for removal Replaced by MLScreensScreenInfoListEx
        /// </remarks>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLScreensScreenInfoList
        {
            /// <summary>
            /// Total number of elements in the list
            /// </summary>
            public uint count;

            /// <summary>
            /// An array containing "count" entries
            /// </summary>
            public IntPtr entries;
        }

        /// <summary>
        /// List of items returned by MLScreensGetScreenInfoListEx
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLScreensScreenInfoListEx
        {
            /// <summary>
            /// Version of the struct
            /// </summary>
            public uint version;

            /// <summary>
            /// Total number of elements in the list
            /// </summary>
            public uint count;

            /// <summary>
            /// An array containing "count" entries
            /// </summary>
            public IntPtr entries;
        }

        /// <summary>
        /// Release the watch history thumbnail
        /// </summary>
        /// <param name="thumbnail">The thumbnail to be released</param>
        /// <returns>
        /// MLResult_InvalidParam Operation failed due to invalid input parameter
        /// MLResult_Ok Operation completed successfully
        /// </returns>
        [DllImport("ml_screens", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLScreensReleaseWatchHistoryThumbnail(ref MlImage.MLImage thumbnail);

        /// <summary>
        /// Clean up the content of a list of type MLScreensWatchHistoryList
        /// </summary>
        /// <param name="list">The watch history list</param>
        /// <returns>
        /// MLResult_Ok Operation completed successfully
        /// MLResult_InvalidParam Operation failed due to invalid input parameter
        /// </returns>
        /// <remarks>
        /// The watch history entry list can be obtained using MLScreensGetWatchHistoryList
        /// Use this function in order to clean up "the content" of the list
        /// </remarks>
        [DllImport("ml_screens", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLScreensReleaseWatchHistoryList(ref MlScreens.MLScreensWatchHistoryList list);

        /// <summary>
        /// Clean up the content of a list of type MLScreensScreenInfoList
        /// </summary>
        /// <param name="list">A list of MLScreensScreenInfo elements</param>
        /// <returns>
        /// MLResult_Ok Operation completed successfully
        /// MLResult_InvalidParam Operation failed due to invalid input parameter
        /// </returns>
        /// <remarks>
        /// Deprecated since 0180 Scheduled for removal Replaced by MLScreensReleaseScreenInfoListEx
        /// The screens info list can be obtained using MLScreensGetScreenInfoList
        /// Use this function in order to clean up "the content" of the list
        /// </remarks>
        [DllImport("ml_screens", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLScreensReleaseScreenInfoList(ref MlScreens.MLScreensScreenInfoList list);

        /// <summary>
        /// Clean up the content of a list of type MLScreensScreenInfoListEx
        /// </summary>
        /// <param name="list">A list of MLScreensScreenInfoEx elements</param>
        /// <returns>
        /// MLResult_Ok Operation completed successfully
        /// MLResult_InvalidParam Operation failed due to invalid input parameter
        /// </returns>
        /// <remarks>
        /// The screens info list can be obtained using MLScreensGetScreenInfoListEx
        /// Use this function in order to clean up "the content" of the list
        /// @apilevel 2
        /// </remarks>
        [DllImport("ml_screens", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLScreensReleaseScreenInfoListEx(ref MlScreens.MLScreensScreenInfoListEx list);

        /// <summary>
        /// Insert a new watch history entry
        /// </summary>
        /// <param name="entry">A new entry to the watch history</param>
        /// <param name="thumbnail">The thumbnail associated with the entry</param>
        /// <returns>
        /// MLResult_InvalidParam Operation failed due to invalid input parameter
        /// MLResult_Ok Operation completed successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Operation failed due to internal error
        /// MLScreensResult_ServiceNotAvailable Screens service is not available
        /// </returns>
        /// <remarks>
        /// This should receive a complete MLScreensWatchHistoryEntry object with exception of the id
        /// The id will be filled and returned by this function in the same object
        /// @priv ScreensProvider
        /// </remarks>
        [DllImport("ml_screens", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLScreensInsertWatchHistoryEntry(ref MlScreens.MLScreensWatchHistoryEntry entry, in MlImage.MLImage thumbnail);

        /// <summary>
        /// Remove an existing entry from the watch history
        /// </summary>
        /// <param name="id">The id of the entry to be removed from the watch history</param>
        /// <returns>
        /// MLResult_Ok Operation completed successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Operation failed due to internal error
        /// MLScreensResult_ServiceNotAvailable Screens service is not available
        /// </returns>
        /// <remarks>
        /// Only entries associated with the calling application can be removed
        /// @priv ScreensProvider
        /// </remarks>
        [DllImport("ml_screens", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLScreensRemoveWatchHistoryEntry(long id);

        /// <summary>
        /// Update a watch history entry
        /// </summary>
        /// <param name="entry">The entry (with id from an existing entry) to be updated in the watch history</param>
        /// <param name="thumbnail">The thumbnail associated with the entry</param>
        /// <returns>
        /// MLResult_InvalidParam Operation failed due to invalid input parameter
        /// MLResult_Ok Operation completed successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Operation failed due to internal error
        /// MLScreensResult_ServiceNotAvailable Screens service is not available
        /// </returns>
        /// <remarks>
        /// Only entries associated with the calling application can be updated
        /// @priv ScreensProvider
        /// </remarks>
        [DllImport("ml_screens", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLScreensUpdateWatchHistoryEntry(in MlScreens.MLScreensWatchHistoryEntry entry, in MlImage.MLImage thumbnail);

        /// <summary>
        /// Get a list with the watch history that belongs to the calling client
        /// @code {cpp}
        ///   MLScreensWatchHistoryList my_list;           // reserve my_list on the stack
        ///   MLScreensGetWatchHistoryList(&amp;my_list);      // initialize my_list with the watch history
        ///   //
        ///   //  do something with my_list
        ///   //
        ///   MLScreensReleaseWatchHistoryList(&amp;my_list);  // clean up the content of my_list
        /// @endcode
        /// </summary>
        /// <param name="out_list">The watch history list</param>
        /// <returns>
        /// MLResult_InvalidParam Operation failed due to invalid input parameter
        /// MLResult_Ok Operation completed successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Operation failed due to internal error
        /// MLScreensResult_ServiceNotAvailable Screens service is not available
        /// </returns>
        /// <remarks>
        /// The MLScreensWatchHistoryList argument itself must be allocated by the caller
        /// The "content" of MLScreensWatchHistoryList is allocated by this function and therefore
        /// must be cleaned up by MLScreensReleaseWatchHistoryList after no longer needed
        /// Only entries associated with the calling application can be retrieved
        /// @xrefitem req Example 
        /// "
        /// Example
        /// "
        /// @priv ScreensProvider
        /// </remarks>
        [DllImport("ml_screens", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLScreensGetWatchHistoryList(ref MlScreens.MLScreensWatchHistoryList out_list);

        /// <summary>
        /// Retrieve the watch history thumbnail
        /// </summary>
        /// <param name="id">The id of the watch history entry</param>
        /// <param name="out_thumbnail">The thumbnail
        /// It must be released by MLScreensReleaseWatchHistoryThumbnail after used</param>
        /// <returns>
        /// MLResult_InvalidParam Operation failed due to invalid input parameter
        /// MLResult_Ok Operation completed successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Operation failed due to internal error
        /// MLScreensResult_ServiceNotAvailable Screens service is not available
        /// </returns>
        /// <remarks>
        /// @priv ScreensProvider
        /// </remarks>
        [DllImport("ml_screens", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLScreensGetWatchHistoryThumbnail(long id, ref MlImage.MLImage out_thumbnail);

        /// <summary>
        /// Retrieve information about the screen associated with the calling application
        /// </summary>
        /// <param name="screen_id">The id of the screen</param>
        /// <param name="out_screen_info">The information about the screen</param>
        /// <returns>
        /// MLResult_InvalidParam Operation failed due to invalid input parameter
        /// MLResult_Ok Operation completed successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Operation failed due to internal error
        /// MLScreensResult_InvalidScreenId Invalid screen id as input argument
        /// MLScreensResult_PermissionDenied Application does not have permission to set information
        /// about the specific screen id
        /// MLScreensResult_ServiceNotAvailable Screens service is not available
        /// </returns>
        /// <remarks>
        /// The id of the screen can be obtained from the Application's Lifecycle Init args (see MLLifecycleInitArg)
        /// The key-value pair "screenId=N", where N is the screen id, will be contained in the argument URI string
        /// @apilevel 2
        /// @priv ScreensProvider
        /// </remarks>
        [DllImport("ml_screens", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLScreensGetScreenInfo(ulong screen_id, ref MlScreens.MLScreensScreenInfoEx out_screen_info);

        /// <summary>
        /// Update information about the screen associated with the calling application
        /// </summary>
        /// <param name="screen_info">The information about the screen</param>
        /// <returns>
        /// MLResult_InvalidParam Operation failed due to invalid input parameter
        /// MLResult_Ok Operation completed successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Operation failed due to internal error
        /// MLScreensResult_InvalidScreenId Invalid screen id as input argument
        /// MLScreensResult_PermissionDenied Application does not have permission to get information
        /// about the specific screen id
        /// MLScreensResult_ServiceNotAvailable Screens service is not available
        /// </returns>
        /// <remarks>
        /// The id of the screen can be obtained from the Application's Lifecycle Init args (see MLLifecycleInitArg)
        /// The key-value pair "screenId=N", where N is the screen id, will be contained in the argument URI string
        /// @apilevel 2
        /// @priv ScreensProvider
        /// </remarks>
        [DllImport("ml_screens", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLScreensUpdateScreenInfo(in MlScreens.MLScreensScreenInfoEx screen_info);

        /// <summary>
        /// Get a list with all screens information
        /// </summary>
        /// <param name="out_list">A list of MLScreensScreenInfo elements</param>
        /// <returns>
        /// MLResult_InvalidParam Operation failed due to invalid input parameter
        /// MLResult_Ok Operation completed successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Operation failed due to internal error
        /// MLScreensResult_ServiceNotAvailable Screens service is not available
        /// </returns>
        /// <remarks>
        /// Deprecated since 0180 Scheduled for removal Replaced by MLScreensGetScreenInfoListEx
        /// @priv ScreensProvider
        /// </remarks>
        [DllImport("ml_screens", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLScreensGetScreenInfoList(ref MlScreens.MLScreensScreenInfoList out_list);

        /// <summary>
        /// Get a list with all screens information
        /// @apilevel 2
        /// </summary>
        /// <param name="out_list">A list of MLScreensScreenInfoEx elements</param>
        /// <returns>
        /// MLResult_InvalidParam Operation failed due to invalid input parameter
        /// MLResult_Ok Operation completed successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Operation failed due to internal error
        /// MLScreensResult_ServiceNotAvailable Screens service is not available
        /// </returns>
        /// <remarks>
        /// @priv ScreensProvider
        /// </remarks>
        [DllImport("ml_screens", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLScreensGetScreenInfoListEx(ref MlScreens.MLScreensScreenInfoListEx out_list);

        /// <summary>
        /// Notify Screens Home that the channel instance associated with a particular screen is being closed
        /// @apilevel 2
        /// </summary>
        /// <param name="screen_id">The id of the screen associated with the channel being closed</param>
        /// <returns>
        /// MLResult_Ok Operation completed successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Operation failed due to internal error
        /// MLScreensResult_ServiceNotAvailable Screens service is not available
        /// </returns>
        /// <remarks>
        /// @priv ScreensProvider
        /// </remarks>
        [DllImport("ml_screens", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLScreensCloseChannelAtScreen(ulong screen_id);

        /// <summary>
        /// Returns an ASCII string for MLScreensResult and MLResultGlobal codes
        /// </summary>
        /// <param name="result_code">The input MLResult enum from MLScreens functions</param>
        /// <returns>
        /// ASCII string containing readable version of result code
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_screens", CallingConvention = CallingConvention.Cdecl)]
        [return: MarshalAs(UnmanagedType.LPStr)]
        public static extern string MLScreensGetResultString(MlApi.MLResult result_code);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlMediaDrm
    {
        /// <summary>
        /// Request types
        /// </summary>
        public enum MLMediaDRMKeyType : int
        {
            /// <summary>
            /// This key request type specifies that the keys will be for online use, they will
            /// not be saved to the device for subsequent use when the device is not connected to a network
            /// </summary>
            MLMediaDRMKeyType_Streaming = unchecked((int)1),

            /// <summary>
            /// This key request type specifies that the keys will be for offline use, they
            /// will be saved to the device for use when the device is not connected to a network
            /// </summary>
            MLMediaDRMKeyType_Offline = unchecked((int)2),

            /// <summary>
            /// This key request type specifies that previously saved offline keys should be released
            /// </summary>
            MLMediaDRMKeyType_Release = unchecked((int)3),

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLMediaDRMKeyType_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Request event types
        /// </summary>
        public enum MLMediaDRMEventType : int
        {
            /// <summary>
            /// This event type indicates that the app needs to request
            /// a certificate from the provisioning server
            /// The request message data is obtained using MLMediaDRMGetProvisionRequest
            /// </summary>
            MLMediaDRMEventType_ProvisionRequired = unchecked((int)1),

            /// <summary>
            /// This event type indicates that the app needs to request keys from a license server
            /// The request message data is obtained using MLMediaDRMGetKeyRequest
            /// </summary>
            MLMediaDRMEventType_KeyRequired = unchecked((int)2),

            /// <summary>
            /// This event type indicates that the licensed usage duration for keys in a session has expired
            /// The keys are no longer valid
            /// </summary>
            MLMediaDRMEventType_KeyExpired = unchecked((int)3),

            /// <summary>
            /// This event may indicate some specific vendor-defined condition,
            /// see your DRM provider documentation for details
            /// </summary>
            MLMediaDRMEventType_VendorDefined = unchecked((int)4),

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLMediaDRMEventType_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Data type containing byte array buffer and the size
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaDRMByteArray
        {
            /// <summary>
            /// Byte array buffer
            /// </summary>
            public IntPtr ptr;

            /// <summary>
            /// Size of ptr
            /// </summary>
            public Interop.size_t length;
        }

        /// <summary>
        /// Data type containing list of byte array buffers and the size
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaDRMByteArrayList
        {
            /// <summary>
            /// Byte array buffer
            /// </summary>
            public IntPtr ptr;

            /// <summary>
            /// Length of ptr
            /// </summary>
            public Interop.size_t length;
        }

        /// <summary>
        /// Data type containing {key, value} pair
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaDRMKeyValue
        {
            /// <summary>
            /// Key
            /// </summary>
            [MarshalAs(UnmanagedType.LPStr)]
            public string key;

            /// <summary>
            /// Value
            /// </summary>
            [MarshalAs(UnmanagedType.LPStr)]
            public string value;
        }

        /// <summary>
        /// Data type containing array of {key, value} pair
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaDRMKeyValueArray
        {
            /// <summary>
            /// Array of {key, value} pair
            /// </summary>
            public IntPtr ptr;

            /// <summary>
            /// Length of ptr
            /// </summary>
            public Interop.size_t length;

            /// <summary>
            /// Index
            /// </summary>
            public Interop.size_t index;
        }

        /// <summary>
        /// Data type that encapsulates Key Request input arguments
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaDRMKeyRequestInputParam
        {
            /// <summary>
            /// The container-specific data, its meaning is interpreted based on the
            /// mime-type provided in the mime_type parameter
            /// It could contain, for example, the content ID, key ID or other data obtained
            /// from the content metadata that is required in generating the key request
            /// </summary>
            public IntPtr init_data;

            /// <summary>
            /// The mime type of the content
            /// </summary>
            public IntPtr mime_type;

            /// <summary>
            /// The type of the request
            /// The request may be to acquire keys for streaming or offline content,
            /// or to release previously acquired keys, which are identified by a key_set_id
            /// </summary>
            public MlMediaDrm.MLMediaDRMKeyType key_type;

            /// <summary>
            /// Optional parameters included in the key request message to allow a client
            /// application to provide additional message parameters to the server
            /// </summary>
            public IntPtr optional_params;
        }

        /// <summary>
        /// Data type that encapsulates either of the following along with an URL:
        /// </summary>
        /// <remarks>
        /// For Key Request Message: an opaque key request byte array
        /// that should be delivered to the license server
        /// For Provision Request Message: an opaque provision request byte array
        /// that should be delivered to the provisioning server
        /// </remarks>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaDRMRequestMessage
        {
            /// <summary>
            /// The opaque request byte array
            /// </summary>
            public MlMediaDrm.MLMediaDRMByteArray request;

            /// <summary>
            /// The recommended URL to deliver the request to
            /// </summary>
            public IntPtr default_URL;
        }

        /// <summary>
        /// Data type that encapsulates algorithm, key_set_id and IV for Encryption/Decryption
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaDRMCryptoInputParam
        {
            /// <summary>
            /// The cipher mode used for the crypto operation
            /// "AES/CBC/NoPadding" is the only supported algorithm now
            /// </summary>
            public IntPtr algorithm;

            /// <summary>
            /// The identifier for the key to be used
            /// </summary>
            public IntPtr key_set_id;

            /// <summary>
            /// The initial vector used for the crypto operation
            /// </summary>
            public IntPtr iv;
        }

        /// <summary>
        /// Data type that encapsulates algorithm, key_set_id for HMAC based Sign/Verify
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaDRMHMACInputParam
        {
            /// <summary>
            /// The MAC algorithm used for the MAC-HASH operation
            /// "HmacSHA256" is the only supported algorithm now
            /// </summary>
            public IntPtr algorithm;

            /// <summary>
            /// The identifier for the key to be used
            /// </summary>
            public IntPtr key_set_id;
        }

        /// <summary>
        /// Data type that encapsulates algorithm, wrapped_key for RSA operation
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaDRMRSAInputParam
        {
            /// <summary>
            /// The MAC algorithm used for padding/signing
            /// "HmacSHA256" is the only supported algorithm now
            /// </summary>
            public IntPtr algorithm;

            /// <summary>
            /// The wrapped RSA key to be used
            /// </summary>
            public IntPtr wrapped_rsa_key;
        }

        /// <summary>
        ///  MediaPlayer
        /// </summary>
        /// <remarks>
        /// \
        /// {
        /// </remarks>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly struct MLMediaDRMProperty : IEquatable<MLMediaDRMProperty>
        {
            public MLMediaDRMProperty(string value) => this.Value = value;

            [MarshalAs(UnmanagedType.LPStr)]
            public readonly string Value;

            public bool Equals(MLMediaDRMProperty other) => Value.Equals(other.Value);

            public override bool Equals(object obj) => obj is MLMediaDRMProperty other && Equals(other);

            public override int GetHashCode() => Value.GetHashCode();

            public override string ToString() => Value.ToString();

            public static implicit operator string(MLMediaDRMProperty from) => from.Value;

            public static implicit operator MLMediaDRMProperty(string from) => new MLMediaDRMProperty(from);

            public static bool operator ==(MLMediaDRMProperty left, MLMediaDRMProperty right) => left.Equals(right);

            public static bool operator !=(MLMediaDRMProperty left, MLMediaDRMProperty right) => !left.Equals(right);
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void MLMediaDRMEventListener(in MlMediaDrm.MLMediaDRMByteArray session_id, MlMediaDrm.MLMediaDRMEventType event_type, int extra, in MlMediaDrm.MLMediaDRMByteArray data);

        /// <summary>
        /// Allocate byte array buffer
        /// </summary>
        /// <param name="size">Maximum size of the desirable byte array to be allocated</param>
        /// <param name="out_array">Pointer to byte array buffer that needs to be allocated
        /// To free/release, call MLMediaDRMByteArrayRelease</param>
        /// <returns>
        /// MLResult_AllocFailed Failed because of allocation failure
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok Byte Array is allocated successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMByteArrayAllocate(Interop.size_t size, ref MlMediaDrm.MLMediaDRMByteArray out_array);

        /// <summary>
        /// Allocate and Copy to byte array buffer
        /// </summary>
        /// <param name="copy_from">Buffer from which copy into byte array</param>
        /// <param name="size">Number of bytes to be copied</param>
        /// <param name="out_array">Pointer to byte array buffer that needs to be allocated and copied to
        /// To free/release, call MLMediaDRMByteArrayRelease</param>
        /// <returns>
        /// MLResult_AllocFailed Failed because of allocation failure
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok Byte Array is allocated and copied successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMByteArrayAllocAndCopy(ref byte copy_from, Interop.size_t size, ref MlMediaDrm.MLMediaDRMByteArray out_array);

        /// <summary>
        /// Allocate array of {key, value} pairs
        /// </summary>
        /// <param name="size">Maximum size of the desirable array of {key, value} pair to be allocated</param>
        /// <param name="out_array">Pointer to array of {key, value} pair that needs to be allocated
        /// To free/release, call MLMediaDRMKeyValueArrayRelease</param>
        /// <returns>
        /// MLResult_AllocFailed Failed because of allocation failure
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok {key, value} pair array is allocated successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMKeyValueArrayAllocate(Interop.size_t size, ref MlMediaDrm.MLMediaDRMKeyValueArray out_array);

        /// <summary>
        /// Create a
        ///  MediaDRM instance from a UUID
        ///  MediaDRM
        ///  MediaDRM object creation failed with resource allocation failure
        ///  MediaDRM object was created successfully
        /// </summary>
        /// <param name="uuid">The universal unique ID of the crypto scheme uuid must be 16 bytes</param>
        /// <param name="out_handle">Upon successful return will point to handle to the created</param>
        /// <returns>
        /// MLResult_AllocFailed
        /// </returns>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok
        /// </returns>
        /// <returns>
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// Or else, it will point to ML_INVALID_HANDLE
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMCreate(MlTypes.MLUUID uuid, ref MlApi.MLHandle out_handle);

        /// <summary>
        /// Release the
        ///  MediaDRM instance
        ///  MediaDRM
        ///  MediaDRM object was released successfully
        /// </summary>
        /// <param name="media_drm">MLHandle to the</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok
        /// </returns>
        /// <returns>
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMRelease(MlApi.MLHandle media_drm);

        /// <summary>
        /// Release byte array buffer
        /// </summary>
        /// <param name="array">Byte array buffer that needs to be released</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok Byte Array was released successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMByteArrayRelease(ref MlMediaDrm.MLMediaDRMByteArray array);

        /// <summary>
        /// Release list of byte array buffer
        /// </summary>
        /// <param name="array">List of byte array buffer that needs to be released</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok Byte Array List was released successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMByteArrayListRelease(ref MlMediaDrm.MLMediaDRMByteArrayList array);

        /// <summary>
        /// Release {key, value} pair array
        /// </summary>
        /// <param name="array">{key, value} pair array that needs to be released</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok {key, value} pair array was released successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMKeyValueArrayRelease(ref MlMediaDrm.MLMediaDRMKeyValueArray array);

        /// <summary>
        /// Release Request Message
        /// </summary>
        /// <param name="request">Pointer to Request Message that needs to be released</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok DRM Request Message was released successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMRequestMessageRelease(ref MlMediaDrm.MLMediaDRMRequestMessage request);

        /// <summary>
        /// Add a {key, value} pair to the array of {key, value} pairs
        /// </summary>
        /// <param name="pair">The source {key, value} pair that needs to be added</param>
        /// <param name="out_array">Pointer to array of {key, value} pair to which the pair needs to be added to</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok {key, value} pair is added successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMKeyValueArrayAdd(in MlMediaDrm.MLMediaDRMKeyValue pair, ref MlMediaDrm.MLMediaDRMKeyValueArray out_array);

        /// <summary>
        /// Query if the given scheme identified by its UUID is supported on this device
        /// And whether the drm plugin is able to handle the media container format
        /// </summary>
        /// <param name="uuid">Identifies the universal unique ID of the crypto scheme UUID must be 16 bytes</param>
        /// <param name="mime_type">The MIME type of the media container, eg "video/mp4"
        /// If mime_type is not known or required, it can be provided as NULL</param>
        /// <param name="out_supported">On successful return contains @c true or @c false based on
        /// whether the given crypto scheme is supported or not</param>
        /// <returns>
        /// MLResult_InvalidParam Parameter is invalid
        /// MLResult_Ok The query has run successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMIsCryptoSchemeSupported(MlTypes.MLUUID uuid, [MarshalAs(UnmanagedType.LPStr)] string mime_type, ref bool out_supported);

        /// <summary>
        /// Register a callback to be invoked when an event occurs
        ///  MediaDRM
        /// </summary>
        /// <param name="media_drm">MLHandle to the</param>
        /// <param name="listener">The callback that will be invoked on event</param>
        /// <returns>
        /// MLResult_InvalidParam Parameter is invalid
        /// MLResult_Ok Event listener was set successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMSetOnEventListener(MlApi.MLHandle media_drm, MlMediaDrm.MLMediaDRMEventListener listener);

        /// <summary>
        /// Opens a new session A session ID is returned
        ///  MediaDRM
        ///  MediaDRM session was opened successfully
        /// </summary>
        /// <param name="media_drm">MLHandle to the</param>
        /// <param name="out_session_id">ID of the session created/opened
        /// This byte array will be released when MLMediaDRMCloseSession is called</param>
        /// <returns>
        /// MLResult_InvalidParam Parameter is invalid
        /// MLResult_Ok
        /// </returns>
        /// <returns>
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMOpenSession(MlApi.MLHandle media_drm, ref MlMediaDrm.MLMediaDRMByteArray out_session_id);

        /// <summary>
        /// Closes a session on the
        ///  MediaDRM object that was previously opened with openSession
        ///  MediaDRM
        ///  MediaDRM session was closed successfully
        /// </summary>
        /// <param name="media_drm">MLHandle to the</param>
        /// <param name="session_id">The session ID for the DRM session, which will be released on return</param>
        /// <returns>
        /// MLResult_InvalidParam Parameter is invalid
        /// MLResult_Ok
        /// </returns>
        /// <returns>
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMCloseSession(MlApi.MLHandle media_drm, ref MlMediaDrm.MLMediaDRMByteArray session_id);

        /// <summary>
        /// A key request/response exchange occurs between the app and a license server
        /// to obtain or release keys used to decrypt encrypted content
        ///  MediaDRM
        ///  MediaDRM Key Request message is constructed successfully
        /// </summary>
        /// <param name="media_drm">MLHandle to the</param>
        /// <param name="session_id">The session ID for the DRM session</param>
        /// <param name="key_request_param">Placeholder for needed arguments for generating a key request message</param>
        /// <param name="out_key_request">Upon successful return, contains key request message
        /// To free/release this, call MLMediaDRMRequestMessageRelease</param>
        /// <returns>
        /// MLResult_InvalidParam Parameter is invalid
        /// MLResult_Ok
        /// </returns>
        /// <returns>
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// MLMediaDRMGetKeyRequest is used to obtain an opaque key request byte array
        /// that is delivered to the license server
        /// The opaque key request byte array is returned in out_key_requestrequest
        /// The recommended URL to deliver the key request to is returned in out_key_requestdefault_URL
        /// After the app has received the key request response from the server,
        /// it should deliver to the response to the DRM engine plugin using the method
        /// provideKeyResponse
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMGetKeyRequest(MlApi.MLHandle media_drm, in MlMediaDrm.MLMediaDRMByteArray session_id, in MlMediaDrm.MLMediaDRMKeyRequestInputParam key_request_param, ref MlMediaDrm.MLMediaDRMRequestMessage out_key_request);

        /// <summary>
        /// A key response is received from the license server by the app, then it is
        /// provided to the DRM engine plugin using provideKeyResponse
        ///  MediaDRM
        ///  MediaDRM Key Response message was consumed successfully
        /// </summary>
        /// <param name="media_drm">MLHandle to the</param>
        /// <param name="session_id">The session ID for the DRM session</param>
        /// <param name="response">The opaque response from the server</param>
        /// <param name="out_key_set_id">Upon successful return, contains the key identifier
        /// To free/release this buffer, call MLMediaDRMByteArrayRelease</param>
        /// <returns>
        /// MLResult_InvalidParam Parameter is invalid
        /// MLResult_Ok
        /// </returns>
        /// <returns>
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// When the response is for an offline key request, a key_set_id is returned that can be
        /// used to later restore the keys to a new session with restoreKeys
        /// When the response is for a streaming or release request, a null key_set_id is returned
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMProvideKeyResponse(MlApi.MLHandle media_drm, in MlMediaDrm.MLMediaDRMByteArray session_id, in MlMediaDrm.MLMediaDRMByteArray response, ref MlMediaDrm.MLMediaDRMByteArray out_key_set_id);

        /// <summary>
        /// Restore persisted offline keys into a new session key_set_id identifies the
        /// keys to load, obtained from a prior call to provideKeyResponse
        ///  MediaDRM
        ///  MediaDRM Keys are restored successfully
        /// </summary>
        /// <param name="media_drm">MLHandle to the</param>
        /// <param name="session_id">The session ID for the DRM session</param>
        /// <param name="key_set_id">The saved key set to restore</param>
        /// <returns>
        /// MLResult_InvalidParam Parameter is invalid
        /// MLResult_Ok
        /// </returns>
        /// <returns>
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMRestoreKeys(MlApi.MLHandle media_drm, in MlMediaDrm.MLMediaDRMByteArray session_id, in MlMediaDrm.MLMediaDRMByteArray key_set_id);

        /// <summary>
        /// Remove the current keys from a session
        ///  MediaDRM
        ///  MediaDRM Keys are removed successfully
        /// </summary>
        /// <param name="media_drm">MLHandle to the</param>
        /// <param name="key_set_id">The keys to remove, which will be released on success</param>
        /// <returns>
        /// MLResult_InvalidParam Parameter is invalid
        /// MLResult_Ok
        /// </returns>
        /// <returns>
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMRemoveKeys(MlApi.MLHandle media_drm, ref MlMediaDrm.MLMediaDRMByteArray key_set_id);

        /// <summary>
        /// Request an informative description of the key status for the session
        ///  MediaDRM
        ///  MediaDRM Key status completed successfully
        /// </summary>
        /// <param name="media_drm">MLHandle to the</param>
        /// <param name="session_id">The session ID for the DRM session</param>
        /// <param name="out_info_map">The Key-Value pair place-holder for the key status
        /// To release/free this call MLMediaDRMKeyValueArrayRelease</param>
        /// <returns>
        /// MLResult_InvalidParam Parameter is invalid
        /// MLResult_Ok Query for
        /// </returns>
        /// <returns>
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// The status is in the form of {key, value} pairs Since DRM license policies vary by vendor,
        /// the specific status field names are determined by each DRM vendor Refer to your
        /// DRM provider documentation for definitions of the field names for a particular DRM engine plugin
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMQueryKeyStatus(MlApi.MLHandle media_drm, in MlMediaDrm.MLMediaDRMByteArray session_id, ref MlMediaDrm.MLMediaDRMKeyValueArray out_info_map);

        /// <summary>
        /// A provision request/response exchange occurs between the app and a provisioning
        /// server to retrieve a device certificate
        ///  MediaDRM
        /// </summary>
        /// <param name="media_drm">MLHandle to the</param>
        /// <param name="cert_type">The device certificate type, which can be "none" or "X509"</param>
        /// <param name="out_provision_request">Upon successful return, contains provision request message
        /// To free/release this, call MLMediaDRMRequestMessageRelease</param>
        /// <returns>
        /// MLResult_InvalidParam Parameter is invalid
        /// MLResult_Ok Device Provision Request message is constructed successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// If provisioning is required, the EVENT_PROVISION_REQUIRED event will be sent to the event handler
        /// MLMediaDRMGetProvisionRequest is used to obtain the opaque provision request byte array that
        /// should be delivered to the provisioning server
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMGetProvisionRequest(MlApi.MLHandle media_drm, [MarshalAs(UnmanagedType.LPStr)] string cert_type, ref MlMediaDrm.MLMediaDRMRequestMessage out_provision_request);

        /// <summary>
        /// After a provision response is received by the app, it is provided to the DRM
        /// engine plugin using this method
        ///  MediaDRM
        /// </summary>
        /// <param name="media_drm">MLHandle to the</param>
        /// <param name="response">The opaque provisioning response byte array to provide to the DRM engine plugin</param>
        /// <param name="out_certificate">The device certificate upon sucessful return
        /// To release/free this call MLMediaDRMByteArrayRelease</param>
        /// <param name="out_wrapped_key">The wrapped device key upon sucessful return
        /// To release/free this call MLMediaDRMByteArrayRelease</param>
        /// <returns>
        /// MLResult_InvalidParam Parameter is invalid
        /// MLResult_Ok Device Provision Response message is consumed successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMProvideProvisionResponse(MlApi.MLHandle media_drm, in MlMediaDrm.MLMediaDRMByteArray response, ref MlMediaDrm.MLMediaDRMByteArray out_certificate, ref MlMediaDrm.MLMediaDRMByteArray out_wrapped_key);

        /// <summary>
        /// Access all secure stops
        ///  MediaDRM
        ///  MediaDRM Secure stops are retrieved successfully
        /// </summary>
        /// <param name="media_drm">MLHandle to the</param>
        /// <param name="out_secure_stops">List of all the secure stops upon successful return
        /// To free/release call MLMediaDRMByteArrayListRelease</param>
        /// <returns>
        /// MLResult_InvalidParam Parameter is invalid
        /// MLResult_Ok
        /// </returns>
        /// <returns>
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// Secure Stop:
        /// A means of enforcing limits on the number of concurrent streams per subscriber
        /// across devices is provided via SecureStop This is achieved by securely
        /// monitoring the lifetime of sessions
        /// Information from the server related to the current playback session is written
        /// to persistent storage on the device when each MediaCrypto object is created
        /// In the normal case, playback will be completed, the session destroyed and the
        /// Secure Stops will be queried The app queries secure stops and forwards the
        /// secure stop message to the server which verifies the signature and notifies the
        /// server side database that the session destruction has been confirmed
        /// The persisted record on the client is only removed after positive confirmation that the server
        /// received the message using releaseSecureStops
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMGetSecureStops(MlApi.MLHandle media_drm, ref MlMediaDrm.MLMediaDRMByteArrayList out_secure_stops);

        /// <summary>
        /// Access secure stop by secure stop ID
        ///  MediaDRM
        ///  MediaDRM Secure stop is retrieved successfully
        /// </summary>
        /// <seealso cref="MLMediaDRMGetSecureStops"/>
/// 
        /// <param name="media_drm">MLHandle to the</param>
        /// <param name="ss_id">The ID for the DRM securestop session</param>
        /// <param name="out_secure_stop">The secure stop upon successful return
        /// To free/release call MLMediaDRMByteArrayRelease</param>
        /// <returns>
        /// MLResult_InvalidParam Parameter is invalid
        /// MLResult_Ok
        /// </returns>
        /// <returns>
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMGetSecureStop(MlApi.MLHandle media_drm, in MlMediaDrm.MLMediaDRMByteArray ss_id, ref MlMediaDrm.MLMediaDRMByteArray out_secure_stop);

        /// <summary>
        /// Process the SecureStop server response message After authenticating
        /// the message, remove the SecureStops identified in the response
        ///  MediaDRM
        ///  MediaDRM Secure stops are released successfully
        /// </summary>
        /// <seealso cref="MLMediaDRMGetSecureStops"/>
/// 
        /// <param name="media_drm">MLHandle to the</param>
        /// <param name="secure_stop">The server response indicating which secure stops to release</param>
        /// <returns>
        /// MLResult_InvalidParam Parameter is invalid
        /// MLResult_Ok
        /// </returns>
        /// <returns>
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMReleaseSecureStops(MlApi.MLHandle media_drm, in MlMediaDrm.MLMediaDRMByteArray secure_stop);

        /// <summary>
        /// Remove all the SecureStops
        ///  MediaDRM
        ///  MediaDRM are released successfully
        /// </summary>
        /// <seealso cref="MLMediaDRMGetSecureStops"/>
/// 
        /// <param name="media_drm">MLHandle to the</param>
        /// <returns>
        /// MLResult_InvalidParam Parameter is invalid
        /// MLResult_Ok All secure stops for the
        /// </returns>
        /// <returns>
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMReleaseAllSecureStops(MlApi.MLHandle media_drm);

        /// <summary>
        /// Read a DRM engine plugin String property value, given the property name
        ///  MediaDRM
        ///  MediaDRM property is retrieved successfully
        /// </summary>
        /// <param name="media_drm">MLHandle to the</param>
        /// <param name="property_name">The property to query Standard property names are:
        /// - MLMediaDRMProperty_Vendor
        /// - MLMediaDRMProperty_Version
        /// - MLMediaDRMProperty_Description
        /// - MLMediaDRMProperty_Algorithms</param>
        /// <param name="out_property_value">The property value upon successful return
        /// Ownership is passed, call free(*out_property_value) to free it</param>
        /// <returns>
        /// MLResult_InvalidParam Parameter is invalid
        /// MLResult_Ok
        /// </returns>
        /// <returns>
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMGetPropertyString(MlApi.MLHandle media_drm, MlMediaDrm.MLMediaDRMProperty property_name, out IntPtr out_property_value);

        /// <summary>
        /// Read a DRM engine plugin byte array property value, given the property name
        ///  MediaDRM
        ///  MediaDRM property is retrieved successfully
        /// </summary>
        /// <param name="media_drm">MLHandle to the</param>
        /// <param name="property_name">The property to query Standard property names are:
        /// - MLMediaDRMProperty_DeviceUniqueID</param>
        /// <param name="out_property_value">The property value upon successful return
        /// To release/free call MLMediaDRMByteArrayRelease</param>
        /// <returns>
        /// MLResult_InvalidParam Parameter is invalid
        /// MLResult_Ok
        /// </returns>
        /// <returns>
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMGetPropertyByteArray(MlApi.MLHandle media_drm, MlMediaDrm.MLMediaDRMProperty property_name, ref MlMediaDrm.MLMediaDRMByteArray out_property_value);

        /// <summary>
        /// Set a DRM engine plugin String property value
        ///  MediaDRM
        ///  MediaDRM property is set successfully
        /// </summary>
        /// <param name="media_drm">MLHandle to the</param>
        /// <param name="property_name">The property to query Standard property names are:
        /// - MLMediaDRMProperty_Vendor
        /// - MLMediaDRMProperty_Version
        /// - MLMediaDRMProperty_Description
        /// - MLMediaDRMProperty_Algorithms</param>
        /// <param name="property_value">The value of the corresponding property</param>
        /// <returns>
        /// MLResult_InvalidParam Parameter is invalid
        /// MLResult_Ok
        /// </returns>
        /// <returns>
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMSetPropertyString(MlApi.MLHandle media_drm, MlMediaDrm.MLMediaDRMProperty property_name, [MarshalAs(UnmanagedType.LPStr)] string property_value);

        /// <summary>
        /// Set a DRM engine plugin byte array property value
        ///  MediaDRM
        ///  MediaDRM property is set successfully
        /// </summary>
        /// <param name="media_drm">MLHandle to the</param>
        /// <param name="property_name">The property to query Standard property names are:
        /// - MLMediaDRMProperty_DeviceUniqueID</param>
        /// <param name="property_value">The value of the corresponding property</param>
        /// <returns>
        /// MLResult_InvalidParam Parameter is invalid
        /// MLResult_Ok
        /// </returns>
        /// <returns>
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMSetPropertyByteArray(MlApi.MLHandle media_drm, MlMediaDrm.MLMediaDRMProperty property_name, in MlMediaDrm.MLMediaDRMByteArray property_value);

        /// <summary>
        /// Encrypt the data referenced by input using algorithm if specified,
        /// and write the encrypted result into output
        ///  MediaDRM
        ///  MediaDRM encryption operation has been completed successfully
        /// </summary>
        /// <param name="media_drm">MLHandle to the</param>
        /// <param name="session_id">The session ID for the DRM session</param>
        /// <param name="crypto_key_param">Pointer to the structure that contains
        /// needed crypto arguments for encryption operation</param>
        /// <param name="input">The data that needs to be encrypted</param>
        /// <param name="out_output">The encrypted input upon successful return
        /// To free/release this buffer, call MLMediaDRMByteArrayRelease</param>
        /// <returns>
        /// MLResult_InvalidParam Parameter is invalid
        /// MLResult_Ok
        /// </returns>
        /// <returns>
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// The key to use is identified by the 16 byte keyId The key must have been loaded into
        /// the session using provideKeyResponse
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMEncrypt(MlApi.MLHandle media_drm, in MlMediaDrm.MLMediaDRMByteArray session_id, in MlMediaDrm.MLMediaDRMCryptoInputParam crypto_key_param, in MlMediaDrm.MLMediaDRMByteArray input, ref MlMediaDrm.MLMediaDRMByteArray out_output);

        /// <summary>
        /// Decrypt the data referenced by input using algorithm if specified,
        /// and write the encrypted result into output
        ///  MediaDRM
        ///  MediaDRM decryption operation has been completed successfully
        /// </summary>
        /// <param name="media_drm">MLHandle to the</param>
        /// <param name="session_id">The session ID for the DRM session</param>
        /// <param name="crypto_key_param">Pointer to the structure that contains
        /// needed crypto arguments for decryption operation</param>
        /// <param name="input">The data that needs to be decrypted</param>
        /// <param name="out_output">The decrypted input upon successful return
        /// To free/release this buffer, call MLMediaDRMByteArrayRelease</param>
        /// <returns>
        /// MLResult_InvalidParam Parameter is invalid
        /// MLResult_Ok
        /// </returns>
        /// <returns>
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// The key to use is identified by the 16 byte keyId The key must have been loaded into
        /// the session using provideKeyResponse
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMDecrypt(MlApi.MLHandle media_drm, in MlMediaDrm.MLMediaDRMByteArray session_id, in MlMediaDrm.MLMediaDRMCryptoInputParam crypto_key_param, in MlMediaDrm.MLMediaDRMByteArray input, ref MlMediaDrm.MLMediaDRMByteArray out_output);

        /// <summary>
        /// Generate a signature using the specified algorithm (if provided) over the message data
        /// and store the signature
        ///  MediaDRM
        ///  MediaDRM HMAC Sign operation has been completed successfully
        /// </summary>
        /// <param name="media_drm">MLHandle to the</param>
        /// <param name="session_id">The session ID for the DRM session</param>
        /// <param name="hmac_key_param">Pointer to the structure that contains
        /// needed crypto arguments for HMAC operation</param>
        /// <param name="message">The data that needs to be signed</param>
        /// <param name="out_signature">The signature of the input message upon success
        /// To free/release this buffer, call MLMediaDRMByteArrayRelease</param>
        /// <returns>
        /// MLResult_InvalidParam Parameter is invalid
        /// MLResult_Ok
        /// </returns>
        /// <returns>
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// The key to use is identified by the 16 byte keyId
        /// The key must have been loaded into the session using provideKeyResponse
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMSign(MlApi.MLHandle media_drm, in MlMediaDrm.MLMediaDRMByteArray session_id, in MlMediaDrm.MLMediaDRMHMACInputParam hmac_key_param, in MlMediaDrm.MLMediaDRMByteArray message, ref MlMediaDrm.MLMediaDRMByteArray out_signature);

        /// <summary>
        /// Perform a signature verification using the specified algorithm (if specified)
        /// over the message data referenced by the message parameter
        ///  MediaDRM
        ///  MediaDRM HMAC Verify operation has been completed successfully
        /// </summary>
        /// <param name="media_drm">MLHandle to the</param>
        /// <param name="session_id">The session ID for the DRM session</param>
        /// <param name="hmac_key_param">Pointer to the structure that contains
        /// needed crypto arguments for HMAC operation</param>
        /// <param name="message">The data for which signature needs to be verified</param>
        /// <param name="signature">The signature of the input message</param>
        /// <param name="out_match">pointer to bool, which would return "true" if the signature matches,
        /// "false" otherwise</param>
        /// <returns>
        /// MLResult_InvalidParam Parameter is invalid
        /// MLResult_Ok
        /// </returns>
        /// <returns>
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// The key must have been loaded into the session using provideKeyResponse
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMVerify(MlApi.MLHandle media_drm, in MlMediaDrm.MLMediaDRMByteArray session_id, in MlMediaDrm.MLMediaDRMHMACInputParam hmac_key_param, in MlMediaDrm.MLMediaDRMByteArray message, in MlMediaDrm.MLMediaDRMByteArray signature, ref bool out_match);

        /// <summary>
        /// Generate a signature using the specified RSA Key and algorithm
        ///  MediaDRM
        ///  MediaDRM RSA Sign operation has been completed successfully
        /// </summary>
        /// <param name="media_drm">MLHandle to the</param>
        /// <param name="session_id">The session ID for the DRM session</param>
        /// <param name="rsa_key_param">Pointer to the structure that contains
        /// needed key arguments for this RSA operation</param>
        /// <param name="message">The data that needs to be signed</param>
        /// <param name="out_signature">The signature of the input message upon success
        /// To free/release this buffer, call MLMediaDRMByteArrayRelease</param>
        /// <returns>
        /// MLResult_InvalidParam Parameter is invalid
        /// MLResult_Ok
        /// </returns>
        /// <returns>
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// c true on success, c false otherwise
        /// </returns>
        /// <remarks>
        /// @priv DrmCertificates
        /// </remarks>
        [DllImport("ml_mediadrm", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaDRMSignRSA(MlApi.MLHandle media_drm, in MlMediaDrm.MLMediaDRMByteArray session_id, in MlMediaDrm.MLMediaDRMRSAInputParam rsa_key_param, in MlMediaDrm.MLMediaDRMByteArray message, ref MlMediaDrm.MLMediaDRMByteArray out_signature);
    }
}

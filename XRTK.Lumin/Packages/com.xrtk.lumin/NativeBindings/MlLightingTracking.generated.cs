//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlLightingTracking
    {
        /// <summary>
        /// Which camera the information is related to
        /// </summary>
        public enum MLLightingTrackingCamera : int
        {
            /// <summary>
            /// Left
            /// </summary>
            MLLightingTrackingCamera_Left,

            /// <summary>
            /// Right
            /// </summary>
            MLLightingTrackingCamera_Right,

            /// <summary>
            /// Far left
            /// </summary>
            MLLightingTrackingCamera_FarLeft,

            /// <summary>
            /// Far right
            /// </summary>
            MLLightingTrackingCamera_FarRight,

            /// <summary>
            /// Number of cameras
            /// </summary>
            MLLightingTrackingCamera_Count,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLLightingTrackingCamera_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        public enum __AnonymousCppEnum_ml_lighting_tracking_2630 : int
        {
            MLLightingTracking_GridWidth = unchecked((int)8),

            MLLightingTracking_GridHeight = unchecked((int)6),
        }

        /// <summary>
        /// Information about the ambient light sensor global state
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLLightingTrackingAmbientGlobalState
        {
            /// <summary>
            /// Array stores values for each world camera, ordered left, right, far left, far right
            /// Luminance estimate is in nits (cd/m^2)
            /// </summary>
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]
            public ushort[] als_global;

            /// <summary>
            /// Time when captured in nanoseconds since the Epoch
            /// </summary>
            public ulong timestamp_ns;
        }

        /// <summary>
        /// Information about the ambient light sensor grid state
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLLightingTrackingAmbientGridState
        {
            /// <summary>
            /// Array stores grid for each world camera, ordered left, right, far left, far right
            /// Luminance estimate is in nits (cd/m^2)
            /// </summary>
            [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPArray, SizeConst = 4)]
            public ushort[][][] als_grid;

            /// <summary>
            /// Time when captured in nanoseconds since the Epoch
            /// </summary>
            public ulong timestamp_ns;
        }

        /// <summary>
        /// Information about the color temperature state
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLLightingTrackingColorTemperatureState
        {
            /// <summary>
            /// Color temperature is in Kelvin
            /// </summary>
            public ushort color_temp;

            public ushort R_raw_pixel_avg;

            public ushort G_raw_pixel_avg;

            public ushort B_raw_pixel_avg;

            /// <summary>
            /// The Chromaticity coordinates (x, y) are based on standard CIE tristimulus
            /// values (XYZ) and may be computed as follows:
            /// x = X / (X + Y + Z)
            /// y = Y / (X + Y + Z)
            /// </summary>
            /// <remarks>
            /// The Correlated Color Temperature (CCT) may be computed as follows:
            /// CCT = 449 * n^3 + 3525 * n^2 + 68233 * n + 552033 (McCamy's Formula)
            /// where n = (x − 03320) / (01858 − y)
            /// NOTE: Y is a measure of the illuminance in nits
            /// </remarks>
            public float cie_x;

            /// <summary>
/// 
            /// </summary>
            /// <seealso cref="cie_x"/>
/// 
            public float cie_y;

            /// <summary>
/// 
            /// </summary>
            /// <seealso cref="cie_x"/>
/// 
            public float cie_z;

            /// <summary>
            /// Time when captured in nanoseconds since the Epoch
            /// </summary>
            public ulong timestamp_ns;
        }

        /// <summary>
        /// Create a Lighting Tracker
        /// </summary>
        /// <param name="out_handle">A pointer to an MLHandle which will contain the handle to the lighting tracker
        /// If this operation fails, out_handle will be ML_INVALID_HANDLE</param>
        /// <returns>
        /// MLResult_InvalidParam The parameter out_handle was not valid (null)
        /// MLResult_Ok Lighting tracker has been created successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv LowLatencyLightwear
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLLightingTrackingCreate(ref MlApi.MLHandle out_handle);

        /// <summary>
        /// Destroy a Lighting Tracker
        /// </summary>
        /// <param name="lighting_tracker">A handle to a lighting Tracker created by MLLightingTrackingCreate</param>
        /// <returns>
        /// MLResult_Ok The lighting tracker was successfully destroyed
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv LowLatencyLightwear
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLLightingTrackingDestroy(MlApi.MLHandle lighting_tracker);

        /// <summary>
        /// Gets information about the ambient light sensor global state
        /// </summary>
        /// <param name="lighting_tracker">A handle to a Lighting Tracker created by MLLightingTrackingCreate</param>
        /// <param name="out_state">Information about the global lighting state</param>
        /// <returns>
        /// MLResult_InvalidParam The parameter out_state was not valid (null)
        /// MLResult_Ok Received valid ambient blobal state data
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv LowLatencyLightwear
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLLightingTrackingGetAmbientGlobalState(MlApi.MLHandle lighting_tracker, ref MlLightingTracking.MLLightingTrackingAmbientGlobalState out_state);

        /// <summary>
        /// Gets information about the ambient light sensor grid state
        /// </summary>
        /// <param name="lighting_tracker">A handle to a Lighting Tracker created by MLLightingTrackingCreate</param>
        /// <param name="out_state">Information about the grid lighting state</param>
        /// <returns>
        /// MLResult_InvalidParam The parameter out_state was not valid (null)
        /// MLResult_Ok Received valid ambient grid state data
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv LowLatencyLightwear
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLLightingTrackingGetAmbientGridState(MlApi.MLHandle lighting_tracker, ref MlLightingTracking.MLLightingTrackingAmbientGridState out_state);

        /// <summary>
        /// Gets information about the color temperature state
        /// </summary>
        /// <param name="lighting_tracker">A handle to a Lighting Tracker created by MLLightingTrackingCreate</param>
        /// <param name="out_state">Information about the color temperature state</param>
        /// <returns>
        /// MLResult_InvalidParam The parameter out_state was not valid (null)
        /// MLResult_Ok Received color temperature state successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv LowLatencyLightwear
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLLightingTrackingGetColorTemperatureState(MlApi.MLHandle lighting_tracker, ref MlLightingTracking.MLLightingTrackingColorTemperatureState out_state);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlMusicService
    {
        /// <summary>
        /// Callbacks to be implemented by client to receive information from
        /// MusicService if callback mechanism is used Note that the data passed
        /// into callbacks is destroyed upon return
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMusicServiceCallbacks
        {
            public MlMusicService.MLMusicServiceCallbacks.on_playback_state_change_delegate on_playback_state_change;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_playback_state_change_delegate(MlMusicServiceCommon.MLMusicServicePlaybackState state, IntPtr data);

            public MlMusicService.MLMusicServiceCallbacks.on_repeat_state_change_delegate on_repeat_state_change;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_repeat_state_change_delegate(MlMusicServiceCommon.MLMusicServiceRepeatState state, IntPtr data);

            public MlMusicService.MLMusicServiceCallbacks.on_shuffle_state_change_delegate on_shuffle_state_change;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_shuffle_state_change_delegate(MlMusicServiceCommon.MLMusicServiceShuffleState state, IntPtr data);

            public MlMusicService.MLMusicServiceCallbacks.on_metadata_change_delegate on_metadata_change;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_metadata_change_delegate(in MlMusicServiceCommon.MLMusicServiceMetadata metadata, IntPtr data);

            public MlMusicService.MLMusicServiceCallbacks.on_position_change_delegate on_position_change;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_position_change_delegate(int position, IntPtr data);

            public MlMusicService.MLMusicServiceCallbacks.on_error_delegate on_error;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_error_delegate(MlMusicServiceCommon.MLMusicServiceError error_type, int error_code, IntPtr data);

            public MlMusicService.MLMusicServiceCallbacks.on_status_change_delegate on_status_change;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_status_change_delegate(MlMusicServiceCommon.MLMusicServiceStatus status, IntPtr data);

            public MlMusicService.MLMusicServiceCallbacks.on_volume_change_delegate on_volume_change;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_volume_change_delegate(float volume, IntPtr data);
        }

        /// <summary>
        /// Connects to MusicService
        /// </summary>
        /// <param name="name">Name of the MusicService provider (defined as the visible_name in the manifest)
        /// NULL terminated ASCII character sequence</param>
        /// <returns>
        /// MLResult_AllocFailed Connection failed with resource allocation failure
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok Connected to MusicService successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_AlreadyExists Connection exists already
        /// </returns>
        /// <remarks>
        /// @priv ConnectBackgroundMusicService, MusicService
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServiceConnect([MarshalAs(UnmanagedType.LPStr)] string name);

        /// <summary>
        /// Disconnects from MusicService
        /// </summary>
        /// <returns>
        /// MLResult_Ok Disconnected from MusicService successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit Music service wasn't connected
        /// </returns>
        /// <remarks>
        /// @priv MusicService
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServiceDisconnect();

        /// <summary>
        /// Sets the client-implemented callbacks to receive information from MusicService
        /// Client needs to implement the callbacks defined by MLMusicServiceCallbacks
        /// The library passes the MusicService info to the client via those callbacks
        /// </summary>
        /// <param name="callbacks">Client-implemented callbacks</param>
        /// <param name="data">User metadata</param>
        /// <returns>
        /// MLResult_Ok Callbacks set successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv MusicService
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServiceSetCallbacks(ref MlMusicService.MLMusicServiceCallbacks callbacks, IntPtr data);

        /// <summary>
        /// Sets the authentication string on the MusicService
        /// </summary>
        /// <param name="auth_string">The authentication string</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok Authentication string set successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit Music service wasn't connected
        /// </returns>
        /// <remarks>
        /// @priv MusicService
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServiceSetAuthString([MarshalAs(UnmanagedType.LPStr)] string auth_string);

        /// <summary>
        /// Sets a specified URL
        /// </summary>
        /// <param name="url">The URL to play</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok URL set successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit Music service wasn't connected
        /// </returns>
        /// <remarks>
        /// @priv MusicService
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServiceSetURL([MarshalAs(UnmanagedType.LPStr)] string url);

        /// <summary>
        /// Sets the the playlist on the MusicService
        /// </summary>
        /// <param name="play_list">List of URLs to play</param>
        /// <param name="size">Number of URLs in the list</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok Play list set successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLMediaGenericResult_NoInit Music service wasn't connected
        /// </returns>
        /// <remarks>
        /// @priv MusicService
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServiceSetPlayList(out string play_list, ulong size);

        /// <summary>
        /// Starts playing the current track
        /// </summary>
        /// <returns>
        /// MLResult_Ok Playback started successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit Music service wasn't connected
        /// </returns>
        /// <remarks>
        /// @priv MusicService
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServiceStart();

        /// <summary>
        /// Stops playing the current track
        /// </summary>
        /// <returns>
        /// MLResult_Ok Playback stopped successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit Music service wasn't connected
        /// </returns>
        /// <remarks>
        /// @priv MusicService
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServiceStop();

        /// <summary>
        /// Pauses the current track
        /// </summary>
        /// <returns>
        /// MLResult_Ok Playback resumed successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit Music service wasn't connected
        /// </returns>
        /// <remarks>
        /// @priv MusicService
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServicePause();

        /// <summary>
        /// Resumes playing the current track
        /// </summary>
        /// <returns>
        /// MLResult_Ok Playback resumed successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit Music service wasn't connected
        /// </returns>
        /// <remarks>
        /// @priv MusicService
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServiceResume();

        /// <summary>
        /// Seeks to the desired position
        /// </summary>
        /// <param name="position">The position(in milliseconds) to seek to</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok Playback seeked successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit Music service wasn't connected
        /// </returns>
        /// <remarks>
        /// @priv MusicService
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServiceSeek(uint position);

        /// <summary>
        /// Advances to the next track in the playlist
        /// </summary>
        /// <returns>
        /// MLResult_Ok Next track is selected successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit Music service wasn't connected
        /// </returns>
        /// <remarks>
        /// @priv MusicService
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServiceNext();

        /// <summary>
        /// Rewinds to the previous track in the playlist
        /// </summary>
        /// <returns>
        /// MLResult_Ok Previous track is selected successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit Music service wasn't connected
        /// </returns>
        /// <remarks>
        /// @priv MusicService
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServicePrevious();

        /// <summary>
        /// Sets the shuffle mode
        /// </summary>
        /// <param name="mode">Shuffle mode On/Off switch</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok Playlist shuffling is set successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit Music service wasn't connected
        /// </returns>
        /// <remarks>
        /// @priv MusicService
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServiceSetShuffle(MlMusicServiceCommon.MLMusicServiceShuffleState mode);

        /// <summary>
        /// Sets the repeat mode
        /// </summary>
        /// <param name="mode">Repeat mode options</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok Playlist repeat is set successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit Music service wasn't connected
        /// </returns>
        /// <remarks>
        /// @priv MusicService
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServiceSetRepeat(MlMusicServiceCommon.MLMusicServiceRepeatState mode);

        /// <summary>
        /// Sets the volume
        /// </summary>
        /// <param name="volume">The new volume in the [00, 10] range</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok volume is set successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit Music service wasn't connected
        /// </returns>
        /// <remarks>
        /// @priv MusicService
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServiceSetVolume(float volume);

        /// <summary>
        /// Obtains the length of the current track
        /// </summary>
        /// <param name="out_length">Length of the track in seconds</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok Track duration is retrieved successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit Music service wasn't connected
        /// </returns>
        /// <remarks>
        /// @priv MusicService
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServiceGetTrackLength(ref uint out_length);

        /// <summary>
        /// Obtains the position of the current track
        /// </summary>
        /// <param name="out_position">Position in milliseconds</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok Current Playback position is retrieved successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit Music service wasn't connected
        /// </returns>
        /// <remarks>
        /// @priv MusicService
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServiceGetCurrentPosition(ref uint out_position);

        /// <summary>
        /// Obtains the MusicService status
        /// </summary>
        /// <param name="out_status">MusicService status</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok Current status is retrieved successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit Music service wasn't connected
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServiceGetStatus(ref MlMusicServiceCommon.MLMusicServiceStatus out_status);

        /// <summary>
        /// Obtains the error from MusicService
        /// </summary>
        /// <param name="out_type">Error type</param>
        /// <param name="out_code">Error code
        /// For error types other than MLMusicServiceError_ServiceSpecific,
        /// the value of out_code uses the same enumeration as out_type
        /// For MLMusicServiceError_ServiceSpecific, the out_code is known only
        /// between the music streaming service and the application, therefore
        /// the values are not documented in this file</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok Current error is retrieved successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit Music service wasn't connected
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServiceGetError(ref MlMusicServiceCommon.MLMusicServiceError out_type, ref int out_code);

        /// <summary>
        /// Polls the state of playback from MusicService
        /// </summary>
        /// <param name="out_state">Playback state</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok Current playback state is retrieved successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit Music service wasn't connected
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServiceGetPlaybackState(ref MlMusicServiceCommon.MLMusicServicePlaybackState out_state);

        /// <summary>
        /// Polls the state of repeat setting from MusicService
        /// </summary>
        /// <param name="out_state">Repeat setting</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok Current repeat state is retrieved successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit Music service wasn't connected
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServiceGetRepeatState(ref MlMusicServiceCommon.MLMusicServiceRepeatState out_state);

        /// <summary>
        /// Polls the state of shuffle setting from MusicService
        /// </summary>
        /// <param name="out_state">shuffle setting</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok Current shuffle state is retrieved successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit Music service wasn't connected
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServiceGetShuffleState(ref MlMusicServiceCommon.MLMusicServiceShuffleState out_state);

        /// <summary>
        /// Polls the volume level of MusicService Provider
        /// </summary>
        /// <param name="out_volume">Volume level</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok Current volume level is retrieved successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit Music service wasn't connected
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServiceGetVolume(ref float out_volume);

        /// <summary>
        ///  MLMusicServiceGetMetadataForIndex
        /// Polls the metadata from MusicService for the current track
        /// The library maintains the lifetime of the data Call MLMusicServiceReleaseMetadata
        /// to release them
        /// </summary>
        /// <param name="out_metadata">Metadata received</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok Current tracks's metadata is retrieved successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit Music service wasn't connected
        /// </returns>
        /// <remarks>
        /// Deprecated since 0200 Scheduled for removal Replaced by
        /// @priv MusicService
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServiceGetMetadata(ref MlMusicServiceCommon.MLMusicServiceMetadata out_metadata);

        /// <summary>
        ///  MLMusicServiceGetMetadataForIndex
        /// Polls the metadata from MusicService for the previous/current/next track
        /// The library maintains the lifetime of the data Call MLMusicServiceReleaseMetadata
        /// to release them
        /// </summary>
        /// <param name="track_type">Track enumeration for previous/current/next track</param>
        /// <param name="out_metadata">Metadata received</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok Tracks's metadata is retrieved successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit Music service wasn't connected
        /// </returns>
        /// <remarks>
        /// Deprecated since 0210 Scheduled for removal Replaced by
        /// @apilevel 4
        /// @priv MusicService
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServiceGetMetadataEx(MlMusicServiceCommon.MLMusicServiceTrackType track_type, ref MlMusicServiceCommon.MLMusicServiceMetadata out_metadata);

        /// <summary>
        /// Get Metadata for the track at relative position to the current track
        /// The library maintains the lifetime of the data Call MLMusicServiceReleaseMetadata
        /// to release them
        /// </summary>
        /// <param name="track_index">Relative index of the track for which to retrieve metadata</param>
        /// <param name="out_metadata">Metadata to be returned</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters was NULL or invalid
        /// MLResult_Ok Metadata was returned successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @apilevel 5
        /// @priv None
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServiceGetMetadataForIndex(int track_index, ref MlMusicServiceCommon.MLMusicServiceMetadata out_metadata);

        /// <summary>
        /// Releases the metadata
        /// </summary>
        /// <param name="metadata">Metadata obtained by MLMusicServiceGetMetadata</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok Metadata object is released successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit Music service wasn't connected
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_musicservice", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMusicServiceReleaseMetadata(ref MlMusicServiceCommon.MLMusicServiceMetadata metadata);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlMediaCodeclist
    {
        /// <summary>
        /// Bit mask for specifying the type of codec being queried using MLMediaCodecListGetMatchingCodecs
        /// </summary>
        [Flags]
        public enum MLMediaCodecListCodecTypeFlag : int
        {
            /// <summary>
            /// Software
            /// </summary>
            MLMediaCodecListCodecTypeFlag_Software = unchecked((int)1 << (int) 0),

            /// <summary>
            /// Hardware
            /// </summary>
            MLMediaCodecListCodecTypeFlag_Hardware = unchecked((int)1 << (int) 1),

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLMediaCodecListCodecTypeFlag_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Bit mask for checking the capability of a codec after queried via MLMediaCodecListGetCapabilityFlag
        /// </summary>
        [Flags]
        public enum MLMediaCodecListCapabilityFlag : int
        {
            /// <summary>
            /// Adaptive playback
            /// </summary>
            MLMediaCodecListCapabilityFlag_AdaptivePlayback = unchecked((int)1 << (int) 0),

            /// <summary>
            /// Secure playback
            /// </summary>
            MLMediaCodecListCapabilityFlag_SecurePlayback = unchecked((int)1 << (int) 1),

            /// <summary>
            /// Tunneled playback
            /// </summary>
            MLMediaCodecListCapabilityFlag_TunneledPlayback = unchecked((int)1 << (int) 2),

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLMediaCodecListCapabilityFlag_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Used to store the list of available codec names or the list of supported mime types
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaCodecListQueryResults
        {
            public Interop.size_t count;

            public IntPtr data;
        }

        /// <summary>
        /// Used to store the list of codec profile levels
        /// @apilevel 6
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaCodecListProfileLevel
        {
            public uint profile;

            public uint level;
        }

        /// <summary>
        /// Obtain the number of available codecs
        /// </summary>
        /// <param name="out_codec_count">Number of available codecs</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok If operation was successful
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacodeclist", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaCodecListCountCodecs(ref ulong out_codec_count);

        /// <summary>
        /// Determine whether a codec is a software codec
        /// </summary>
        /// <param name="codec_name">Name of the codec</param>
        /// <param name="out_val">@c true if the codec is a software codec and @c false otherwise</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok If operation was successful
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacodeclist", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaCodecListIsSoftwareCodec([MarshalAs(UnmanagedType.LPStr)] string codec_name, ref bool out_val);

        /// <summary>
        /// Obtain a list of matching codecs for a given codec mime
        /// </summary>
        /// <param name="mime">Codec mime</param>
        /// <param name="is_encoder">@c true if querying for encoder and false otherwise</param>
        /// <param name="flag">Whether querying for software-only or hardware-only,
        /// defined by MLMediaCodecListCodecTypeFlag</param>
        /// <param name="out_matching_codecs">List of codecs supporting the given mime</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok If operation was successful
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// The memory used to store the list is maintained by the library
        /// User shall call MLMediaCodecListQueryResultsRelease to release it
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacodeclist", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaCodecListGetMatchingCodecs([MarshalAs(UnmanagedType.LPStr)] string mime, [MarshalAs(UnmanagedType.U1)] bool is_encoder, MlMediaCodeclist.MLMediaCodecListCodecTypeFlag flag, ref MlMediaCodeclist.MLMediaCodecListQueryResults out_matching_codecs);

        /// <summary>
        /// Obtain the codec matching the given codec type from the codec list
        /// </summary>
        /// <param name="type">Codec mime</param>
        /// <param name="is_encoder">@c true if querying for encoder and @c false otherwise</param>
        /// <param name="start_index">Index from which to search in the codec list
        /// The number shall be between 0 and number of available codecs</param>
        /// <param name="out_index">Index of the matching codec or -2</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok If operation was successful
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacodeclist", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaCodecListGetCodecByType([MarshalAs(UnmanagedType.LPStr)] string type, [MarshalAs(UnmanagedType.U1)] bool is_encoder, ulong start_index, ref long out_index);

        /// <summary>
        /// Obtain the codec from the codec matching the given codec name from the codec list
        /// </summary>
        /// <param name="name">Codec name</param>
        /// <param name="out_index">Index of the matching codec or -2</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok If operation was successful
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacodeclist", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaCodecListGetCodecByName([MarshalAs(UnmanagedType.LPStr)] string name, ref long out_index);

        /// <summary>
        /// Confirm whether a component is an Encoder or Decoder
        /// </summary>
        /// <param name="index">Index of the codec in the codec list
        /// The number shall be between 0 and number of available codecs</param>
        /// <param name="out_val">@c true if the codec is an encoder and @c false otherwise</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok If operation was successful
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacodeclist", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaCodecListIsEncoder(ulong index, ref bool out_val);

        /// <summary>
        /// Obtain a codec name
        /// </summary>
        /// <param name="index">Index of the codec in the codec list
        /// The number shall be between 0 and number of available codecs</param>
        /// <param name="out_name">Pointer to the user-maintained buffer for storing
        /// the output C-style name string</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok If operation was successful
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// User shall allocate at least MAX_CODEC_NAME_LENGTH bytes of memory for
        /// storing the output name string
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacodeclist", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaCodecListGetCodecName(ulong index, IntPtr out_name);

        /// <summary>
        /// Obtain the list of mime types supported by a codec
        /// </summary>
        /// <param name="index">Index of the codec in the codec list
        /// The number shall be between 0 and number of available codecs</param>
        /// <param name="out_supported_mimes">List of supported mimes</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok If operation was successful
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// The memory used to store the list is maintained by the library
        /// User shall call MLMediaCodecListQueryResultsRelease to
        /// release it
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacodeclist", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaCodecListGetSupportedMimes(ulong index, ref MlMediaCodeclist.MLMediaCodecListQueryResults out_supported_mimes);

        /// <summary>
        /// Obtain the capability flag for a codec
        /// </summary>
        /// <param name="index">Index of the codec in the codec list
        /// The number shall be between 0 and number of available codecs</param>
        /// <param name="mime">Mime type of the codec being queried</param>
        /// <param name="out_capability_flag">Codec capability flag defined by MLMediaCodecListCapabilityFlag</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok If operation was successful
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacodeclist", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaCodecListGetCapabilityFlag(ulong index, [MarshalAs(UnmanagedType.LPStr)] string mime, ref MlMediaCodeclist.MLMediaCodecListCapabilityFlag out_capability_flag);

        /// <summary>
        /// Obtain the name of a secure codec for the given mime type
        /// </summary>
        /// <param name="mime">Mime type of the codec</param>
        /// <param name="is_decoder">@c true if querying for decoder and @c false otherwise</param>
        /// <param name="out_name">Pointer to the user-maintained buffer for storing
        /// the output C-style name string</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok If operation was successful
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// User shall allocate at least MAX_CODEC_NAME_LENGTH bytes of memory for
        /// storing the output name string
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacodeclist", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaCodecListGetSecureCodecName([MarshalAs(UnmanagedType.LPStr)] string mime, [MarshalAs(UnmanagedType.U1)] bool is_decoder, IntPtr out_name);

        /// <summary>
        /// Release the query results
        /// </summary>
        /// <param name="query_results">Query results such as the list of codecs acquired by
        /// MLMediaCodecListGetMatchingCodecs or the list of supported mime types
        /// acquired by MLMediaCodecListGetSupportedMimes</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok If operation was successful
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacodeclist", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaCodecListQueryResultsRelease(ref MlMediaCodeclist.MLMediaCodecListQueryResults query_results);

        /// <summary>
        /// Obtain the supported profile levels for a codec
        /// </summary>
        /// <param name="index">Index of the codec in the codec list
        /// The number shall be between 0 and number of available codecs</param>
        /// <param name="mime">Mime type of the codec being queried</param>
        /// <param name="out_profile_levels">Codec supported profile levels defined by MLMediaCodecListProfileLevel</param>
        /// <param name="out_profile_levels_size">Number of profile levels</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok If operation was successful
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// User shall call MLMediaCodecListProfileLevelsRelease to release it
        /// @apilevel 6
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacodeclist", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaCodecListGetSupportedProfileLevels(ulong index, [MarshalAs(UnmanagedType.LPStr)] string mime, out IntPtr out_profile_levels, ref Interop.size_t out_profile_levels_size);

        /// <summary>
        /// Release profile levels
        /// </summary>
        /// <param name="profile_levels">The return value of MLMediaCodecListGetSupportedProfileLevels</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok If operation was successful
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @apilevel 6
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacodeclist", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaCodecListProfileLevelsRelease(ref MlMediaCodeclist.MLMediaCodecListProfileLevel profile_levels);

        /// <summary>
        /// Obtain the supported color formats for a codec
        /// </summary>
        /// <param name="index">Index of the codec in the codec list
        /// The number shall be between 0 and number of available codecs</param>
        /// <param name="mime">Mime type of the codec being queried</param>
        /// <param name="out_color_formats">Codec supported color formats</param>
        /// <param name="out_color_formats_size">Number of color formats</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok If operation was successful
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// User shall call MLMediaCodecListColorFormatsRelease to release it
        /// @apilevel 6
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacodeclist", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaCodecListGetSupportedColorFormats(ulong index, [MarshalAs(UnmanagedType.LPStr)] string mime, out IntPtr out_color_formats, ref Interop.size_t out_color_formats_size);

        /// <summary>
        /// Release color formats
        /// </summary>
        /// <param name="color_formats">the return value of MLMediaCodecListGetSupportedColorFormats</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok If operation was successful
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @apilevel 6
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacodeclist", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaCodecListColorFormatsRelease(ref uint color_formats);
    }
}

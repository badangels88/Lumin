//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlPurchase
    {
        /// <summary>
        ///  InAppPurchases
        /// APIs for the In-App Purchase flow
        /// THIS IS NOT CURRENTLY AVAILABLE
        /// FOR USE ALL RESPONSES WILL RETURN MLCloudResult_NotFound UNTIL THE
        /// BACKEND SYSTEMS ARE IN PLACE
        /// Not expected to function at runtime API for early review only
        /// </summary>
        /// <remarks>
        /// - All char*'s in this API are UTF-8
        /// \
        /// {
        /// </remarks>
        public const int MLResultAPIPrefix_Purchase = unchecked((int)0xdf1d << 16);

        /// <summary>
        /// Return values for Purchase API calls
        /// </summary>
        public enum MLPurchaseResult : int
        {
            /// <summary>
            /// The purchase was cancelled by the user through the system dialog
            /// </summary>
            MLPurchaseResult_UserCancelled = unchecked((int)MLResultAPIPrefix_Purchase),

            /// <summary>
            /// The purchase cannot be completed for an already-purchased item
            /// </summary>
            MLPurchaseResult_ItemAlreadyPurchased,

            /// <summary>
            /// There was some issue with the source of payment
            /// </summary>
            MLPurchaseResult_PaymentSourceError,

            /// <summary>
            /// The purchase token used in the call was not valid
            /// </summary>
            MLPurchaseResult_InvalidPurchaseToken,

            /// <summary>
            /// The item selected for purchase is not available for purchasing
            /// </summary>
            MLPurchaseResult_ItemUnavailable,

            /// <summary>
            /// The user has not setup a default payment method
            /// </summary>
            MLPurchaseResult_NoDefaultPayment,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLPurchaseResult_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        public const int MLPurchaseItemDetails_MaximumIdsPerRequest = unchecked((int)20);

        /// <summary>
        /// The type of the item
        /// </summary>
        public enum MLPurchaseType : int
        {
            /// <summary>
            /// Consumable items are items that can be purchased multiple times The
            /// application is responsible for managing the consumption of consumable items
            /// </summary>
            MLPurchaseType_Consumable,

            /// <summary>
            /// Nonconsumable items can only be purchased once This restriction will
            /// be enforced by the service
            /// </summary>
            MLPurchaseType_Nonconsumable,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLPurchaseType_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Struct containing information required to query the MLPurchaseItemDetails API
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLPurchaseItemDetailsQuery
        {
            /// <summary>
            /// The array of item IDs for which details are to be queried
            /// This array should not contain more than
            /// MLPurchaseItemDetails_MaximumIdsPerRequest ids The array must be allocated
            /// by the caller of the MLPurchaseItemDetails API
            /// </summary>
            public IntPtr ids;

            /// <summary>
            /// The length of the above `ids` array (the number of item IDs to be
            /// queried
            /// </summary>
            public uint id_count;
        }

        /// <summary>
        /// Represents the item details for a single in app purchase item
        /// </summary>
        /// <remarks>
        /// An array of these structs will be returned by the MLPurchaseItemDetailsQuery
        /// API calls All strings in the struct are allocated by the API, and their
        /// lifetime is bound to the lifetime of the MLPurchaseItemDetailsQuery handle
        /// Client code should read / copy the information in this struct before calling
        /// the MLPurchaseItemDetailsDestroy API as that will free the query handle and
        /// associated result data
        /// </remarks>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLPurchaseItemDetailsResult
        {
            /// <summary>
            /// Id of the in-app purchase item
            /// </summary>
            [MarshalAs(UnmanagedType.LPStr)]
            public string iap_id;

            /// <summary>
            /// The formatted price for the item This version only
            /// supports US purchases, so it will only show as a valid dollar amount,
            /// eg $000, $999, $12345, etc
            /// </summary>
            [MarshalAs(UnmanagedType.LPStr)]
            public string price;

            /// <summary>
            /// The user-friendly name of the item
            /// </summary>
            [MarshalAs(UnmanagedType.LPStr)]
            public string name;

            /// <summary>
            /// The type of purchase
            /// </summary>
            public MlPurchase.MLPurchaseType type;

            /// <summary>
            /// The token to be used when submitting a purchase It must be
            /// copied before calling MLPurchaseItemDetailsDestroy on the handle associated
            /// with this struct For the purposes of copying, this can be treated as a null
            /// terminated character array
            /// </summary>
            public MlPurchase.MLPurchaseToken token;

            /// <summary>
            /// A flag that signifies if the item is free or not
            /// </summary>
            [MarshalAs(UnmanagedType.U1)]
            public bool is_free;
        }

        /// <summary>
        /// MLPurchaseToken is an opaque type used to represent and submit
        /// a purchase during the purchase transaction process
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly struct MLPurchaseToken : IEquatable<MLPurchaseToken>
        {
            public MLPurchaseToken(string value) => this.Value = value;

            [MarshalAs(UnmanagedType.LPStr)]
            public readonly string Value;

            public bool Equals(MLPurchaseToken other) => Value.Equals(other.Value);

            public override bool Equals(object obj) => obj is MLPurchaseToken other && Equals(other);

            public override int GetHashCode() => Value.GetHashCode();

            public override string ToString() => Value.ToString();

            public static implicit operator string(MLPurchaseToken from) => from.Value;

            public static implicit operator MLPurchaseToken(string from) => new MLPurchaseToken(from);

            public static bool operator ==(MLPurchaseToken left, MLPurchaseToken right) => left.Equals(right);

            public static bool operator !=(MLPurchaseToken left, MLPurchaseToken right) => !left.Equals(right);
        }

        /// <summary>
        /// MLPurchaseItemDetailsResults is the data response for the MLPurchaseItemDetailsQuery API call
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLPurchaseItemDetailsResults
        {
            /// <summary>
            /// The number of MLPurchaseItemDetailsResult structs in the array response
            /// </summary>
            public uint count;

            /// <summary>
            /// An array of MLPurchaseItemDetailsResult structs
            /// </summary>
            public IntPtr item_details;
        }

        /// <summary>
        /// The MLPurchaseConfirmation struct contains the purchase confirmation
        /// information for a historical, successfully completed purchase An array of
        /// these structs will be returned by the MLPurchaseHistoryQuery API call
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLPurchaseConfirmation
        {
            /// <summary>
            /// The unique ID for this purchase
            /// </summary>
            [MarshalAs(UnmanagedType.LPStr)]
            public string order_id;

            /// <summary>
            /// The package name of the application from which this purchase originated
            /// </summary>
            [MarshalAs(UnmanagedType.LPStr)]
            public string package_name;

            /// <summary>
            /// The time the product was purchased, in milliseconds since the epoch (Jan 1, 1970)
            /// </summary>
            public ulong purchase_time;

            /// <summary>
            /// The signature of the purchase data, signed with the private key of the developer
            /// </summary>
            [MarshalAs(UnmanagedType.LPStr)]
            public string signature;

            /// <summary>
            /// The in app purchase ID of the item being purchased
            /// </summary>
            [MarshalAs(UnmanagedType.LPStr)]
            public string iap_id;

            /// <summary>
            /// The type of purchase
            /// </summary>
            public MlPurchase.MLPurchaseType type;
        }

        /// <summary>
        /// The results of a particular page request for purchase history
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLPurchaseHistoryResult
        {
            /// <summary>
            /// The number of purchase confirmations available in this page of purchase confirmations
            /// </summary>
            public uint count;

            /// <summary>
            /// The array of confirmed purchases made by this user for this
            /// application Its memory is allocated by the
            /// MLPurchaseHistoryQueryGetPageResult call and is freed by the
            /// MLPurchaseHistoryQueryDestroy call
            /// </summary>
            public IntPtr confirmations;

            /// <summary>
            /// If has_next_page is true, MLPurchaseHistoryQueryGetPageResult may
            /// be re-called to query for the next page of purchase confirmation data
            /// </summary>
            [MarshalAs(UnmanagedType.U1)]
            public bool has_next_page;

            /// <summary>
            /// The status field Indicates whether or not the cloud call has
            /// completed or not, with the values MLCloudStatus_Done or
            /// MLCloudStatus_NotDone, respectively
            /// </summary>
            public MlCloud.MLCloudStatus status;
        }

        /// <summary>
        /// Creates the handle to be used for future MLPurchaseItemDetails API calls
        /// </summary>
        /// <param name="out_handle">The handle to the purchase item details query The out_handle is only valid if return value is MLResult_Ok</param>
        /// <returns>
        /// MLResult_AllocFailed If the handle cannot be allocated
        /// MLResult_Ok On success
        /// MLResult_UnspecifiedFailure Indicates an unexpected failure
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_purchase", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLPurchaseItemDetailsCreate(ref MlApi.MLHandle out_handle);

        /// <summary>
        /// Submits the details query for the provided in-app purchase ID's
        /// </summary>
        /// <param name="item_details_handle">This is the query handle created by MLPurchaseItemDetailsCreate</param>
        /// <param name="request">This is a query struct containing the list of items to request</param>
        /// <returns>
        /// MLResult_InvalidParam If any input parameters are invalid
        /// MLResult_Ok On success
        /// MLResult_PrivilegeDenied Indicates an privilege error with the purchase details system call
        /// MLResult_UnspecifiedFailure Indicates an unexpected failure
        /// MLCloudResult_InvalidHandle Indicates the provided query handle is not valid
        /// MLCloudResult_SystemError Indicates an issue with the cloud service, eg service is not available for any reason
        /// </returns>
        /// <remarks>
        /// @priv InAppPurchase
        /// </remarks>
        [DllImport("ml_purchase", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLPurchaseItemDetailsGet(MlApi.MLHandle item_details_handle, in MlPurchase.MLPurchaseItemDetailsQuery request);

        /// <summary>
        /// Checks the status of the call to MLPurchaseItemDetails
        /// This call is used to poll for the status of the query Given that MLResult_Ok is returned,
        /// the call is complete when the value for out_status is MLCloudStatus_Done
        /// </summary>
        /// <param name="item_details_handle">This is the handle that was used to call MLPurchaseItemDetails</param>
        /// <param name="out_item_details_results">This will contain the results of the call when the return value
        /// is MLResult_Ok and out_status is MLCloudStatus_Done</param>
        /// <param name="out_status">This will contain the status of the call, either MLCloudStatus_Done or MLCloudStatus_NotDone</param>
        /// <returns>
        /// MLResult_InvalidParam If any input parameters are invalid
        /// MLResult_Ok On success
        /// MLResult_PrivilegeDenied Indicates an privilege error with the purchase details system call
        /// MLResult_UnspecifiedFailure Indicates an unexpected failure
        /// MLCloudResult_InvalidHandle Indicates the provided query handle is not valid
        /// MLCloudResult_NetworkError If there is a network connectivity error for the service call
        /// MLCloudResult_NotFound Indicates the requested resource was not found on the server
        /// MLCloudResult_ServerError If there is an unexepected server error
        /// MLCloudResult_SystemError Indicates an issue with the cloud service, eg if the service is not available for any reason
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_purchase", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLPurchaseItemDetailsGetResult(MlApi.MLHandle item_details_handle, ref MlPurchase.MLPurchaseItemDetailsResults out_item_details_results, ref MlCloud.MLCloudStatus out_status);

        /// <summary>
        /// Frees the memory allocated for the handle in the call to MLPurchaseItemDetailsCreate
        /// </summary>
        /// <param name="item_details_handle">This is a handle that was created by MLPurchaseItemDetailsCreate</param>
        /// <returns>
        /// MLResult_Ok On success
        /// MLResult_UnspecifiedFailure Indicates an unexpected failure
        /// MLCloudResult_InvalidHandle Indicates the provided query handle is not valid
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_purchase", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLPurchaseItemDetailsDestroy(MlApi.MLHandle item_details_handle);

        /// <summary>
        /// Creates the handle to be used for the MLPurchaseSubmit call to submit an in-app purchase
        /// </summary>
        /// <param name="out_handle">The handle for the API call to submit the in-app purchase The out_handle is only valid if return value is MLResult_Ok</param>
        /// <returns>
        /// MLResult_AllocFailed If the handle cannot be allocated
        /// MLResult_Ok On success
        /// MLResult_UnspecifiedFailure Indicates an unexpected failure
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_purchase", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLPurchaseCreate(ref MlApi.MLHandle out_handle);

        /// <summary>
        /// Attempts to purchase the in-app purchase item represented by the MLPurchaseToken param
        /// </summary>
        /// <param name="purchase_handle">This is a handle created by MLPurchaseCreate, used to identify this purchase attempt</param>
        /// <param name="token">This identifies the in-app purchase item to be purchased by this call This should have been copied
        /// from the struct MLPurchaseItemDetails before calling MLPurchaseItemDetailsDestroy, otherwise the token is invalid
        /// See MLPurchaseItemDetails for more information on copying</param>
        /// <returns>
        /// MLResult_InvalidParam If any input parameters are invalid
        /// MLResult_Ok On success
        /// MLResult_PrivilegeDenied Indicates an privilege error with the purchase details system call
        /// MLResult_UnspecifiedFailure Indicates an unexpected failure
        /// MLCloudResult_InvalidHandle Indicates the provided query handle is not valid
        /// MLCloudResult_SystemError Indicates an issue with the cloud service, eg if the service is not available for any reason
        /// </returns>
        /// <remarks>
        /// @priv InAppPurchase
        /// </remarks>
        [DllImport("ml_purchase", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLPurchaseSubmit(MlApi.MLHandle purchase_handle, MlPurchase.MLPurchaseToken token);

        /// <summary>
        /// Checks the status of the call to MLPurchaseSubmit
        /// </summary>
        /// <param name="purchase_handle">This handle represents the in-app purchase submitted vai MLPurchaseSubmit</param>
        /// <param name="out_confirmation">This will be populated with the purchase confirmation
        /// information given that the call is successful (returns MLResult_Ok) and complete (out_status is MLCloudStatus_Done)</param>
        /// <param name="out_status">Given that MLResult_Ok is returned, this represents the polling state of the request
        /// It is either MLCloudStatus_Done or MLCLoudStatus_NotDone</param>
        /// <returns>
        /// MLResult_InvalidParam If any input parameters are invalid
        /// MLResult_Ok On success
        /// MLResult_UnspecifiedFailure Indicates an unexpected failure
        /// MLCloudResult_InvalidHandle Indicates the provided query handle is not valid
        /// MLCloudResult_NetworkError If there is a network connectivity error for the service call
        /// MLCloudResult_NotFound Indicates the requested resource was not found on the server
        /// MLCloudResult_ServerError If there is an unexepected server error
        /// MLCloudResult_SystemError Indicates an issue with the cloud service, eg if the service is not available for any reason
        /// MLPurchaseResult_InvalidPurchaseToken If the token representing the in-app purchase is not valid
        /// MLPurchaseResult_ItemAlreadyPurchased Indicates the item has already been purchased
        /// MLPurchaseResult_ItemUnavailable Indicates the item is no longer available
        /// MLPurchaseResult_NoDefaultPayment If the user has not configured a default payment method
        /// MLPurchaseResult_PaymentSourceError Indicates there was a failure with the payment source
        /// MLPurchaseResult_UserCancelled Indicates the user cancelled the purchase via the purchase confirmation UI
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_purchase", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLPurchaseGetResult(MlApi.MLHandle purchase_handle, ref MlPurchase.MLPurchaseConfirmation out_confirmation, ref MlCloud.MLCloudStatus out_status);

        /// <summary>
        /// Frees the memory being maintained by the handle created by MLPurchaseCreate
        /// </summary>
        /// <param name="purchase_handle">This is a handle that was created by MLPurchaseCreate</param>
        /// <returns>
        /// MLResult_Ok On success
        /// MLResult_UnspecifiedFailure Indicates an unexpected failure
        /// MLCloudResult_InvalidHandle Indicates the provided query handle is not valid
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_purchase", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLPurchaseDestroy(MlApi.MLHandle purchase_handle);

        /// <summary>
        /// Creates the handle to be used to retrieve in-app purchase history via the MLPurchaseHistoryQueryGetPage call
        /// MLPurchaseHistoryQueryDestroy must be called on the handle when done with the query and the returned data in order clean up the allocations
        /// </summary>
        /// <param name="out_handle">The handle to the purchase item details query The out_handle is only valid if return value is MLResult_Ok</param>
        /// <returns>
        /// MLResult_AllocFailed If the handle cannot be allocated
        /// MLResult_UnspecifiedFailure Indicates an unexpected failure
        /// MLResult_Ok On success
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_purchase", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLPurchaseHistoryQueryCreate(ref MlApi.MLHandle out_handle);

        /// <summary>
        /// Request the next available page of purchase history information for the current user for the current application
        /// </summary>
        /// <param name="history_handle">This is a handle that was created by MLPurchaseHistoryQueryCreate</param>
        /// <param name="limit">This is the maximum number of items that will be returned in a single page</param>
        /// <returns>
        /// MLResult_Ok On success
        /// MLResult_PrivilegeDenied Indicates an privilege error with the purchase details system call
        /// MLResult_UnspecifiedFailure Indicates an unexpected failure
        /// MLCloudResult_InvalidHandle Indicates the provided query handle is not valid
        /// MLCloudResult_SystemError Indicates an issue with the cloud service, eg if the service is not available for any reason
        /// </returns>
        /// <remarks>
        /// The first time it is called, it will initiate the query for the first page of purchase
        /// history The second time it is called with the same handle, it will initiate
        /// the query for the the second page, etc
        /// @priv InAppPurchase
        /// </remarks>
        [DllImport("ml_purchase", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLPurchaseHistoryQueryGetPage(MlApi.MLHandle history_handle, uint limit);

        /// <summary>
        /// Used to obtain the in app purchase history via the MLPurchaseHistoryResult out param
        /// </summary>
        /// <param name="history_handle">This is a handle that was used to call MLPurchaseHistoryQueryPage</param>
        /// <param name="out_page_result">This will be populated with the purchase history result for the queried
        /// page of history given that the call is successful (returns MLResult_Ok) and
        /// complete (out_page_result-&gt;status is MLCloudStatus_Done) The MLPurchaseHistoryResult data is
        /// allocated by the call and will be freed when MLPurchaseHistoryQueryDestroy is called OR *the next time
        /// MLPurchaseHistoryQueryGetPage is called*</param>
        /// <returns>
        /// MLResult_AllocFailed If the memory for the response cannot be allocated
        /// MLResult_InvalidParam If any input parameters are invalid
        /// MLResult_Ok On success
        /// MLResult_UnspecifiedFailure Indicates an unexpected failure
        /// MLCloudResult_InvalidHandle Indicates the provided query handle is not valid
        /// MLCloudResult_SystemError Indicates an issue with the cloud service, eg if the service is not available for any reason
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_purchase", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLPurchaseHistoryQueryGetPageResult(MlApi.MLHandle history_handle, ref MlPurchase.MLPurchaseHistoryResult out_page_result);

        /// <summary>
        /// Frees the memory being maintained by the handle created by MLPurchaseHistoryQueryCreate
        /// </summary>
        /// <param name="history_handle">This is a handle that was created by MLPurchaseHistoryQueryCreate</param>
        /// <returns>
        /// MLResult_Ok On success
        /// MLResult_UnspecifiedFailure Indicates an unexpected failure
        /// MLCloudResult_InvalidHandle Indicates the provided query handle is not valid
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_purchase", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLPurchaseHistoryQueryDestroy(MlApi.MLHandle history_handle);

        /// <summary>
        /// Returns an ASCII string for MLPurchaseResult and MLResultGlobal codes
        /// </summary>
        /// <param name="result_code">The input MLResult enum from MLPurchase functions</param>
        /// <returns>
        /// ASCII string containing readable version of result code
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_purchase", CallingConvention = CallingConvention.Cdecl)]
        [return: MarshalAs(UnmanagedType.LPStr)]
        public static extern string MLPurchaseGetResultString(MlApi.MLResult result_code);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlMediaPlayer
    {
        /// <summary>
        /// Codes for setting video scaling mode in internal
        ///  MediaPlayer
        /// </summary>
        public enum MLMediaPlayerVideoScalingMode : int
        {
            MLMediaPlayerVideoScalingMode_ScaleToFit = unchecked((int)1),

            MLMediaPlayerVideoScalingMode_ScaleToFitWithCropping = unchecked((int)2),

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLMediaPlayerVideoScalingMode_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// The state to be polled
        /// </summary>
        [Flags]
        public enum MLMediaPlayerPollingStateFlags : int
        {
            /// <summary>
            /// Playing
            /// </summary>
            MLMediaPlayerPollingStateFlag_IsPlaying = unchecked((int)1 << (int) 0),

            /// <summary>
            /// Looping
            /// </summary>
            MLMediaPlayerPollingStateFlag_IsLooping = unchecked((int)1 << (int) 1),

            /// <summary>
            /// Buffer available
            /// </summary>
            MLMediaPlayerPollingStateFlag_IsBufferAvailable = unchecked((int)1 << (int) 2),

            /// <summary>
            /// Prepared
            /// </summary>
            MLMediaPlayerPollingStateFlag_HasBeenPrepared = unchecked((int)1 << (int) 3),

            /// <summary>
            /// Playback completed
            /// </summary>
            MLMediaPlayerPollingStateFlag_HasPlaybackCompleted = unchecked((int)1 << (int) 4),

            /// <summary>
            /// Seek completed
            /// </summary>
            MLMediaPlayerPollingStateFlag_HasSeekCompleted = unchecked((int)1 << (int) 5),

            /// <summary>
            /// Size changed
            /// </summary>
            MLMediaPlayerPollingStateFlag_HasSizeChanged = unchecked((int)1 << (int) 6),

            /// <summary>
            /// Buffering updated
            /// </summary>
            MLMediaPlayerPollingStateFlag_HasBufferingUpdated = unchecked((int)1 << (int) 7),

            /// <summary>
            /// Received info
            /// </summary>
            MLMediaPlayerPollingStateFlag_HasReceivedInfo = unchecked((int)1 << (int) 8),

            /// <summary>
            /// Recieved error
            /// </summary>
            MLMediaPlayerPollingStateFlag_HasReceivedError = unchecked((int)1 << (int) 9),

            /// <summary>
            /// Timed text updated
            /// </summary>
            MLMediaPlayerPollingStateFlag_HasTimedTextUpdated = unchecked((int)1 << (int) 10),

            /// <summary>
            /// Subtitle updated
            /// </summary>
            MLMediaPlayerPollingStateFlag_HasSubtitleUpdated = unchecked((int)1 << (int) 11),

            /// <summary>
            /// Metadata updated
            /// </summary>
            MLMediaPlayerPollingStateFlag_HasMetadataUpdated = unchecked((int)1 << (int) 12),

            /// <summary>
            /// DRM info updated
            /// </summary>
            MLMediaPlayerPollingStateFlag_HasDrmInfoUpdated = unchecked((int)1 << (int) 13),
        }

        /// <summary>
        /// Info and warning codes for the media player framework These are non fatal,
        /// the playback is going on but there might be some user visible issues
        ///  MediaPlayerListener::onInfo method In this situation,
        ///  MediaPlayerInfo
        /// </summary>
        /// <remarks>
        /// Info and warning messages are communicated back to the client using the
        /// this method is invoked with the following:
        /// 'what'  should be a value from the
        /// 'extra' contains an implementation dependent info code to provide
        /// more details Should default to 0 when not used
        /// </remarks>
        public enum MLMediaPlayerInfo : int
        {
            /// <summary>
            /// Unknown
            /// </summary>
            MLMediaPlayerInfo_Unknown = unchecked((int)1),

            /// <summary>
            /// The player was started because it was used as the next player
            /// </summary>
            MLMediaPlayerInfo_StartedAsNext = unchecked((int)2),

            /// <summary>
            /// The player just pushed the very first video frame for rendering
            /// </summary>
            MLMediaPlayerInfo_RenderingStart = unchecked((int)3),

            /// <summary>
            /// The player just reached EOS and started from beginning (loop)
            /// </summary>
            MLMediaPlayerInfo_Looping = unchecked((int)4),

            /// <summary>
            /// The video is too complex for the decoder, it can't decode frames fast enough
            /// </summary>
            MLMediaPlayerInfo_VideoTrackLagging = unchecked((int)700),

            /// <summary>
            /// Media player is temporarily pausing playback
            /// </summary>
            MLMediaPlayerInfo_BufferingStart = unchecked((int)701),

            /// <summary>
            /// Media player is resuming playback after filling buffers
            /// </summary>
            MLMediaPlayerInfo_BufferingEnd = unchecked((int)702),

            /// <summary>
            /// Network bandwidth info
            /// </summary>
            MLMediaPlayerInfo_NetworkBandwidth = unchecked((int)703),

            /// <summary>
            /// Bad interleaving means that a media has been improperly interleaved
            /// </summary>
            MLMediaPlayerInfo_BadInterleaving = unchecked((int)800),

            /// <summary>
            /// The media is not seekable (eg live stream)
            /// </summary>
            MLMediaPlayerInfo_NotSeekable = unchecked((int)801),

            /// <summary>
            /// New media metadata is available
            /// </summary>
            MLMediaPlayerInfo_MetadataUpdate = unchecked((int)802),

            /// <summary>
            /// Media timed text error
            /// </summary>
            MLMediaPlayerInfo_TimedTextError = unchecked((int)900),

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLMediaPlayerInfo_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// MediaTrack types returned by MLMediaPlayerGetTrackType
        /// </summary>
        public enum MLMediaPlayerTrackType : int
        {
            /// <summary>
            /// Unknown
            /// </summary>
            MediaPlayerTrackType_Unknown = unchecked((int)0),

            /// <summary>
            /// Video
            /// </summary>
            MediaPlayerTrackType_Video = unchecked((int)1),

            /// <summary>
            /// Audio
            /// </summary>
            MediaPlayerTrackType_Audio = unchecked((int)2),

            /// <summary>
            /// Timed text
            /// </summary>
            MediaPlayerTrackType_TimedText = unchecked((int)3),

            /// <summary>
            /// Subtitle
            /// </summary>
            MediaPlayerTrackType_Subtitle = unchecked((int)4),

            /// <summary>
            /// Metadata
            /// </summary>
            MediaPlayerTrackType_Metadata = unchecked((int)5),

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MediaPlayerTrackType_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// MediaPlayer subtitle format
        /// </summary>
        /// <remarks>
        /// Deprecated since 0200 Scheduled for removal Please use ml_media_formath to get subtitle mime type
        /// </remarks>
        public enum MLMediaPlayerSubtitleFormat : int
        {
            /// <summary>
            /// CEA-608
            /// </summary>
            MLMediaPlayerSubtitleFormat_Cea608 = unchecked((int)0),

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLMediaPlayerSubtitleFormat_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Indicate the mode of buffering setttings
        /// </summary>
        public enum MLMediaPlayerBufferingMode : int
        {
            /// <summary>
            /// Do not support buffering
            /// </summary>
            MLMediaPlayerBufferingMode_None = unchecked((int)0),

            /// <summary>
            /// Support only time based buffering
            /// </summary>
            MLMediaPlayerBufferingMode_TimeOnly = unchecked((int)1),

            /// <summary>
            /// Support only size based buffering
            /// </summary>
            MLMediaPlayerBufferingMode_SizeOnly = unchecked((int)2),

            /// <summary>
            /// Support both time and size based buffering, time based calculation precedes
            /// size based Size based calculation will be used only when time information is not
            /// available for the stream
            /// </summary>
            MLMediaPlayerBufferingMode_TimeThenSize = unchecked((int)3),

            /// <summary>
            /// Number of modes
            /// </summary>
            MLMediaPlayerBufferingMode_Count = unchecked((int)4),

            /// <summary>
            /// Ensure enum size is 32 bits
            /// </summary>
            MLMediaPlayerBufferingMode_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// MediaPlayer DRM Info
        /// </summary>
        /// <remarks>
        /// Deprecated since 0170 Scheduled for removal Replaced by MLMediaPlayerTrackDRMInfo
        /// </remarks>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaPlayerDRMInfo
        {
            /// <summary>
            /// Number of PSSH entries
            /// </summary>
            public Interop.size_t pssh_info_count;

            /// <summary>
            /// Pointer to array of MLMediaPlayerPSSHEntry of size pssh_info_count
            /// </summary>
            public IntPtr pssh_info;

            /// <summary>
            /// Number of supported DRM UUID entries
            /// </summary>
            public Interop.size_t uuid_count;

            /// <summary>
            /// Pointer to array of MLUUID of size uuid_count
            /// </summary>
            public IntPtr UUIDs;
        }

        /// <summary>
        /// PSSH entry
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly struct MLMediaPlayerPSSHEntry : IEquatable<MLMediaPlayerPSSHEntry>
        {
            public MLMediaPlayerPSSHEntry(MlMediaTypes.MLPSSHEntry value) => this.Value = value;

            public readonly MlMediaTypes.MLPSSHEntry Value;

            public bool Equals(MLMediaPlayerPSSHEntry other) => Value.Equals(other.Value);

            public override bool Equals(object obj) => obj is MLMediaPlayerPSSHEntry other && Equals(other);

            public override int GetHashCode() => Value.GetHashCode();

            public override string ToString() => Value.ToString();

            public static implicit operator MlMediaTypes.MLPSSHEntry(MLMediaPlayerPSSHEntry from) => from.Value;

            public static implicit operator MLMediaPlayerPSSHEntry(MlMediaTypes.MLPSSHEntry from) => new MLMediaPlayerPSSHEntry(from);

            public static bool operator ==(MLMediaPlayerPSSHEntry left, MLMediaPlayerPSSHEntry right) => left.Equals(right);

            public static bool operator !=(MLMediaPlayerPSSHEntry left, MLMediaPlayerPSSHEntry right) => !left.Equals(right);
        }

        /// <summary>
        /// MediaPlayer DRM Info for a Media Track
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaPlayerTrackDRMInfo
        {
            /// <summary>
            /// Number of PSSH entries
            /// </summary>
            public Interop.size_t pssh_info_count;

            /// <summary>
            /// Pointer to array of MLMediaPlayerPSSHEntry of size pssh_info_count
            /// </summary>
            public IntPtr pssh_info;

            /// <summary>
            /// Number of supported DRM UUID entries
            /// </summary>
            public Interop.size_t uuid_count;

            /// <summary>
            /// Pointer to array of MLUUID of size uuid_count
            /// </summary>
            public IntPtr UUIDs;

            /// <summary>
            /// Media track type, can be either audio or video
            /// </summary>
            public MlMediaPlayer.MLMediaPlayerTrackType track_type;
        }

        /// <summary>
        /// MediaPlayer subtitle data
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaPlayerSubtitleData
        {
            /// <summary>
/// 
            /// </summary>
            /// <remarks>
            /// Deprecated since 0200 Scheduled for removal Please use ml_media_formath to get subtitle mime type
            /// </remarks>
            public MlMediaPlayer.MLMediaPlayerSubtitleFormat format;

            public uint track_index;

            public ulong start_time_us;

            public ulong duration_us;

            public uint data_size;

            public IntPtr data;
        }

        /// <summary>
        /// Indicate the buffering setttings
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaPlayerBufferingSettings
        {
            /// <summary>
            /// For prepare
            /// </summary>
            public MlMediaPlayer.MLMediaPlayerBufferingMode initial_buffering_mode;

            /// <summary>
            /// For playback
            /// </summary>
            public MlMediaPlayer.MLMediaPlayerBufferingMode rebuffering_mode;

            /// <summary>
            /// Time based
            /// </summary>
            public int initial_watermark_ms;

            /// <summary>
            /// Size based
            /// </summary>
            public int initial_watermark_kb;

            /// <summary>
            /// When cached data is below this mark, playback will be paused for buffering
            /// until data reaches |mRebufferingWatermarkHighMs| or end of stream
            /// </summary>
            public int rebuffering_watermark_low_ms;

            /// <summary>
            /// When cached data is above this mark, buffering will be paused
            /// </summary>
            public int rebuffering_watermark_high_ms;

            /// <summary>
            /// When cached data is below this mark, playback will be paused for buffering
            /// until data reaches |mRebufferingWatermarkHighKB| or end of stream
            /// </summary>
            public int rebuffering_watermark_low_kb;

            /// <summary>
            /// When cached data is above this mark, buffering will be paused
            /// </summary>
            public int rebuffering_watermark_high_kb;
        }

        /// <summary>
        /// Callbacks for notifying client about
        ///  MediaPlayer error events
        /// </summary>
        /// <remarks>
        /// Deprecated since 0170 Scheduled for removal Replaced by MLMediaPlayerEventCallbacksEx
        /// Those are async mechanisms that should not be used in parallel with their
        /// sync counterpart, ie poll-based queries for the same events using
        /// MLMediaPlayerPollStatespoll
        /// </remarks>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaPlayerEventCallbacks
        {
            public MlMediaPlayer.MLMediaPlayerEventCallbacks.on_buffering_update_delegate on_buffering_update;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_buffering_update_delegate(MlApi.MLHandle media_player, int percent, IntPtr data);

            public MlMediaPlayer.MLMediaPlayerEventCallbacks.on_completion_delegate on_completion;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_completion_delegate(MlApi.MLHandle media_player, IntPtr data);

            public MlMediaPlayer.MLMediaPlayerEventCallbacks.on_error_delegate on_error;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_error_delegate(MlApi.MLHandle media_player, MlApi.MLResult result, IntPtr data);

            public MlMediaPlayer.MLMediaPlayerEventCallbacks.on_info_delegate on_info;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_info_delegate(MlApi.MLHandle media_player, MlMediaPlayer.MLMediaPlayerInfo info, int extra, IntPtr data);

            public MlMediaPlayer.MLMediaPlayerEventCallbacks.on_prepared_delegate on_prepared;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_prepared_delegate(MlApi.MLHandle media_player, IntPtr data);

            public MlMediaPlayer.MLMediaPlayerEventCallbacks.on_seek_complete_delegate on_seek_complete;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_seek_complete_delegate(MlApi.MLHandle media_player, IntPtr data);

            public MlMediaPlayer.MLMediaPlayerEventCallbacks.on_video_size_changed_delegate on_video_size_changed;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_video_size_changed_delegate(MlApi.MLHandle media_player, int width, int height, IntPtr data);

            public MlMediaPlayer.MLMediaPlayerEventCallbacks.on_drm_info_delegate on_drm_info;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_drm_info_delegate(MlApi.MLHandle media_player, ref MlMediaPlayer.MLMediaPlayerDRMInfo data);
        }

        /// <summary>
        /// MediaPlayer Buffering update callback Info
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaPlayerOnBufferingUpdateInfo
        {
            /// <summary>
            /// The new percentage of buffered content
            /// </summary>
            public int percent;

            /// <summary>
            /// User data as passed to MLMediaPlayerSetEventCallbacksEx
            /// </summary>
            public IntPtr data;
        }

        /// <summary>
        /// MediaPlayer Playback completion callback Info
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaPlayerOnCompletionInfo
        {
            /// <summary>
            /// User data as passed to MLMediaPlayerSetEventCallbacksEx
            /// </summary>
            public IntPtr data;
        }

        /// <summary>
        /// MediaPlayer Error callback Info
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaPlayerOnErrorInfo
        {
            /// <summary>
            /// Error/result code indicating failure reason
            /// </summary>
            public MlApi.MLResult result;

            /// <summary>
            /// User data as passed to MLMediaPlayerSetEventCallbacksEx
            /// </summary>
            public IntPtr data;
        }

        /// <summary>
        /// MediaPlayer Information callback Info
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaPlayerOnInfoInfo
        {
            /// <summary>
            /// Type of informational event
            /// </summary>
            public MlMediaPlayer.MLMediaPlayerInfo info;

            /// <summary>
            /// MLMediaPlayerInfo type specific extra information
            /// When info is MLMediaPlayerInfo_NetworkBandwidth, this holds bandwidth
            /// in kbps It is 0 for others
            /// </summary>
            public int extra;

            /// <summary>
            /// User data as passed to MLMediaPlayerSetEventCallbacksEx
            /// </summary>
            public IntPtr data;
        }

        /// <summary>
        /// MediaPlayer Playback prepared callback Info
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaPlayerOnPreparedInfo
        {
            /// <summary>
            /// User data as passed to MLMediaPlayerSetEventCallbacksEx
            /// </summary>
            public IntPtr data;
        }

        /// <summary>
        /// MediaPlayer Playback seek completion callback Info
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaPlayerOnSeekCompleteInfo
        {
            /// <summary>
            /// User data as passed to MLMediaPlayerSetEventCallbacksEx
            /// </summary>
            public IntPtr data;
        }

        /// <summary>
        /// MediaPlayer Video Size Changed callback Info
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaPlayerOnVideoSizeChangedInfo
        {
            /// <summary>
            /// The new surface width
            /// </summary>
            public int width;

            /// <summary>
            /// The new surface height
            /// </summary>
            public int height;

            /// <summary>
            /// User data as passed to MLMediaPlayerSetEventCallbacksEx
            /// </summary>
            public IntPtr data;
        }

        /// <summary>
        /// MediaPlayer Track DRM Info callback Info
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaPlayerOnTrackDRMInfo
        {
            /// <summary>
            /// Pointer to MLMediaPlayerTrackDRMInfo
            /// </summary>
            public IntPtr track_info;

            /// <summary>
            /// User data as passed to MLMediaPlayerSetEventCallbacksEx
            /// </summary>
            public IntPtr data;
        }

        /// <summary>
        /// Callbacks for notifying client about
        ///  MediaPlayer error events
        /// </summary>
        /// <remarks>
        /// Those are async mechanisms that should not be used in parallel with their
        /// sync counterpart, ie poll-based queries for the same events using
        /// MLMediaPlayerPollStatespoll
        /// @apilevel 2
        /// </remarks>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaPlayerEventCallbacksEx
        {
            public uint version;

            public MlMediaPlayer.MLMediaPlayerEventCallbacksEx.on_buffering_update_delegate on_buffering_update;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_buffering_update_delegate(MlApi.MLHandle media_player, in MlMediaPlayer.MLMediaPlayerOnBufferingUpdateInfo update_info);

            public MlMediaPlayer.MLMediaPlayerEventCallbacksEx.on_completion_delegate on_completion;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_completion_delegate(MlApi.MLHandle media_player, in MlMediaPlayer.MLMediaPlayerOnCompletionInfo completion_info);

            public MlMediaPlayer.MLMediaPlayerEventCallbacksEx.on_error_delegate on_error;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_error_delegate(MlApi.MLHandle media_player, in MlMediaPlayer.MLMediaPlayerOnErrorInfo error_info);

            public MlMediaPlayer.MLMediaPlayerEventCallbacksEx.on_info_delegate on_info;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_info_delegate(MlApi.MLHandle media_player, in MlMediaPlayer.MLMediaPlayerOnInfoInfo info);

            public MlMediaPlayer.MLMediaPlayerEventCallbacksEx.on_prepared_delegate on_prepared;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_prepared_delegate(MlApi.MLHandle media_player, in MlMediaPlayer.MLMediaPlayerOnPreparedInfo prepared_info);

            public MlMediaPlayer.MLMediaPlayerEventCallbacksEx.on_seek_complete_delegate on_seek_complete;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_seek_complete_delegate(MlApi.MLHandle media_player, in MlMediaPlayer.MLMediaPlayerOnSeekCompleteInfo seek_complete_info);

            public MlMediaPlayer.MLMediaPlayerEventCallbacksEx.on_video_size_changed_delegate on_video_size_changed;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_video_size_changed_delegate(MlApi.MLHandle media_player, in MlMediaPlayer.MLMediaPlayerOnVideoSizeChangedInfo video_size_info);

            public MlMediaPlayer.MLMediaPlayerEventCallbacksEx.on_track_drm_info_delegate on_track_drm_info;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_track_drm_info_delegate(MlApi.MLHandle media_player, in MlMediaPlayer.MLMediaPlayerOnTrackDRMInfo track_drm_info);
        }

        /// <summary>
        /// MediaPlayer Track Information
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaPlayerTrackInfo
        {
            public uint version;

            /// <summary>
            /// Media track type, can be either audio or video
            /// </summary>
            public MlMediaPlayer.MLMediaPlayerTrackType track_type;
        }

        /// <summary>
        /// DRM Session information for a MediaPlayer Track
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaPlayerTrackDRMSessionInfo
        {
            public uint version;

            /// <summary>
            /// Media track type, can be either audio or video
            /// </summary>
            public MlMediaPlayer.MLMediaPlayerTrackType track_type;

            /// <summary>
            /// UUID of the DRM Scheme of type MLUUID
            /// </summary>
            public IntPtr uuid;

            /// <summary>
            /// DRM Session ID of type MLMediaDRMByteArray
            /// </summary>
            public IntPtr session_id;
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void MLMediaPlayerOnFrameAvailableCallback(MlApi.MLHandle media_player, IntPtr data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void MLMediaPlayerOnMediaSubtitleUpdateCallback(MlApi.MLHandle media_player, MlMediaPlayer.MLMediaPlayerSubtitleData subtitle_data, IntPtr data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void MLMediaPlayerOnMediaTimedTextUpdateCallback(MlApi.MLHandle media_player, MlApi.MLHandle timed_text, IntPtr data);

        /// <summary>
        /// Create a new
        ///  MediaPlayer object
        ///  MediaPlayer object created Only valid if result is MLResult_Ok
        /// </summary>
        /// <param name="out_handle">The MLHandle to the new</param>
        /// <returns>
        /// MLResult_InvalidParam Passed out_handle was NULL
        /// MLResult_Ok MediaPlayer was created successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit Could not initialize internal MediaPlayer
        /// </returns>
        /// <remarks>
        /// This is a blocking sync method As creating a MediaPlayer object might take some time,
        /// make sure to *not* call this API from your main UI thread
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerCreate(ref MlApi.MLHandle out_handle);

        /// <summary>
        /// Destroy a MediaPlayer object
        ///  MediaPlayer object to destroy
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_Ok MediaPlayer was destroyed successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// This is a blocking sync method As destroying a MediaPlayer object might take some time,
        /// make sure to *not* call this API from your main UI thread
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerDestroy(MlApi.MLHandle media_player);

        /// <summary>
        /// Set a file descriptor as the data source
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="fd">The file descriptor for the file you want to play</param>
        /// <returns>
        /// MLResult_InvalidParam Passed fd does no refer to a valid,open file descriptor or 'media_player' was NULL
        /// MLResult_Ok Data source was correctly set to passed file descriptor
        /// MLResult_PrivilegeDenied Failed as necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_InvalidOperation Method was called in the wrong state
        /// SetDataSource must be called immediately after creation, or after a media player reset
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// The file descriptor must be seekable It is the caller's responsibility to
        /// close the file descriptor It is safe to do so as soon as this call returns
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerSetDataSourceForFD(MlApi.MLHandle media_player, int fd);

        /// <summary>
        /// Set a file descriptor as the data source with offset
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="fd">The file descriptor for the file you want to play</param>
        /// <param name="offset">The offset (in bytes) of the source's start</param>
        /// <param name="length">The number of bytes of media to load after offset</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_Ok Data source was correctly set to passed file descriptor
        /// MLResult_PrivilegeDenied Failed as necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_InvalidOperation Method was called in the wrong state
        /// SetDataSource must be called immediately after creation, or after a media player reset
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// The file descriptor must be seekable It is the caller's responsibility to
        /// close the file descriptor It is safe to do so as soon as this call returns
        /// This API is useful for specifying playable media located in resource files
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerSetOffsetDataSourceForFD(MlApi.MLHandle media_player, int fd, long offset, long length);

        /// <summary>
        /// Set a local file path as the data source
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="path">The linux-style path of the file</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_Ok Data source was correctly set to passed local file path
        /// MLResult_PrivilegeDenied Failed as necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_InvalidOperation Method was called in the wrong state
        /// SetDataSource must be called immediately after creation, or after a media player reset
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// The path should be an absolute path and should reference a world-readable
        /// file
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerSetDataSourceForPath(MlApi.MLHandle media_player, [MarshalAs(UnmanagedType.LPStr)] string path);

        /// <summary>
        /// Set a URI string as the data source
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="uri">The C-style string representing the URI complete string</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_Ok Data source was correctly set to passed URI
        /// MLResult_PrivilegeDenied Failed as necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_InvalidOperation Method was called in the wrong state
        /// SetDataSource must be called immediately after creation, or after a media player reset
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// Supported URI schemes are `file`, `http`, `https`, and `rtsp` If looking to
        /// provide headers, use MLMediaPlayerSetRemoteDataSourceForURI
        /// @priv Internet
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerSetDataSourceForURI(MlApi.MLHandle media_player, [MarshalAs(UnmanagedType.LPStr)] string uri);

        /// <summary>
        /// Set a URI string as the remote data source
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="uri">The C-style string representing the complete URL</param>
        /// <param name="headers">Array of char * headers to be sent</param>
        /// <param name="len">Number of headers passed</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_Ok Data source was correctly set to passed URI
        /// MLResult_PrivilegeDenied Failed as necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_InvalidOperation Method was called in the wrong state
        /// SetDataSource must be called immediately after creation, or after a media player reset
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// Supported URI schemes are `file`, `http`, `https`, and `rtsp`
        /// @priv Internet
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerSetRemoteDataSourceForURI(MlApi.MLHandle media_player, [MarshalAs(UnmanagedType.LPStr)] string uri, out IntPtr headers, Interop.size_t len);

        /// <summary>
        /// Set the data source to use
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="media_data_source">MLHandle returned by MLMediaDataSourceCreate</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_Ok Data source was correctly set
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_InvalidOperation Method was called in the wrong state
        /// SetDataSource must be called immediately after creation, or after a media player reset
        /// MLMediaGenericResult_NameNotFound No valid source could be found for the passed media_data_source handle
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerSetMediaDataSource(MlApi.MLHandle media_player, MlApi.MLHandle media_data_source);

        /// <summary>
        /// Set the data source to use
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="media_stream_source">MLHandle returned by MLMediaStreamSourceCreate</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_Ok Data source was correctly set
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_InvalidOperation Method was called in the wrong state
        /// SetDataSource must be called immediately after creation, or after a media player reset
        /// MLMediaGenericResult_NameNotFound No valid source could be found for the passed media_stream_source handle
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerSetMediaStreamSource(MlApi.MLHandle media_player, MlApi.MLHandle media_stream_source);

        /// <summary>
        /// Add a timedtext source from a URI
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="uri">The C-style string representing the complete URI</param>
        /// <param name="mimeType">The MIME type of the file</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters was NULL or invalid
        /// MLResult_Ok TimedTextSource was correctly added from passed URI
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerAddTimedTextSourceForURI(MlApi.MLHandle media_player, [MarshalAs(UnmanagedType.LPStr)] string uri, [MarshalAs(UnmanagedType.LPStr)] string mimeType);

        /// <summary>
        /// Add a timedtext source from a file descriptor
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="fd">The file descriptor for the timed text source</param>
        /// <param name="offset">The offset (in bytes) of the source's start Must be &gt;= 0</param>
        /// <param name="length">The number of bytes of media to load after offset Must be &gt;= 0;</param>
        /// <param name="mimeType">The MIME type of the file</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle or 'fd' was invalid, mimetype is NULL
        /// or other params are outside the valid range
        /// MLResult_Ok TimedTextSource was correctly added from passed file descriptor
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// The file descriptor must be seekable It is the caller's responsibility to
        /// close the file descriptor It is safe to do so as soon as this call returns
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerAddTimedTextSourceForFD(MlApi.MLHandle media_player, int fd, long offset, long length, [MarshalAs(UnmanagedType.LPStr)] string mimeType);

        /// <summary>
        /// Set the 'next'
        ///  MediaPlayer to automatically 'start'
        ///  MediaPlayer playback completes
        ///  MediaPlayer instance
        ///  MediaPlayer instance
        ///  MediaPlayer was correctly registered
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="next_media_player">MLHandle of an already created</param>
        /// <returns>
        /// MLResult_InvalidParam One of the MLHandle was invalid or could not be found
        /// MLResult_Ok Next
        /// </returns>
        /// <returns>
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_InvalidOperation Method was called in the wrong state
        /// Can be called only from the 'prepared', 'paused' or 'playback-complete' states
        /// MLMediaGenericResult_NameNotFound No valid MediaPlayer could be found for the passed next_media_player handle
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// when current
        /// To 'remove' the next player, set next_media_player = 0
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerSetNextPlayer(MlApi.MLHandle media_player, MlApi.MLHandle next_media_player);

        /// <summary>
        /// Count the number of tracks found in the data source
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="out_track_count">The number of tracks found in the player source</param>
        /// <returns>
        /// MLResult_InvalidParam c media_player handle was invalid or not found or out_track_count was set to NULL
        /// MLResult_Ok Number of tracks was returned
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_InvalidOperation Method was called from the wrong state
        /// Can only be called after one of the setDataSource methods
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerGetTrackCount(MlApi.MLHandle media_player, ref uint out_track_count);

        /// <summary>
        /// Get the type of a track
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="track">The track number for which type is to be returned Has to be 
        /// &lt;
        /// TrackCount</param>
        /// <param name="out_track_type">The returned type for specified track number</param>
        /// <returns>
        /// MLResult_InvalidParam c media_player was invalid, track did not refer to a valid track number,
        /// was out of range or out_track_type was NULL
        /// MLResult_Ok Type for passed track was returned
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_InvalidOperation Method was called from the wrong state
        /// Can only be called after one of the setDataSource methods
        /// MLMediaGenericResult_NameNotFound Found track's type was unknown
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerGetTrackType(MlApi.MLHandle media_player, uint track, ref MlMediaPlayer.MLMediaPlayerTrackType out_track_type);

        /// <summary>
        /// Get the language of a track
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="track">The track number for which language is to be returned Has to be 
        /// &lt;
        /// TrackCount</param>
        /// <param name="out_track_language">The returned language of the track Caller has ownership of that param
        /// and has to free it when no longer needed</param>
        /// <returns>
        /// MLResult_InvalidParam c media_player was invalid, track did not refer to a valid track number,
        /// was out of range or out_track_language was NULL
        /// MLResult_Ok Language for passed track was returned
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_InvalidOperation Method was called from the wrong state
        /// Can only be called after one of the setDataSource methods
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerGetTrackLanguage(MlApi.MLHandle media_player, uint track, out IntPtr out_track_language);

        /// <summary>
        /// Get the Media Format of a track
        /// @apilevel 2
        ///  MediaPlayer instance
        ///  MediaFormat of the track
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="track">The track number for which Media Format is to be returned Has to be 
        /// &lt;
        /// TrackCount</param>
        /// <param name="out_media_format">MLHandle to</param>
        /// <returns>
        /// MLResult_InvalidParam c media_player was invalid, track did not refer to a valid track number,
        /// was out of range or out_media_format was NULL
        /// MLResult_Ok if operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_InvalidOperation Method was called from the wrong state
        /// Can only be called after one of the setDataSource methods
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// Caller has ownership of this handle and should call MLMediaFormatDestroy to free it when no longer needed
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerGetTrackMediaFormat(MlApi.MLHandle media_player, uint track, ref MlApi.MLHandle out_media_format);

        /// <summary>
        /// Select a track
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="track">Number of the track to select Has to be 
        /// &lt;
        /// TrackCount</param>
        /// <returns>
        /// MLResult_InvalidParam c media_player was invalid, track did not refer to a valid track number,
        /// was out of range or out_track_language was NULL
        /// MLResult_Ok Track was correctly selected
        /// MLResult_UnspecifiedFailure Method failed internally
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_InvalidOperation Method was called from the wrong state
        /// Can only be called after one of the setDataSource methods
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerSelectTrack(MlApi.MLHandle media_player, uint track);

        /// <summary>
        /// Unselect a track
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="track">Number of the track to unselect Has to be 
        /// &lt;
        /// TrackCount</param>
        /// <returns>
        /// MLResult_InvalidParam c media_player was invalid, track did not refer to a valid track number
        /// MLResult_Ok Track was correctly unselected
        /// MLResult_UnspecifiedFailure Method failed internally
        /// MLMediaGenericResult_InvalidOperation Method was called from the wrong state
        /// Can only be called after one of the setDataSource methods
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerUnselectTrack(MlApi.MLHandle media_player, uint track);

        /// <summary>
        /// Prepare the player for playback, synchronously
        ///  MediaPlayer is ready for playback
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_Ok Player was prepared successfully
        /// MLResult_UnspecifiedFailure Unknown internal error prevented MediaPlayer from preparing
        /// MLMediaGenericResult_InvalidOperation Method was called from the wrong state
        /// Can only be called after one of the setDataSource methods or in the 'stopped' state
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// MLMediaResult_CannotConnect MediaPlayer failed to connect with the given URL
        /// </returns>
        /// <remarks>
        /// After setting the data source and the GraphicBufferProducer, you need to
        /// either call prepare or prepareAsync For files, it is OK to call
        /// prepare, which blocks until
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerPrepare(MlApi.MLHandle media_player);

        /// <summary>
        /// Prepare the player for playback, asynchronously
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_Ok MediaPlayer started preparing in an async fashion
        /// For result, poll for MLMediaPlayerPollingStateFlag_HasBeenPrepared state
        /// or wait for 'on_prepared' callback if already set
        /// MLResult_UnspecifiedFailure Unknown internal error prevented MediaPlayer from preparing
        /// MLMediaGenericResult_InvalidOperation Method was called from the wrong state
        /// Can only be called after one of the setDataSource methods or in the 'stopped' state
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// After setting the data's source and the GraphicBufferProducer, you need to
        /// either call prepare or prepareAsync For streams, you should call
        /// prepareAsync, which returns immediately, rather than blocking until
        /// enough data has been buffered Prepared state will then be obtained via the
        /// 'on_prepared' callback if already registered (see MLMediaPlayerSetEventCallbacksEx),
        /// or polled for via the MLMediaPlayerPollStates call with the
        /// MLMediaPlayerPollingStateFlag_HasBeenPrepared flag set
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerPrepareAsync(MlApi.MLHandle media_player);

        /// <summary>
        /// Start or resumes playback
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_Ok Playback was successfully started or resumed
        /// MLResult_UnspecifiedFailure Internal error prevented MediaPlayer from starting
        /// MLMediaGenericResult_InvalidOperation Method was called from the wrong state
        /// Can only be called in one of the following states : 'prepared', 'playback complete', 'paused', 'stopped'
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// If playback had previously been paused, playback will continue from where
        /// it was paused If playback had been stopped, or never started before,
        /// playback will start at the beginning
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerStart(MlApi.MLHandle media_player);

        /// <summary>
        /// Stop playback after playback has been stopped or paused
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_Ok Playback got successfully stopped
        /// MLResult_UnspecifiedFailure Internal error prevented MediaPlayer from stopping
        /// MLMediaGenericResult_InvalidOperation Method was called from the wrong state
        /// Can only be called in one of the following states : 'playing', 'paused', 'stopped', 'prepared', 'playback complete'
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerStop(MlApi.MLHandle media_player);

        /// <summary>
        /// Pause playback
        ///  MediaPlayer is in state MEDIA_PLAYER_PAUSED
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_Ok Playback got successfully paused
        /// MLResult_UnspecifiedFailure Internal error prevented MediaPlayer from pausing
        /// MLMediaGenericResult_InvalidOperation Method was called from the wrong state
        /// Can only be called in one of the following states : 'playing', 'paused', 'playback complete'
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// Calling pause is a NOOP if
        /// or MEDIA_PLAYER_PLAYBACK_COMPLETE
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerPause(MlApi.MLHandle media_player);

        /// <summary>
        /// Reset the
        ///  MediaPlayer to its uninitialized state
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_Ok MediaPlayer was reset successfully
        /// MLResult_UnspecifiedFailure Internal error prevented MediaPlayer from resetting
        /// MLMediaGenericResult_InvalidOperation Method was called from the wrong state
        /// This method can be called anytime except when in 'preparing async'
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// After calling this method, you will have to initialize it again by setting the
        /// data source and calling prepare
        /// This is a blocking sync method, make sure to *not* call this API
        /// from your main UI thread
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerReset(MlApi.MLHandle media_player);

        /// <summary>
        /// Seek to specified time position
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="msec">The offset in milliseconds from the start, to seek to</param>
        /// <param name="mode">Seek mode defined by MLMediaSeekMode</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_Ok Seek operation was successfully launched in an async fashion
        /// For result, poll for MLMediaPlayerPollingStateFlag_HasSeekCompleted state or
        /// wait for the 'on_seek_complete' callback if already set
        /// MLResult_UnspecifiedFailure Internal error prevented MediaPlayer from seeking
        /// MLMediaGenericResult_InvalidOperation Method was called from the wrong state
        /// This method can only be called from the following states :
        /// 'started', 'prepared', 'paused' and 'playback complete'
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// Note that SeekTo is an async function and returns immediately
        /// Successful seek result has to be obtained either via the 'on_seek_complete' if
        /// already registered (see MLMediaPlayerSetEventCallbacksEx) or by polling for the flag
        /// 'MLMediaPlayerPollingStateFlag_HasSeekCompleted' when calling MLMediaPlayerPollStates
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerSeekTo(MlApi.MLHandle media_player, int msec, MlMediaCommon.MLMediaSeekMode mode);

        /// <summary>
        /// Set callback to get notified when a decoded frame is available
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="on_buffer_available">Function pointer to be called
        /// This can be 'NULL' to unset the callback See MLMediaPlayerOnFrameAvailable
        /// Callback typedef declaration and comments for explanation on expected callback parameters</param>
        /// <param name="data">Custom data to be returned when callback is fired</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_Ok Callback was successfully set
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// When MLMediaPlayerOnFrameAvailableCallback function gets called-back because
        /// there is a buffer available for consumption, one should immediately call
        /// MLMediaPlayerAcquireNextAvailableBuffer to get the buffer and
        /// render from it
        /// Setting this callback does not prevent caller from using the the poll-based
        /// buffer interrogation API (MLMediaPlayerPollStates with the
        /// MLMediaPlayerPollingState_IsBufferAvailable flag)
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerSetOnBufferAvailableCallback(MlApi.MLHandle media_player, MlMediaPlayer.MLMediaPlayerOnFrameAvailableCallback on_buffer_available, IntPtr data);

        /// <summary>
        /// Consume next available buffer
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="out_native_buffer">The handle to the acquired native buffer
        /// When buffer is not required anymore, caller must call
        /// MLMediaPlayerReleaseBuffer with this nativeBuffer handle to free up
        /// queuing space for upcoming buffers</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found or out_native_buffer was NULL
        /// MLResult_Ok A valid buffer handle was returned
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// MLMediaGenericResult_NotEnoughData No buffer available internally
        /// Make sure you call this function after MLMediaPlayerPollStates with
        /// MLMediaPlayerPollingState_IsBufferAvailable mask returned true, or when
        /// registered callback MLMediaPlayerOnFrameAvailableCallback just fired
        /// </returns>
        /// <remarks>
        /// Note: This function is non-blocking and should only be called after
        /// MLMediaPlayerPollStates with MLMediaPlayerPollingState_IsBufferAvailable
        /// mask returned true, or when registered callback MLMediaPlayerOnFrameAvailableCallback
        /// just fired
        /// Note: The returned buffer's color format is multi-planar YUV420 Since our
        /// underlying hardware interops do not support multiplanar formats, advanced
        /// texture features like mipmaping, anisotropic filtering and MSAA will *not*
        /// work on those returned buffers If such advanced texturing features are
        /// required, one has to acquire the YUV buffers as usual and *render* to an
        /// RGB texture and only then, will one be able to enable hardware optimization
        /// for such advanced texture features
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerAcquireNextAvailableBuffer(MlApi.MLHandle media_player, ref ulong out_native_buffer);

        /// <summary>
        /// Release a native buffer previously acquired
        /// </summary>
        /// <param name="media_player">MLHandle to the MediaPlayer instance</param>
        /// <param name="native_buffer">The android native buffer to release</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_Ok The specified native buffer was successfully released
        /// MLResult_UnspecifiedFailure Internal error prevented MediaPlayer from releasing the buffer
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NameNotFound native_buffer handle was wrong, or already released
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerReleaseBuffer(MlApi.MLHandle media_player, ulong native_buffer);

        /// <summary>
        /// Retrieves the 4x4 texture coordinate transform matrix associated with
        /// the last acquired Frame
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="out_mtx">A pointer to an array of 16 floats that will receive retrieved
        /// transformation matrix</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_Ok The matrix was returned
        /// </returns>
        /// <remarks>
        /// This transform matrix maps 2D homogeneous texture coordinates of the form
        /// (s, t, 0, 1) with s and t in the inclusive range [0, 1] to the texture
        /// coordinate that should be used to sample that location from the texture
        /// Sampling the texture outside of the range of this transform is undefined
        /// This transform is necessary to compensate for transforms that the stream
        /// content producer may implicitly apply to the content By forcing users of
        /// a GLConsumer to apply this transform we avoid performing an extra
        /// copy of the data that would be needed to hide the transform from the
        /// user
        /// The matrix is stored in column-major order so that it may be passed
        /// directly to OpenGL ES via the glLoadMatrixf or glUniformMatrix4fv
        /// functions
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerGetFrameTransformationMatrix(MlApi.MLHandle media_player, [MarshalAs(UnmanagedType.LPArray, SizeConst = 16)] float[] out_mtx);

        /// <summary>
        /// Retrieves the timestamp associated with the last acquired Frame
        /// The timestamp is in nanoseconds, and is monotonically increasing Its
        /// other semantics (zero point, etc) are codec-dependent and should be
        /// documented by the codec vendor
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="out_timestamp">A pointer to user variable for storing retrieved timestamp</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_Ok The timestamp was returned
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerGetFrameTimestamp(MlApi.MLHandle media_player, ref long out_timestamp);

        /// <summary>
        /// Retrieves the QueueBuffer timestamp associated with the last acquired Frame
        /// This timestamp is for profiling purposes only and corresponds to the time when this
        /// frame was queued by internal Codec's producer code The timestamp is in nanoseconds,
        /// and is monotonically increasing Its other semantics (zero point, etc) are codec-
        /// dependent and should by documented by the codec vendor
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="out_timestamp">A pointer to user variable for storing retrieved timestamp</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_Ok The timestamp was returned
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerGetFrameQueueBufferTimestamp(MlApi.MLHandle media_player, ref long out_timestamp);

        /// <summary>
        /// Retrieves the last acquired frame number
        /// The frame number is an incrementing counter set to 0 at Codec configuration time
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="out_number">A pointer to user variable for storing retrieved frame number</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_Ok The frame number was returned
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerGetFrameNumber(MlApi.MLHandle media_player, ref ulong out_number);

        /// <summary>
        /// Set callbacks to notify clients about player events
        ///  MediaCodec
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="callbacks">Set of event callbacks Can be set to NULL to unset the callbacks altogether</param>
        /// <param name="data">Custom data to be returned when any callback is fired</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_Ok The specified callbacks were successfully set/unset
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// Deprecated since 0170 Scheduled for removal Replaced by MLMediaPlayerSetEventCallbacksEx
        /// Client needs to implement the callback functions declared in
        /// MLMediaPlayerEventCallbacks, but can set to NULL the ones he does not
        /// care about
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerSetEventCallbacks(MlApi.MLHandle media_player, ref MlMediaPlayer.MLMediaPlayerEventCallbacks callbacks, IntPtr data);

        /// <summary>
        /// Set callbacks to notify clients about player events
        ///  MediaCodec
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="callbacks">Set of event callbacks Can be set to NULL to unset
        /// the callbacks altogether</param>
        /// <param name="data">Custom data to be returned when any callback is fired</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_Ok The specified callbacks were successfully set/unset
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// Client needs to implement the callback functions declared in
        /// MLMediaPlayerEventCallbacksEx, but can set to NULL the ones he does not care about
        /// @apilevel 2
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerSetEventCallbacksEx(MlApi.MLHandle media_player, in MlMediaPlayer.MLMediaPlayerEventCallbacksEx callbacks, IntPtr data);

        /// <summary>
        /// Return the size of the video frame
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="out_width">The returned video width</param>
        /// <param name="out_height">The returned video height</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters was NULL or invalid
        /// MLResult_Ok Video size was returned
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerGetVideoSize(MlApi.MLHandle media_player, ref int out_width, ref int out_height);

        /// <summary>
        /// Return current position of playback
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="out_msec">The returned position in milliseconds</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found or 'out_msec' was set to NULL by caller
        /// MLResult_Ok Current position was successfully returned
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerGetCurrentPosition(MlApi.MLHandle media_player, ref int out_msec);

        /// <summary>
        /// Return media duration
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="out_msec">The returned duration in milliseconds</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found or 'out_msec' was set to NULL by caller
        /// MLResult_Ok Duration was successfully returned
        /// MLResult_UnspecifiedFailure Internal error prevented MediaPlayer from fetching a valid media duration
        /// MLMediaGenericResult_InvalidOperation Method was called from the wrong state
        /// This method can only be called from the following states :
        /// 'prepared', 'started', 'paused', 'stopped' and 'playback complete'
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerGetDuration(MlApi.MLHandle media_player, ref int out_msec);

        /// <summary>
        /// Return current buffering percentage
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="out_percentage">The returned buffering percentage in the range [0, 100]</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found or 'out_percentage' was set to NULL by caller
        /// MLResult_Ok Current buffering percentage was successfully returned
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerGetBufferingUpdate(MlApi.MLHandle media_player, ref int out_percentage);

        /// <summary>
        /// Return last info received by internal
        ///  MediaPlayer
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="out_code">The main info code</param>
        /// <param name="out_extra">The secondary code/data</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters was NULL or invalid
        /// MLResult_Ok Last MediaPlayer info was successfully returned
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerGetInfo(MlApi.MLHandle media_player, ref int out_code, ref int out_extra);

        /// <summary>
        /// Return last error received by internal
        ///  MediaPlayer
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="out_result">The result code</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters was NULL or invalid
        /// MLResult_Ok Last MediaPlayer error was successfully returned
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerGetError(MlApi.MLHandle media_player, ref MlApi.MLResult out_result);

        /// <summary>
        /// Return last timed text event information
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="out_text">The text of the timed text event</param>
        /// <param name="out_start">The start time</param>
        /// <param name="out_end">The end time</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters was NULL or invalid
        /// MLResult_Ok Last timedtext entry was successfully returned
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerGetTimedText(MlApi.MLHandle media_player, out string out_text, ref int out_start, ref int out_end);

        /// <summary>
        /// Return last subtitle event information
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="out_track">The return Track for the subtitle event</param>
        /// <param name="out_time">The returned start time for that track</param>
        /// <param name="out_duration">The returned duration of the event</param>
        /// <param name="out_buffer">The returned event buffer This buffer
        /// is only valid until the next metadata event arrives, so make a copy if you
        /// need to use the buffer later</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters was NULL or invalid
        /// MLResult_Ok Last subtitle entry was successfully returned
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// Deprecated Replaced by MLMediaPlayerGetSubtitleEx
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerGetSubtitle(MlApi.MLHandle media_player, ref int out_track, ref long out_time, ref long out_duration, out IntPtr out_buffer);

        /// <summary>
        /// Return last subtitle event information
        /// @apilevel 2
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="out_subtitle_data">The returned MLMediaPlayerGetSubtitleExArgs pointer</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters was NULL or invalid
        /// MLResult_Ok Last subtitle entry was successfully returned
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerGetSubtitleEx(MlApi.MLHandle media_player, out IntPtr out_subtitle_data);

        /// <summary>
        /// Release last subtitle event information
        /// @apilevel 2
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters was NULL or invalid
        /// MLResult_Ok Last subtitle entry was successfully released
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerReleaseSubtitleEx(MlApi.MLHandle media_player);

        /// <summary>
        /// EXPERIMENTAL
        /// Set callback to get notified when a subtitle update is available along with its data
        /// @apilevel 4
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="on_media_subtitle_callback">function pointer to be called
        /// This can be 'NULL' to unset the callback
        /// See MLMediaPlayerOnMediaSubtitleUpdateCallback callback typedef declaration and comments
        /// for explanation on expected callback parameters</param>
        /// <param name="data">Custom data to be returned when callback is fired</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_Ok Callback was successfully set
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// Setting this callback disables use of the poll-based API to query for the
        /// MLMediaPlayerPollingStateFlag_HasSubtitleUpdated flag
        /// MLMediaPlayerPollStates will ignore checks for this bit
        /// This also makes MLMediaPlayerGetSubtitleEx redundant as the subtitle data is provided with the callback
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerSetOnMediaSubtitleUpdateCallback(MlApi.MLHandle media_player, MlMediaPlayer.MLMediaPlayerOnMediaSubtitleUpdateCallback on_media_subtitle_callback, IntPtr data);

        /// <summary>
        /// Return last metadata event information
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="out_time">The returned event time</param>
        /// <param name="out_size">The returned event buffer size</param>
        /// <param name="out_buffer">The returned event buffer
        /// This buffer is only valid until the next metadata event arrives,
        /// so make a copy if you need to use the buffer later</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters was NULL or invalid
        /// MLResult_Ok Last metadata entry was successfully returned
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerGetMetadata(MlApi.MLHandle media_player, ref long out_time, ref int out_size, out IntPtr out_buffer);

        /// <summary>
        /// Set video scaling mode
        /// </summary>
        /// <param name="media_player">MLHandle to the MediaPlayer instance</param>
        /// <param name="mode">The video scaling mode to set
        /// For a list of valid values, see media_video_scaling_mode_type declaration</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_Ok Current video scaling mode was successfully returned
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_InvalidOperation Method was called from the wrong state
        /// Can only be called after one of the setDataSource methods
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerSetVideoScalingMode(MlApi.MLHandle media_player, MlMediaPlayer.MLMediaPlayerVideoScalingMode mode);

        /// <summary>
        /// Set the looping mode of the player
        ///  MediaPlayer instance
        ///  MediaPlayer when EOS reached
        ///  MediaPlayer should simply stop playback at end of media
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="loop">The looping mode
        /// true if player should loop to beginning of</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_Ok Current looping mode was successfully returned
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// false if
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerSetLooping(MlApi.MLHandle media_player, [MarshalAs(UnmanagedType.U1)] bool loop);

        /// <summary>
        /// Set the volume on this player
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="volume">The new volume in the [00, 10] range</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_Ok Volume was successfully set
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerSetVolume(MlApi.MLHandle media_player, float volume);

        /// <summary>
        /// Get the handle of the audio stream
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="out_handle">The MLHandle to the returned Audio handle Only valid if result is MLResult_Ok</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found or 'out_handle' parameter was set to NULL by caller
        /// MLResult_Ok Current audio stream handle was successfully returned
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerGetAudioHandle(MlApi.MLHandle media_player, ref MlApi.MLHandle out_handle);

        /// <summary>
        /// Poll the desired states from internal
        ///  MediaPlayer
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="mask">Selection mask for picking which states to retrieve</param>
        /// <param name="out_polled_states">Bitwise OR'ed integer of all the chosen states from bitwise 'mask'
        /// and in the range [0 = false : 1 = true]</param>
        /// <returns>
        /// MLResult_InvalidParam Passed c media_player handle was not found or 'out_polled_states' parameter was set to NULL by caller
        /// MLResult_Ok Selected states were successfully polled and returned
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// Desired states have to be selected by passing a bitwise OR'ed mask of
        /// MLMediaPlayerPollingStateFlags flags
        /// The "is_XXX"  states can be polled multiples times and the return value will
        /// be the same if internal state hasn't changed since last call
        /// When polling the "has_XXX" states however, internal state is set to false,
        /// since they mean : has 
        /// &lt;state
        /// &gt; happened/changed since I last polled 
        /// &lt;state
        /// &gt;
        /// Two-step state polling : The following states, when returning '1', indicate
        /// there is some data ready to be retrieved, by calling
        /// a getter function, as explained below :
        /// For 'MLMediaPlayerPollingState_IsBufferAvailable',
        /// call MLMediaPlayerAcquireNextAvailableBuffer to get new buffer handle
        /// For 'MLMediaPlayerPollingState_HasSizeChanged',
        /// call MLMediaPlayerGetVideoSize to get the new size
        /// For 'MLMediaPlayerPollingState_HasBufferingUpdated',
        /// call MLMediaPlayerGetBufferingUpdate to get buffering progress value
        /// For 'MLMediaPlayerPollingState_HasReceivedInfo,
        /// call MLMediaPlayerGetError to get last info code and data
        /// For 'MLMediaPlayerPollingState_HasReceivedError,
        /// call MLMediaPlayerGetError to get last error code and data
        /// Note: This API can still be used even if an OnBufferAvailable callback has
        /// been set using MLMediaPlayerSetOnBufferAvailableCallback method
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerPollStates(MlApi.MLHandle media_player, ushort mask, ref ushort out_polled_states);

        /// <summary>
        /// Get the DRM info of the video source
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="out_drm_info">pointer to the pointer to MLMediaPlayerDRMInfo struct
        /// The caller should not free the pointer returned
        /// The memory will be released in the call to MLMediaPlayerReleaseDRM</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters was NULL or invalid
        /// MLResult_Ok Current DRM Info was successfully returned
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// Deprecated since 0170 Scheduled for removal Replaced by MLMediaPlayerGetTrackDRMInfo
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerGetDRMInfo(MlApi.MLHandle media_player, out IntPtr out_drm_info);

        /// <summary>
        /// Prepare DRM
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="uuid">UUID of DRM scheme</param>
        /// <param name="session_id">pointer to MLMediaDRMByteArray, stands for Session ID</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters was NULL or invalid
        /// MLResult_Ok DRM was prepared successfully
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// Deprecated since 0170 Scheduled for removal Replaced by MLMediaPlayerPrepareTrackDRM
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerPrepareDRM(MlApi.MLHandle media_player, [MarshalAs(UnmanagedType.LPArray, SizeConst = 16)] byte[] uuid, in MlMediaDrm.MLMediaDRMByteArray session_id);

        /// <summary>
        /// Get the DRM info of the selected media (either audio or video) track
        /// This function has to be called only after DataSource has been set and the
        /// MediaPlayer is completely prepared
        /// @apilevel 2
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="track_info">Media track information defined by MLMediaPlayerTrackInfo</param>
        /// <param name="out_drm_info">pointer to the pointer to MLMediaPlayerTrackDRMInfo struct
        /// The caller should not free the pointer returned
        /// The memory will be released in the call to MLMediaPlayerReleaseDRM</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters was NULL or invalid
        /// MLResult_Ok Current DRM Info was successfully returned
        /// MLResult_Pending Media Source is not prepared yet Wait for on_prepared callback and call again
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// MLMediaGenericResult_NotAvailable DRM Information not available for the given track
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerGetTrackDRMInfo(MlApi.MLHandle media_player, in MlMediaPlayer.MLMediaPlayerTrackInfo track_info, out IntPtr out_drm_info);

        /// <summary>
        /// Prepare DRM for the selected media (either audio or video) track
        /// @apilevel 2
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="drm_session_info">DRM Session info for the Media track, as defined by MLMediaPlayerTrackDRMSessionInfo</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters was NULL or invalid
        /// MLResult_Ok DRM was prepared successfully
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerPrepareTrackDRM(MlApi.MLHandle media_player, in MlMediaPlayer.MLMediaPlayerTrackDRMSessionInfo drm_session_info);

        /// <summary>
        /// Release DRM
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <returns>
        /// MLResult_InvalidParam c media_player was invalid
        /// MLResult_Ok DRM was released successfully
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerReleaseDRM(MlApi.MLHandle media_player);

        /// <summary>
        /// Get default Buffering settings
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="out_buf_settings">A pointer of MLMediaPlayerBufferingSettings</param>
        /// <returns>
        /// MLResult_InvalidParam c media_player was invalid
        /// MLResult_Ok Default BufferSetting was returned successfully
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerGetDefaultBufferingSettings(MlApi.MLHandle media_player, ref MlMediaPlayer.MLMediaPlayerBufferingSettings out_buf_settings);

        /// <summary>
        /// Get current Buffering settings
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="out_buf_settings">A pointer of MLMediaPlayerBufferingSettings</param>
        /// <returns>
        /// MLResult_InvalidParam c media_player was invalid
        /// MLResult_Ok Current BufferSetting was returned successfully
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerGetBufferingSettings(MlApi.MLHandle media_player, ref MlMediaPlayer.MLMediaPlayerBufferingSettings out_buf_settings);

        /// <summary>
        /// Set Buffering settings
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="buf_settings">A reference of MLMediaPlayerBufferingSettings</param>
        /// <returns>
        /// MLResult_InvalidParam c media_player was invalid
        /// MLResult_Ok Set BufferSetting successfully
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerSetBufferingSettings(MlApi.MLHandle media_player, MlMediaPlayer.MLMediaPlayerBufferingSettings buf_settings);

        /// <summary>
        /// Return last Timed Text event information
        /// @apilevel 4
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="out_timed_text">The returned Timed Text handle pointer
        /// When handle is not required anymore, the caller should call MLMediaPlayerReleaseTimedTextEx
        /// with the returned handle</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters was NULL or invalid
        /// MLResult_Ok Last subtitle entry was successfully returned
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerGetTimedTextEx(MlApi.MLHandle media_player, ref MlApi.MLHandle out_timed_text);

        /// <summary>
        /// Release last Timed Text event information
        /// @apilevel 4
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="timed_text">Timed Text MLHandle to release</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters was NULL or invalid
        /// MLResult_Ok Last Timed Text entry was successfully released
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerReleaseTimedTextEx(MlApi.MLHandle media_player, MlApi.MLHandle timed_text);

        /// <summary>
        /// Set callback to get invoked when a Timed Text update is available along with its data
        /// @apilevel 4
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="on_media_timed_text_callback">function pointer to be called
        /// This can be 'NULL' to unset the callback</param>
        /// <param name="data">Custom data to be returned when callback is fired</param>
        /// <returns>
        /// MLResult_Ok Callback was successfully set
        /// MLResult_InvalidParam Passed c media_player handle was not found
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// Setting this callback disables use of the poll-based API to query for the
        /// MLMediaPlayerPollingStateFlag_HasTimedTextUpdated flag
        /// MLMediaPlayerPollStates will ignore checks for this bit
        /// This also makes MLMediaPlayerGetTimedTextEx redundant as the Timed Text data is provided with the callback
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerSetOnMediaTimedTextUpdateCallback(MlApi.MLHandle media_player, MlMediaPlayer.MLMediaPlayerOnMediaTimedTextUpdateCallback on_media_timed_text_callback, IntPtr data);

        /// <summary>
        /// Get WebVTT data represented by a timed text handle
        /// @apilevel 4
        ///  MediaPlayer instance
        /// </summary>
        /// <param name="media_player">MLHandle to the</param>
        /// <param name="timed_text">The Timed Text handle</param>
        /// <param name="out_webvtt_data">The WebVTT data structure to be returned
        /// The returned structure is only valid until the corresponding timed_text handle is released
        /// using MLMediaPlayerReleaseTimedTextEx</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters was invalid
        /// MLMediaGenericResult_BadType The timed_text handle was not in the WebVTT format The timed text track's mime type must be "text/vtt"
        /// MLResult_Ok WebVTT data was successfully returned
        /// MLMediaGenericResult_NoInit MediaPlayer was not properly built or initialized
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaplayer", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaPlayerGetWebVTTData(MlApi.MLHandle media_player, MlApi.MLHandle timed_text, out IntPtr out_webvtt_data);
    }
}

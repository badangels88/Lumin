//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlApi
    {
        public const int ML_INVALID_HANDLE = unchecked((int)0xFFFFFFFFFFFFFFFF);

        public const int MLVersion_BuildIdMaxLength = unchecked((int)128);

        public const int MLResultAPIPrefix_Global = unchecked((int)0 << 16);

        /// <summary>
        /// Global MLResult codes that any API can optionally return
        /// </summary>
        public enum MLResultGlobal : int
        {
            /// <summary>
            /// Operation completed successfuly
            /// </summary>
            MLResult_Ok = unchecked((int)MLResultAPIPrefix_Global),

            /// <summary>
            /// Asynchronous operation has not completed
            /// </summary>
            MLResult_Pending,

            /// <summary>
            /// Operation has timed out
            /// </summary>
            MLResult_Timeout,

            /// <summary>
            /// Request to lock a shared resource that is already locked
            /// </summary>
            MLResult_Locked,

            /// <summary>
            /// Operation failed due to an unspecified internal error
            /// </summary>
            MLResult_UnspecifiedFailure,

            /// <summary>
            /// Operation failed due to an invalid parameter being supplied
            /// </summary>
            MLResult_InvalidParam,

            /// <summary>
            /// Operation failed because memory failed to be allocated
            /// </summary>
            MLResult_AllocFailed,

            /// <summary>
            /// Operation failed because a required privilege has not been granted
            /// </summary>
            MLResult_PrivilegeDenied,

            /// <summary>
            /// Operation failed because it is not currently implemented
            /// </summary>
            MLResult_NotImplemented,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLResult_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// SDK version: '[major][minor][revision][build_id]'
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLVersion
        {
            /// <summary>
            /// Major version
            /// </summary>
            public uint major;

            /// <summary>
            /// Minor version
            /// </summary>
            public uint minor;

            /// <summary>
            /// Revision
            /// </summary>
            public uint revision;

            /// <summary>
            /// Build ID
            /// </summary>
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
            public string build_id;
        }

        /// <summary>
        /// Integer handle type used to reference many things returned by the API, instead of
        /// returning pointers directly Use MLHandleIsValid to check if a handle is valid or not
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly struct MLHandle : IEquatable<MLHandle>
        {
            public MLHandle(ulong value) => this.Value = value;

            public readonly ulong Value;

            public bool Equals(MLHandle other) => Value.Equals(other.Value);

            public override bool Equals(object obj) => obj is MLHandle other && Equals(other);

            public override int GetHashCode() => Value.GetHashCode();

            public override string ToString() => Value.ToString();

            public static implicit operator ulong(MLHandle from) => from.Value;

            public static implicit operator MLHandle(ulong from) => new MLHandle(from);

            public static bool operator ==(MLHandle left, MLHandle right) => left.Equals(right);

            public static bool operator !=(MLHandle left, MLHandle right) => !left.Equals(right);
        }

        /// <summary>
        /// MLResult type that all functions in the APIs return
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly struct MLResult : IEquatable<MLResult>
        {
            public MLResult(int value) => this.Value = value;

            public readonly int Value;

            public bool Equals(MLResult other) => Value.Equals(other.Value);

            public override bool Equals(object obj) => obj is MLResult other && Equals(other);

            public override int GetHashCode() => Value.GetHashCode();

            public override string ToString() => Value.ToString();

            public static implicit operator int(MLResult from) => from.Value;

            public static implicit operator MLResult(int from) => new MLResult(from);

            public static bool operator ==(MLResult left, MLResult right) => left.Equals(right);

            public static bool operator !=(MLResult left, MLResult right) => !left.Equals(right);
        }
    }
}

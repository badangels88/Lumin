//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlTokenAgent
    {
        public const int MLResultAPIPrefix_TokenAgent = unchecked((int)0x37ee << 16);

        /// <summary>
        /// Return values for Token Agent API calls
        /// </summary>
        public enum MLTokenAgentResult : int
        {
            /// <summary>
            /// The local binder service was not found
            /// </summary>
            MLTokenAgentResult_FailedToConnectToLocalService = unchecked((int)MLResultAPIPrefix_TokenAgent),

            /// <summary>
            /// The local binder service is running but has not been registered by the login service
            /// </summary>
            MLTokenAgentResult_ServiceNotStarted,

            /// <summary>
            /// The local binder service failed to connect to the cloud service
            /// </summary>
            MLTokenAgentResult_FailedToConnectToCloud,

            /// <summary>
            /// The cloud service rejected the request due to inappropriate credentials
            /// </summary>
            MLTokenAgentResult_CloudAuthentication,

            /// <summary>
            /// The local server failed to log in with the cloud
            /// </summary>
            MLTokenAgentResult_FailedToLogin,

            /// <summary>
            /// An attempt to complete the login was begun without starting the login
            /// </summary>
            MLTokenAgentResult_LoginNotBegun,

            /// <summary>
            /// The operation was rejected because the local server was not logged in with the cloud
            /// </summary>
            MLTokenAgentResult_NotLoggedIn,

            /// <summary>
            /// The login request failed because the local server is already logged in with the cloud
            /// </summary>
            MLTokenAgentResult_AlreadyLoggedIn,

            /// <summary>
            /// The login request request failed because a login is already in progress
            /// </summary>
            MLTokenAgentResult_LoginInProgress,

            /// <summary>
            /// Having completed the login process with the cloud successfully, the service failed to
            /// start the local identity service
            /// </summary>
            MLTokenAgentResult_FailedToStartIdentityService,

            /// <summary>
            /// The serial number of the device is not recognized by the cloud so login failed
            /// </summary>
            MLTokenAgentResult_DeviceNotRegistered,

            /// <summary>
            /// The device is not yet connected to the cloud so login failed
            /// </summary>
            MLTokenAgentResult_DeviceNotConnected,

            /// <summary>
            /// The device is not connected to a network
            /// </summary>
            MLTokenAgentResult_NetworkError,

            /// <summary>
            /// The user is not registered on the website
            /// </summary>
            MLTokenAgentResult_UserIsNotRegistered,

            /// <summary>
            /// The user's credentials have expired
            /// </summary>
            MLTokenAgentResult_ExpiredCredentials,

            /// <summary>
            /// The cloud rejected the operation because the user is not authorized to execute it
            /// </summary>
            MLTokenAgentResult_Unauthorized,

            /// <summary>
            /// The device failed to authenticate the server
            /// </summary>
            MLTokenAgentResult_CertificateError,

            /// <summary>
            /// The cloud rejected the operation
            /// </summary>
            MLTokenAgentResult_RejectedByCloud,

            /// <summary>
            /// The user must accept the terms of use on the website
            /// </summary>
            MLTokenAgentResult_UserMustAcceptTerms,

            /// <summary>
            /// The user's account has been locked and can only be unlocked on the website
            /// </summary>
            MLTokenAgentResult_AccountLocked,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLTokenAgentResult_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// The credentials that can be used to for a user to access a particular service (Audience)
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLTokenAgentCredentials
        {
            /// <summary>
            /// Null terminated string allocated and released by the library
            /// </summary>
            [MarshalAs(UnmanagedType.LPStr)]
            public string access_key_id;

            /// <summary>
            /// Null terminated string allocated and released by the library
            /// </summary>
            [MarshalAs(UnmanagedType.LPStr)]
            public string secret_key;

            /// <summary>
            /// Null terminated string allocated and released by the library
            /// </summary>
            [MarshalAs(UnmanagedType.LPStr)]
            public string session_token;
        }

        /// <summary>
        /// Contains tokens that are used to read and modify the user profile
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLTokenAgentTokens
        {
            /// <summary>
            /// The id_token contains information from the user profile
            /// It is a null terminated string that is allocated and released by the library
            /// </summary>
            [MarshalAs(UnmanagedType.LPStr)]
            public string id_token;

            /// <summary>
            /// The access_token is the token that can be used to modify attributes of the user profile
            /// It is a null terminated string that is allocated and released by the library
            /// </summary>
            [MarshalAs(UnmanagedType.LPStr)]
            public string access_token;
        }

        /// <summary>
        /// Represents the credentials and tokens of the User-Audience pair that is associated with the calling service
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLTokenAgentClientCredentials
        {
            /// <summary>
            /// The credentials that can be used to access a particular service (Audience)
            /// </summary>
            public MlTokenAgent.MLTokenAgentCredentials credentials;

            /// <summary>
            /// The tokens that can be used to manage the user profile for a particular Audience
            /// </summary>
            public MlTokenAgent.MLTokenAgentTokens tokens;
        }

        /// <summary>
        /// MLTokenAgentGetClientCredentials is a blocking function that accesses the cloud and
        /// returns a pointer to an MLTokenAgentClientCredentials structure containing the users credentials and
        /// tokens for a particular service (Audience)
        /// </summary>
        /// <param name="out_credentials">is a pointer to a MLTokenAgentClientCredentials pointer which was allocated
        /// with all its fields by the library It must only be released
        /// using MLTokenAgentReleaseClientCredentials</param>
        /// <returns>
        /// MLResult_AllocFailed The operation failed to allocate memory
        /// MLResult_InvalidParam out_credentials was 0 (null)
        /// MLResult_Ok The operation completed successfully
        /// MLResult_PrivilegeDenied The caller does not have the ClientCredentialsRead privilege
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLTokenAgentResult A token agent specific failure occurred during the operation
        /// </returns>
        /// <remarks>
        /// The library deduces the Audience being requested from the name of the calling service
        /// @priv ClientCredentialsRead
        /// </remarks>
        [DllImport("ml_identity", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLTokenAgentGetClientCredentials(out IntPtr out_credentials);

        /// <summary>
        /// MLTokenAgentGetClientCredentialsAsync invokes the MLTokenAgentGetClientCredentials
        /// function asynchronously (in a different thread)
        /// </summary>
        /// <param name="out_future">@parblock A pointer to an MLInvokeFuture pointer which provides the means to poll for completion and
        /// to retrieve the credentials returned by MLTokenAgentGetClientCredentials</param>
        /// <returns>
        /// MLResult_AllocFailed The operation failed to allocate memory
        /// MLResult_InvalidParam profile or out_future were 0 (null)
        /// MLResult_Ok The operation completed successfully and out_future points
        /// to an allocated MLInvokeFuture If any other value is returned, the location pointed to
        /// by out_future is set to 0 (null)
        /// MLResult_PrivilegeDenied The caller does not have the ClientCredentialsRead privilege
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLTokenAgentResult A token agent specific failure occurred during the operation
        /// </returns>
        /// <remarks>
        /// Note: This pointer will be freed by the library before returning from the first (and last)
        /// call to MLTokenAgentGetClientCredentialsWait, after the asynchronous call completed, that is
        /// after MLTokenAgentGetClientCredentialsWait returns any value that is not MLResult_Pending
        /// @endparblock
        /// @priv ClientCredentialsRead
        /// </remarks>
        [DllImport("ml_identity", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLTokenAgentGetClientCredentialsAsync(out MlInvokeAsync.MLInvokeFuture out_future);

        /// <summary>
        /// Having made a call to MLTokenAgentGetClientCredentialsAsync, the user can call
        /// MLTokenAgentGetClientCredentialsWait to detect whether the asynchronous call completed and if
        /// so, to retrieve the credentials in out_credentials
        /// </summary>
        /// <param name="future">The pointer returned by the MLTokenAgentGetClientCredentialsAsync function</param>
        /// <param name="msec_timeout">The timeout in milliseconds</param>
        /// <param name="out_credentials">The location in memory where the pointer to the credentials
        /// structure allocated by the library will be copied, if the asynchronous call completed,
        /// or 0 (null) if not</param>
        /// <returns>
        /// MLResult_AllocFailed The operation failed to allocate memory
        /// MLResult_InvalidParam future or out_credentials were 0 (null)
        /// MLResult_Ok The operation completed successfully before the timeout elapsed
        /// The location pointed to by out_credentials was set to the address of the
        /// MLTokenAgentClientCredentials structure allocated by the library
        /// The returned credentils must be released when no longer needed by calling
        /// MLTokenAgentReleaseClientCredentials
        /// If any other value is returned, the location pointed to by out_credentials is set to 0 (null)
        /// MLResult_Pending The timeout elapsed before the asynchronous call completed
        /// MLResult_PrivilegeDenied The caller does not have the ClientCredentialsRead privilege
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLTokenAgentResult A token agent specific failure occurred during the operation
        /// </returns>
        /// <remarks>
        /// The call to MLTokenAgentGetClientCredentialsWait blocks until either
        /// msec_timeout msec elapses or the asynchronous function completes
        /// Note:
        /// 1 To poll without blocking use msec_timeout = 0
        /// 2 After the function returns true, future is freed by the library and must not be used again in
        /// a call to MLTokenAgentGetClientCredentialsWait
        /// @priv ClientCredentialsRead
        /// </remarks>
        [DllImport("ml_identity", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLTokenAgentGetClientCredentialsWait(MlInvokeAsync.MLInvokeFuture future, uint msec_timeout, out IntPtr out_credentials);

        /// <summary>
        /// MLTokenAgentReleaseClientCredentials releases all resources associated with the
        /// MLTokenAgentClientCredentials structure that was returned by the library
        /// </summary>
        /// <param name="credentials">a pointer to a library allocated structure received using one of:
        /// MLTokenAgentGetClientCredentials or MLTokenAgentGetClientCredentialsWait</param>
        /// <returns>
        /// MLResult_InvalidParam credentials was 0 (null)
        /// MLResult_Ok The operation completed successfully
        /// </returns>
        /// <remarks>
        /// @priv ClientCredentialsRead
        /// </remarks>
        [DllImport("ml_identity", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLTokenAgentReleaseClientCredentials(in MlTokenAgent.MLTokenAgentClientCredentials credentials);

        /// <summary>
        /// Returns an ASCII string for MLTokenAgentResult and MLResultGlobal codes
        /// </summary>
        /// <param name="result_code">The input MLResult enum from MLTokenAgent functions</param>
        /// <returns>
        /// ASCII string containing readable version of result code
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_identity", CallingConvention = CallingConvention.Cdecl)]
        [return: MarshalAs(UnmanagedType.LPStr)]
        public static extern string MLTokenAgentGetResultString(MlApi.MLResult result_code);
    }
}

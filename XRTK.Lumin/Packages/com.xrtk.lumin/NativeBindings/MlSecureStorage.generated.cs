//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlSecureStorage
    {
        /// <summary>
        ///  SecureStorage Secure Storage
        /// API to use the system's encrypted storage AES in CBC mode with a 256 bit key is used
        /// </summary>
        /// <remarks>
        /// \
        /// {
        /// </remarks>
        public const int MLResultAPIPrefix_SecureStorage = unchecked((int)0xba5c << 16);

        /// <summary>
        /// Return values for Secure Storage API calls
        /// </summary>
        public enum MLSecureStorageResult : int
        {
            /// <summary>
            /// Blob not found
            /// </summary>
            MLSecureStorageResult_BlobNotFound = unchecked((int)MLResultAPIPrefix_SecureStorage),

            /// <summary>
            /// I/O failure
            /// </summary>
            MLSecureStorageResult_IOFailure,
        }

        /// <summary>
        /// Store the specified blob under the specified alias An existing alias would be overwritten
        /// </summary>
        /// <param name="alias">The NULL-terminated alias associated with the blob Must not be NULL</param>
        /// <param name="blob">The blob to store</param>
        /// <param name="blob_length">The length of the blob to store</param>
        /// <returns>
        /// MLResult_InvalidParam If the alias is empty and/or the blob pointer is invalid
        /// MLResult_Ok If the blob was stored successfully
        /// MLResult_UnspecifiedFailure Failed due to an internal error
        /// MLSecureStorageResult_IOFailure If an I/O failure occurred
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_secure_storage", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLSecureStoragePutBlob([MarshalAs(UnmanagedType.LPStr)] string alias, ref byte blob, Interop.size_t blob_length);

        /// <summary>
        /// Retrieve the blob associated with the specified alias Note that the caller must invoke
        /// MLSecureStorageFreeBlobBuffer on the blob pointer
        /// </summary>
        /// <param name="alias">The NULL-terminated alias to look for Must not be NULL</param>
        /// <param name="blob">A pointer to the internally allocated buffer</param>
        /// <param name="blob_length">The length of the internally allocated blob</param>
        /// <returns>
        /// MLResult_InvalidParam If the alias is empty and/or the blob pointer is invalid
        /// MLResult_Ok If the blob was found and retrieved successfully
        /// MLResult_UnspecifiedFailure Failed due to an internal error
        /// MLSecureStorageResult_BlobNotFound If the alias was not found
        /// MLSecureStorageResult_IOFailure If an I/O failure occurred
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_secure_storage", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLSecureStorageGetBlob([MarshalAs(UnmanagedType.LPStr)] string alias, out IntPtr blob, ref Interop.size_t blob_length);

        /// <summary>
        /// Delete the item associated with the specified alias
        /// </summary>
        /// <param name="alias">The NULL-terminated alias of the item to delete Must not be NULL</param>
        /// <returns>
        /// MLResult_InvalidParam If the alias is empty
        /// MLResult_Ok If the item was deleted successfully or did not exist altogether
        /// MLResult_UnspecifiedFailure Failed due to an internal error
        /// MLSecureStorageResult_IOFailure If an I/O failure occurred
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_secure_storage", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLSecureStorageDeleteBlob([MarshalAs(UnmanagedType.LPStr)] string alias);

        /// <summary>
        /// Free the buffer allocated internally when MLSecureStorageGetBlob is called
        /// </summary>
        /// <param name="blob">Pointer to the internally allocated buffer</param>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_secure_storage", CallingConvention = CallingConvention.Cdecl)]
        public static extern void MLSecureStorageFreeBlobBuffer(ref byte blob);

        /// <summary>
        /// Returns an ASCII string for MLSecureStorageResult and MLResultGlobal codes
        /// </summary>
        /// <param name="result_code">The input MLResult enum from MLSecureStorage functions</param>
        /// <returns>
        /// ASCII string containing readable version of result code
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_secure_storage", CallingConvention = CallingConvention.Cdecl)]
        [return: MarshalAs(UnmanagedType.LPStr)]
        public static extern string MLSecureStorageGetResultString(MlApi.MLResult result_code);
    }
}

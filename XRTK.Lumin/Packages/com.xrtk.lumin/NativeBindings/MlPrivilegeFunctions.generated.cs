//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlPrivilegeFunctions
    {
        public const int MLResultAPIPrefix_Privileges = unchecked((int)0xcbcd << 16);

        /// <summary>
        /// Return values for Privileges API calls
        /// </summary>
        public enum MLPrivilegesResult : int
        {
            MLPrivilegesResult_Granted = unchecked((int)MLResultAPIPrefix_Privileges),

            MLPrivilegesResult_Denied,
        }

        /// <summary>
        ///  Privileges Privileges
        /// APIs to check or request privileges from the system
        /// NOTE: Do not directly include this header Include 'ml_privilegesh'
        /// </summary>
        /// <remarks>
        /// \
        /// {
        /// </remarks>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly struct MLPrivilegesAsyncRequest : IEquatable<MLPrivilegesAsyncRequest>
        {
            private readonly IntPtr _handle;

            public MLPrivilegesAsyncRequest(IntPtr handle) => _handle = handle;

            public IntPtr Handle => _handle;

            public bool Equals(MLPrivilegesAsyncRequest other) => _handle.Equals(other._handle);

            public override bool Equals(object obj) => obj is MLPrivilegesAsyncRequest other && Equals(other);

            public override int GetHashCode() => _handle.GetHashCode();

            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));

            public static bool operator ==(MLPrivilegesAsyncRequest left, MLPrivilegesAsyncRequest right) => left.Equals(right);

            public static bool operator !=(MLPrivilegesAsyncRequest left, MLPrivilegesAsyncRequest right) => !left.Equals(right);
        }

        /// <summary>
        /// Start the privilege-checking system This function should be called
        /// before any privilege-checking functions are called
        /// </summary>
        /// <returns>
        /// MLResult_Ok If the privilege system startup succeeded
        /// MLResult_UnspecifiedFailure If the privilege system failed to startup
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_platform", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLPrivilegesStartup();

        /// <summary>
        /// Shut down and clean all resources used by the privilege-checking
        /// system This function should be called prior to exiting the program if
        /// a call to MLPrivilegesInit was made
        /// </summary>
        /// <returns>
        /// MLResult_Ok If the privilege system shutdown succeeded
        /// MLResult_UnspecifiedFailure If the privilege system failed to shutdown
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_platform", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLPrivilegesShutdown();

        /// <summary>
        /// Check whether the application has the specified privileges
        /// This does not solicit consent from the end-user
        /// </summary>
        /// <param name="privilege_id">The privilege to check</param>
        /// <returns>
        /// MLResult_UnspecifiedFailure If the privilege system was not started
        /// MLPrivilegesResult_Denied If the privilege is denied
        /// MLPrivilegesResult_Granted If the privilege is granted
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_privileges", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLPrivilegesCheckPrivilege(MlPrivilegeIds.MLPrivilegeID privilege_id);

        /// <summary>
        /// Request the specified privilege This may solicit consent from the end-user
        /// When waiting for user consent, this function blocks
        /// For a non-blocking option, use MLPrivilegesRequestPrivilegeAsync
        /// </summary>
        /// <param name="privilege_id">The privilege to request</param>
        /// <returns>
        /// MLResult_UnspecifiedFailure If the privilege system was not started
        /// MLPrivilegesResult_Denied If the privilege is denied
        /// MLPrivilegesResult_Granted If the privilege is granted
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_privileges", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLPrivilegesRequestPrivilege(MlPrivilegeIds.MLPrivilegeID privilege_id);

        /// <summary>
        /// Request the specified privileges This may solicit consent from the end-user
        /// </summary>
        /// <param name="privilege_id">The privilege to request</param>
        /// <param name="request">The request object Poll using MLPrivilegesRequestPrivilegeTryGet</param>
        /// <returns>
        /// MLResult_InvalidParam If request is a null pointer
        /// MLResult_Ok If the privilege request is in progress
        /// MLResult_UnspecifiedFailure If the privilege system was not started
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_privileges", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLPrivilegesRequestPrivilegeAsync(MlPrivilegeIds.MLPrivilegeID privilege_id, out MlPrivilegeFunctions.MLPrivilegesAsyncRequest request);

        /// <summary>
        /// Try to get the result from a privilege request The request object is internally freed when
        /// the result is ready (ie retval is either MLPrivilegesResult_Granted or MLPrivilegesResult_Denied)
        /// </summary>
        /// <param name="request">The request created in MLPrivilegesRequestPrivilegeAsync</param>
        /// <returns>
        /// MLResult_InvalidParam If request is a null pointer
        /// MLResult_Pending If the privilege request is in progress
        /// MLResult_UnspecifiedFailure If the privilege system was not started
        /// MLPrivilegesResult_Denied If the privilege is denied
        /// MLPrivilegesResult_Granted If the privilege is granted
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_privileges", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLPrivilegesRequestPrivilegeTryGet(MlPrivilegeFunctions.MLPrivilegesAsyncRequest request);

        /// <summary>
        /// Returns an ASCII string for MLPrivilegesResult and MLResultGlobal codes
        /// </summary>
        /// <param name="result_code">The input MLResult enum from MLPrivileges functions</param>
        /// <returns>
        /// ASCII string containing readable version of result code
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_privileges", CallingConvention = CallingConvention.Cdecl)]
        [return: MarshalAs(UnmanagedType.LPStr)]
        public static extern string MLPrivilegesGetResultString(MlApi.MLResult result_code);
    }
}

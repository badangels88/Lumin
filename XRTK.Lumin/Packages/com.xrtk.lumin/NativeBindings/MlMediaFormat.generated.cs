//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlMediaFormat
    {
        /// <summary>
        /// Media format type
        /// </summary>
        public enum MLMediaFormatType : int
        {
            /// <summary>
            /// Video
            /// </summary>
            MLMediaFormatType_Video,

            /// <summary>
            /// Audio
            /// </summary>
            MLMediaFormatType_Audio,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLMediaFormatType_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Data type containing byte array buffer and the size
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaFormatByteArray
        {
            public IntPtr ptr;

            public Interop.size_t length;
        }

        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly struct MLMediaFormatKey : IEquatable<MLMediaFormatKey>
        {
            public MLMediaFormatKey(string value) => this.Value = value;

            [MarshalAs(UnmanagedType.LPStr)]
            public readonly string Value;

            public bool Equals(MLMediaFormatKey other) => Value.Equals(other.Value);

            public override bool Equals(object obj) => obj is MLMediaFormatKey other && Equals(other);

            public override int GetHashCode() => Value.GetHashCode();

            public override string ToString() => Value.ToString();

            public static implicit operator string(MLMediaFormatKey from) => from.Value;

            public static implicit operator MLMediaFormatKey(string from) => new MLMediaFormatKey(from);

            public static bool operator ==(MLMediaFormatKey left, MLMediaFormatKey right) => left.Equals(right);

            public static bool operator !=(MLMediaFormatKey left, MLMediaFormatKey right) => !left.Equals(right);
        }

        /// <summary>
        /// Create a video format object
        /// </summary>
        /// <param name="mime_type">Mime type of the content</param>
        /// <param name="width">Width of the content in pixels</param>
        /// <param name="height">Height of the content in pixels</param>
        /// <param name="out_handle">A handle to the created video format object
        /// If there is an error during creation, it will
        /// return ML_INVALID_HANDLE</param>
        /// <returns>
        /// MLResult_AllocFailed If handle cannot be allocated
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaformat", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaFormatCreateVideo([MarshalAs(UnmanagedType.LPStr)] string mime_type, int width, int height, ref MlApi.MLHandle out_handle);

        /// <summary>
        /// Create a audio format object
        /// </summary>
        /// <param name="mime_type">Mime type of the content</param>
        /// <param name="sample_rate">Sample rate of the content</param>
        /// <param name="channel_count">Number of audio channels</param>
        /// <param name="out_handle">A handle to the created audio format object
        /// If there is an error during creation, it will
        /// return ML_INVALID_HANDLE</param>
        /// <returns>
        /// MLResult_AllocFailed If handle cannot be allocated
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaformat", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaFormatCreateAudio([MarshalAs(UnmanagedType.LPStr)] string mime_type, int sample_rate, int channel_count, ref MlApi.MLHandle out_handle);

        /// <summary>
        /// Create a subtitle format object
        /// </summary>
        /// <param name="mime_type">Mime type of the content</param>
        /// <param name="language">Language of the content, using either ISO 639-1 or
        /// 639-2/T codes Specify null or "und" if language information
        /// is only included in the content (This will also work if there
        /// are multiple language tracks in the content)</param>
        /// <param name="out_handle">A handle to the created subtitle format object
        /// If there is an error during creation, it will
        /// return ML_INVALID_HANDLE</param>
        /// <returns>
        /// MLResult_AllocFailed If handle cannot be allocated
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaformat", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaFormatCreateSubtitle([MarshalAs(UnmanagedType.LPStr)] string mime_type, [MarshalAs(UnmanagedType.LPStr)] string language, ref MlApi.MLHandle out_handle);

        /// <summary>
        /// Destroy a
        ///  MediaFormat object
        ///  MediaFormat object
        ///  MediaCodec object was successfully destroyed
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <returns>
        /// MLResult_InvalidParam If handle is invalid
        /// MLResult_Ok If
        /// </returns>
        /// <returns>
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaformat", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaFormatDestroy(MlApi.MLHandle handle);

        /// <summary>
        /// Obtain the human readable representation of the format
        ///  MediaFormat object
        /// </summary>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="out_string">Pointer to the user-maintained buffer for storing
        /// the output C-style format string</param>
        /// <remarks>
        /// User shall allocate at least MAX_FORMAT_STRING_SIZE bytes of memory for
        /// storing the output format string The format string contains
        /// a list of key-value pairs, which can be extracted individually
        /// via the suitable "GetKeyValue" APIs
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaformat", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaFormatObjectToString(MlApi.MLHandle handle, IntPtr out_string);

        /// <summary>
        /// Obtain the value of an integer key
        ///  MediaFormat object
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="name">C-string representation of the key
        /// Must be one of the MLMediaFormatKey tags defined above</param>
        /// <param name="out_key">Value of the key</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NameNotFound If name is not one of the media format key name
        /// </returns>
        /// <remarks>
        /// For example, use MLMediaFormat_Key_Frame_Rate key to get
        /// the framerate of a video track
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaformat", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaFormatGetKeyValueInt32(MlApi.MLHandle handle, MlMediaFormat.MLMediaFormatKey name, ref int out_key);

        /// <summary>
        /// Obtain the value of an long key
        /// For example, use MLMediaFormat_Key_Duration key to get
        /// duration of a track
        ///  MediaFormat object
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="name">C-string representation of the key
        /// Must be one of the MLMediaFormatKey tags defined above</param>
        /// <param name="out_key">Value of the key</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NameNotFound If name is not one of the media format key name
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaformat", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaFormatGetKeyValueInt64(MlApi.MLHandle handle, MlMediaFormat.MLMediaFormatKey name, ref long out_key);

        /// <summary>
        /// Obtain the value of an float key
        ///  MediaFormat object
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="name">C-string representation of the key
        /// Must be one of the MLMediaFormatKey tags defined above</param>
        /// <param name="out_key">Value of the key</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NameNotFound If name is not one of the media format key name
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaformat", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaFormatGetKeyValueFloat(MlApi.MLHandle handle, MlMediaFormat.MLMediaFormatKey name, ref float out_key);

        /// <summary>
        /// Obtain the size of a key
        ///  MediaFormat object
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="name">C-string representation of the key
        /// Must be one of the MLMediaFormatKey tags defined above</param>
        /// <param name="out_size">Size of the key</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NameNotFound If name is not one of the media format key name
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaformat", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaFormatGetKeySize(MlApi.MLHandle handle, MlMediaFormat.MLMediaFormatKey name, ref Interop.size_t out_size);

        /// <summary>
        /// Obtain the value of a string key
        ///  MediaFormat object
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="name">C-string representation of the key
        /// Must be one of the MLMediaFormatKey tags defined above</param>
        /// <param name="out_string">Pointer to the C-string representation of the string key</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NameNotFound If name is not one of the media format key name
        /// </returns>
        /// <remarks>
        /// User shall allocate at least MAX_KEY_STRING_SIZE bytes of memory for
        /// storing the output key string
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaformat", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaFormatGetKeyString(MlApi.MLHandle handle, MlMediaFormat.MLMediaFormatKey name, IntPtr out_string);

        /// <summary>
        /// Obtain the value of a ByteBuffer key
        ///  MediaFormat object
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="name">C-string representation of the key
        /// Must be one of the MLMediaFormatKey tags defined above</param>
        /// <param name="out_buffer">Pointer to byte buffer that needs to be allocated and copied to
        /// To free/release, call MLMediaFormatKeyByteBufferRelease</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NameNotFound If name is not one of the media format key name
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaformat", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaFormatGetKeyByteBuffer(MlApi.MLHandle handle, MlMediaFormat.MLMediaFormatKey name, ref MlMediaFormat.MLMediaFormatByteArray out_buffer);

        /// <summary>
        /// Release the ByteBuffer acquired by MLMediaFormatGetKeyByteBuffer
        ///  MediaFormat object
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="buffer">Byte buffer that needs to be released</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaformat", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaFormatKeyByteBufferRelease(MlApi.MLHandle handle, ref MlMediaFormat.MLMediaFormatByteArray buffer);

        /// <summary>
        /// Set the value of an integer key
        ///  MediaFormat object
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="name">C-string representation of the key
        /// Must be one of the MLMediaFormatKey tags defined above</param>
        /// <param name="key_value">Key value</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaformat", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaFormatSetKeyInt32(MlApi.MLHandle handle, MlMediaFormat.MLMediaFormatKey name, int key_value);

        /// <summary>
        /// Set the value of a long key
        ///  MediaFormat object
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="name">C-string representation of the key
        /// Must be one of the MLMediaFormatKey tags defined above</param>
        /// <param name="key_value">Key value</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaformat", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaFormatSetKeyInt64(MlApi.MLHandle handle, MlMediaFormat.MLMediaFormatKey name, long key_value);

        /// <summary>
        /// Set the value of a float key
        ///  MediaFormat object
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="name">C-string representation of the key
        /// Must be one of the MLMediaFormatKey tags defined above</param>
        /// <param name="key_value">Key value</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaformat", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaFormatSetKeyFloat(MlApi.MLHandle handle, MlMediaFormat.MLMediaFormatKey name, float key_value);

        /// <summary>
        /// Set the size of a key
        ///  MediaFormat object
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="name">C-string representation of the key
        /// Must be one of the MLMediaFormatKey tags defined above</param>
        /// <param name="key_size">Key size</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaformat", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaFormatSetKeySize(MlApi.MLHandle handle, MlMediaFormat.MLMediaFormatKey name, Interop.size_t key_size);

        /// <summary>
        /// Set the value of a string key
        ///  MediaFormat object
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="name">C-string representation of the key
        /// Must be one of the MLMediaFormatKey tags defined above</param>
        /// <param name="key_value">C-string representation of key value</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaformat", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaFormatSetKeyString(MlApi.MLHandle handle, MlMediaFormat.MLMediaFormatKey name, [MarshalAs(UnmanagedType.LPStr)] string key_value);

        /// <summary>
        /// Set the value of a ByteBuffer key
        ///  MediaFormat object
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="name">C-string representation of the key
        /// Must be one of the MLMediaFormatKey tags defined above</param>
        /// <param name="buffer">Pointer to the data buffer for the corresponding key</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaformat", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaFormatSetKeyByteBuffer(MlApi.MLHandle handle, MlMediaFormat.MLMediaFormatKey name, ref MlMediaFormat.MLMediaFormatByteArray buffer);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlCameraMetadata
    {
        /// <summary>
        /// Rational data type
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLCameraMetadataRational
        {
            /// <summary>
            /// Numerator
            /// </summary>
            public int numerator;

            /// <summary>
            /// Denominator
            /// </summary>
            public int denominator;
        }

        /// <summary>
        /// Get color correction aberration modes
        /// </summary>
        /// <param name="handle">Camera characteristic metadata handle acquired from MLCameraGetCameraCharacteristics</param>
        /// <param name="out_data">Array of aberration modes The Library allocates and maintains the lifetime of the output data</param>
        /// <param name="out_count">Number of output data elements</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain color correction aberration modes due to invalid input parameter
        /// MLResult_Ok Obtained color correction aberration modes successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain color correction aberration modes due to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetColorCorrectionAvailableAberrationModes(MlApi.MLHandle handle, out IntPtr out_data, ref Interop.size_t out_count);

        /// <summary>
        /// Get AE modes
        /// </summary>
        /// <param name="handle">Camera characteristic metadata handle acquired from MLCameraGetCameraCharacteristics</param>
        /// <param name="out_data">Array of AE modes The Library allocates and maintains the lifetime of the output data</param>
        /// <param name="out_count">Number of output data elements</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain AE modes due to invalid input parameter
        /// MLResult_Ok Obtained AE modes successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain AE modes due to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetControlAEAvailableModes(MlApi.MLHandle handle, out IntPtr out_data, ref Interop.size_t out_count);

        /// <summary>
        /// Get AE compensation range
        /// </summary>
        /// <param name="handle">Camera characteristic metadata handle acquired from MLCameraGetCameraCharacteristics</param>
        /// <param name="out_data">Array of min (1st) and max (2nd) of AE compensation</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain AE compensation range due to invalid input parameter
        /// MLResult_Ok Obtained AE compensation range successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain AE compensation range to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetControlAECompensationRange(MlApi.MLHandle handle, [MarshalAs(UnmanagedType.LPArray, SizeConst = 2)] int[] out_data);

        /// <summary>
        /// Get AE compensation step
        /// </summary>
        /// <param name="handle">Camera characteristic metadata handle acquired from MLCameraGetCameraCharacteristics</param>
        /// <param name="out_data">AE compensation step</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain AE compensation step due to invalid input parameter
        /// MLResult_Ok Obtained AE compensation step successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain AE compensation step to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetControlAECompensationStep(MlApi.MLHandle handle, ref MlCameraMetadata.MLCameraMetadataRational out_data);

        /// <summary>
        /// Get AE lock
        /// </summary>
        /// <param name="handle">Camera characteristic metadata handle acquired from MLCameraGetCameraCharacteristics</param>
        /// <param name="out_data">AE lock</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain AE lock due to invalid input parameter
        /// MLResult_Ok Obtained AE lock successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain AE lock to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetControlAELockAvailable(MlApi.MLHandle handle, ref MlCameraMetadataTags.MLCameraMetadataControlAELock out_data);

        /// <summary>
        /// Get AWB modes
        /// </summary>
        /// <param name="handle">Camera characteristic metadata handle acquired from MLCameraGetCameraCharacteristics</param>
        /// <param name="out_data">Array of AWB modes The Library allocates and maintains the lifetime of the output data</param>
        /// <param name="out_count">Number of output data elements</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain AWB modes due to invalid input parameter
        /// MLResult_Ok Obtained AWB modes successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain AWB modes to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetControlAWBAvailableModes(MlApi.MLHandle handle, out IntPtr out_data, ref Interop.size_t out_count);

        /// <summary>
        /// Get AWB lock
        /// </summary>
        /// <param name="handle">Camera characteristic metadata handle acquired from MLCameraGetCameraCharacteristics</param>
        /// <param name="out_data">AWB lock</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain AWB lock due to invalid input parameter
        /// MLResult_Ok Obtained AWB lock successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain AWB lock to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetControlAWBLockAvailable(MlApi.MLHandle handle, ref MlCameraMetadataTags.MLCameraMetadataControlAWBLock out_data);

        /// <summary>
        /// Get scaler processed sizes list
        /// </summary>
        /// <param name="handle">Camera characteristic metadata handle acquired from MLCameraGetCameraCharacteristics</param>
        /// <param name="out_data">List of [width, height] pairs
        /// The Library allocates and maintains the lifetime of the output data</param>
        /// <param name="out_count">Number of output data elements(total of 2 x pairs)</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain scaler processed sizes list due to invalid input parameter
        /// MLResult_Ok Obtained scaler processed sizes list successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain scaler processed sizes list to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetScalerProcessedSizes(MlApi.MLHandle handle, out IntPtr out_data, ref Interop.size_t out_count);

        /// <summary>
        /// Get scaler available max digital zoom
        /// </summary>
        /// <param name="handle">Camera characteristic metadata handle acquired from MLCameraGetCameraCharacteristics</param>
        /// <param name="out_data">Max digital zoom</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain scaler available max digital zoom due to invalid input parameter
        /// MLResult_Ok Obtained scaler available max digital zoom successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain scaler available max digital zoom to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetScalerAvailableMaxDigitalZoom(MlApi.MLHandle handle, ref float out_data);

        /// <summary>
        /// Get scaler available stream configrations
        /// </summary>
        /// <param name="handle">Camera characteristic metadata handle acquired from MLCameraGetCameraCharacteristics</param>
        /// <param name="out_data">List of stream configuration settings
        /// Each setting is consisted of [MLCameraMetadataScalerAvailableFormats, width, height,
        /// MLCameraMetadataScalerAvailableStreamConfigurations]
        /// The Library allocates and maintains the lifetime of the output data</param>
        /// <param name="out_count">Number of output data elements(total of 4 x settings)</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain scaler available stream configrations due to invalid input parameter
        /// MLResult_Ok Obtained scaler available stream configrations successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain scaler available stream configrations to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetScalerAvailableStreamConfigurations(MlApi.MLHandle handle, out IntPtr out_data, ref Interop.size_t out_count);

        /// <summary>
        /// Get sensor info active array sizes
        /// </summary>
        /// <param name="handle">Camera characteristic metadata handle acquired from MLCameraGetCameraCharacteristics</param>
        /// <param name="out_data">Active array size [left, top, right, bottom]</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain sensor info active array sizes due to invalid input parameter
        /// MLResult_Ok Obtained sensor info active array sizes successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain sensor info active array sizes to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetSensorInfoActiveArraySize(MlApi.MLHandle handle, [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)] int[] out_data);

        /// <summary>
        /// Get sensor info sensitivity range
        /// </summary>
        /// <param name="handle">Camera characteristic metadata handle acquired from MLCameraGetCameraCharacteristics</param>
        /// <param name="out_data">Sensor info sensitivity range[min, max]</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain sensor info sensitivity range due to invalid input parameter
        /// MLResult_Ok Obtained sensor info sensitivity range successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain sensor info sensitivity range to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetSensorInfoSensitivityRange(MlApi.MLHandle handle, [MarshalAs(UnmanagedType.LPArray, SizeConst = 2)] int[] out_data);

        /// <summary>
        /// Get sensor info exposure time range
        /// </summary>
        /// <param name="handle">Camera characteristic metadata handle acquired from MLCameraGetCameraCharacteristics</param>
        /// <param name="out_data">Sensor info exposure time range[min, max] in microseconds</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain sensor info exposure time range due to invalid input parameter
        /// MLResult_Ok Obtained sensor info exposure time range successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain sensor info exposure time range to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetSensorInfoExposureTimeRange(MlApi.MLHandle handle, [MarshalAs(UnmanagedType.LPArray, SizeConst = 2)] long[] out_data);

        /// <summary>
        /// Get sensor orientation degree
        /// </summary>
        /// <param name="handle">Camera characteristic metadata handle acquired from MLCameraGetCameraCharacteristics</param>
        /// <param name="out_data">Sensor orientation degree</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain sensor orientation degree due to invalid input parameter
        /// MLResult_Ok Obtained sensor orientation degree successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain sensor orientation degree to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetSensorOrientation(MlApi.MLHandle handle, ref int out_data);

        /// <summary>
        /// Set sensor info exposure time range Only max time will be set currently
        /// </summary>
        /// <param name="handle">Camera characteristic metadata handle acquired from MLCameraGetCameraCharacteristics</param>
        /// <param name="data">Sensor info exposure time range[min, max] in microseconds</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to set sensor info exposure time range due to invalid input parameter
        /// MLResult_Ok Set sensor info exposure time range successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to set sensor info exposure time range to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataSetSensorInfoExposureTimeRange(MlApi.MLHandle handle, [MarshalAs(UnmanagedType.LPArray, SizeConst = 2)] long[] data);

        /// <summary>
        /// Get color correction mode
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="out_data">Color correction mode</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain color correction mode due to invalid input parameter
        /// MLResult_Ok Obtained color correction mode successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain color correction mode to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetColorCorrectionModeRequestMetadata(MlApi.MLHandle handle, ref MlCameraMetadataTags.MLCameraMetadataColorCorrectionMode out_data);

        /// <summary>
        /// Get color correction transform
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="out_data">3x3 color correction transform</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain color correction transform due to invalid input parameter
        /// MLResult_Ok Obtained color correction transform successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain color correction transform to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetColorCorrectionTransformRequestMetadata(MlApi.MLHandle handle, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPArray, SizeConst = 3)] MlCameraMetadata.MLCameraMetadataRational[][] out_data);

        /// <summary>
        /// Get color correction gains
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="out_data">Color correction gains</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain color correction gains due to invalid input parameter
        /// MLResult_Ok Obtained color correction gains successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain color correction gains to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetColorCorrectionGainsRequestMetadata(MlApi.MLHandle handle, [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)] float[] out_data);

        /// <summary>
        /// Get color correction aberration
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="out_data">Color correction aberration</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain color correction aberration due to invalid input parameter
        /// MLResult_Ok Obtained color correction aberration successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain color correction aberration to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetColorCorrectionAberrationModeRequestMetadata(MlApi.MLHandle handle, ref MlCameraMetadataTags.MLCameraMetadataColorCorrectionAberrationMode out_data);

        /// <summary>
        /// Get AE antibanding mode
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="out_data">AE antibanding mode</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain AE antibanding mode due to invalid input parameter
        /// MLResult_Ok Obtained AE antibanding mode successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain AE antibanding mode to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetControlAEAntibandingModeRequestMetadata(MlApi.MLHandle handle, ref MlCameraMetadataTags.MLCameraMetadataControlAEAntibandingMode out_data);

        /// <summary>
        /// Get AE exposure compensation
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="out_data">Exposure compensation value</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain AE exposure compensation due to invalid input parameter
        /// MLResult_Ok Obtained AE exposure compensation successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain AE exposure compensation to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetControlAEExposureCompensationRequestMetadata(MlApi.MLHandle handle, ref int out_data);

        /// <summary>
        /// Get AE lock
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="out_data">AE Lock</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain AE lock due to invalid input parameter
        /// MLResult_Ok Obtained AE lock successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain AE lock to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetControlAELockRequestMetadata(MlApi.MLHandle handle, ref MlCameraMetadataTags.MLCameraMetadataControlAELock out_data);

        /// <summary>
        /// Get AE mode
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="out_data">AE Lock</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain AE mode due to invalid input parameter
        /// MLResult_Ok Obtained AE mode successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain AE mode to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetControlAEModeRequestMetadata(MlApi.MLHandle handle, ref MlCameraMetadataTags.MLCameraMetadataControlAEMode out_data);

        /// <summary>
        /// Get AE target FPS range
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="out_data">AE target FPS range</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain AE target FPS range due to invalid input parameter
        /// MLResult_Ok Obtained AE target FPS range successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain AE target FPS range to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetControlAETargetFPSRangeRequestMetadata(MlApi.MLHandle handle, [MarshalAs(UnmanagedType.LPArray, SizeConst = 2)] int[] out_data);

        /// <summary>
        /// Get AWB lock
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="out_data">AWB Lock</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain AWB lock due to invalid input parameter
        /// MLResult_Ok Obtained AWB lock successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain AWB lock to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetControlAWBLockRequestMetadata(MlApi.MLHandle handle, ref MlCameraMetadataTags.MLCameraMetadataControlAWBLock out_data);

        /// <summary>
        /// Get AWB mode
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="out_data">AWB mode</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain AWB mode due to invalid input parameter
        /// MLResult_Ok Obtained AWB mode successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain AWB mode to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetControlAWBModeRequestMetadata(MlApi.MLHandle handle, ref MlCameraMetadataTags.MLCameraMetadataControlAWBMode out_data);

        /// <summary>
        /// Get sensor exposure time
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="out_data">Sensor exposure time</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain sensor exposure time due to invalid input parameter
        /// MLResult_Ok Obtained sensor exposure time successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain sensor exposure time to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetSensorExposureTimeRequestMetadata(MlApi.MLHandle handle, ref long out_data);

        /// <summary>
        /// Get sensor sensitivity
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="out_data">Sensor sensitivity</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain sensor exposure time due to invalid input parameter
        /// MLResult_Ok Obtained sensor exposure time successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain sensor exposure time to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetSensorSensitivityRequestMetadata(MlApi.MLHandle handle, ref int out_data);

        /// <summary>
        /// Get scaler crop region
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="out_data">Cropped region [left, top, right, bottom]</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain sensor exposure time due to invalid input parameter
        /// MLResult_Ok Obtained sensor exposure time successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain sensor exposure time to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetScalerCropRegionRequestMetadata(MlApi.MLHandle handle, [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)] int[] out_data);

        /// <summary>
        /// Set color correction mode
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="data">Color correction mode Null pointer will clear the data</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to set color correction mode due to invalid input parameter
        /// MLResult_Ok Set color correction mode successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to set color correction mode to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataSetColorCorrectionMode(MlApi.MLHandle handle, ref MlCameraMetadataTags.MLCameraMetadataColorCorrectionMode data);

        /// <summary>
        /// Set color correction transform
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="data">3x3 color correction transform Null pointer will clear the data</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to set color correction transform due to invalid input parameter
        /// MLResult_Ok Set color correction transform successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to set color correction transform to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataSetColorCorrectionTransform(MlApi.MLHandle handle, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPArray, SizeConst = 3)] MlCameraMetadata.MLCameraMetadataRational[][] data);

        /// <summary>
        /// Set color correction gains
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="data">Color correction gains Null pointer will clear the data</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to set color correction gains due to invalid input parameter
        /// MLResult_Ok Set color correction gains successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to set color correction gains to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataSetColorCorrectionGains(MlApi.MLHandle handle, [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)] float[] data);

        /// <summary>
        /// Set color correction aberration
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="data">Color correction aberration Null pointer will clear the data</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to set color correction aberration due to invalid input parameter
        /// MLResult_Ok Set color correction aberration successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to set color correction aberration to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataSetColorCorrectionAberrationMode(MlApi.MLHandle handle, ref MlCameraMetadataTags.MLCameraMetadataColorCorrectionAberrationMode data);

        /// <summary>
        /// Set AE antiband mode
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="data">AE antibanding mode Null pointer will clear the data</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to set AE antiband mode due to invalid input parameter
        /// MLResult_Ok Set AE antiband mode successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to set AE antiband mode to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataSetControlAEAntibandingMode(MlApi.MLHandle handle, ref MlCameraMetadataTags.MLCameraMetadataControlAEAntibandingMode data);

        /// <summary>
        /// Set AE exposure compensation
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="data">Exposure compensation value Null pointer will clear the data</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to set AE exposure compensation due to invalid input parameter
        /// MLResult_Ok Set AE exposure compensation successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to set AE exposure compensation to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataSetControlAEExposureCompensation(MlApi.MLHandle handle, ref int data);

        /// <summary>
        /// Set AE lock
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="data">AE Lock Null pointer will clear the data</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to set AE lock due to invalid input parameter
        /// MLResult_Ok Set AE lock successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to set AE lock to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataSetControlAELock(MlApi.MLHandle handle, ref MlCameraMetadataTags.MLCameraMetadataControlAELock data);

        /// <summary>
        /// Set AE mode
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="data">AE Mode Null pointer will clear the data</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to set AE mode due to invalid input parameter
        /// MLResult_Ok Set AE mode successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to set AE mode to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataSetControlAEMode(MlApi.MLHandle handle, ref MlCameraMetadataTags.MLCameraMetadataControlAEMode data);

        /// <summary>
        /// Set AE target FPS range
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="data">AE target FPS range</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to set AE target FPS range due to invalid input parameter
        /// MLResult_Ok Set AE target FPS range successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to set AE target FPS range to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataSetControlAETargetFPSRange(MlApi.MLHandle handle, [MarshalAs(UnmanagedType.LPArray, SizeConst = 2)] int[] data);

        /// <summary>
        /// Set AWB lock
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="data">AWB Lock Null pointer will clear the data</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to set AE target FPS range due to invalid input parameter
        /// MLResult_Ok Set AE target FPS range successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to set AE target FPS range to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataSetControlAWBLock(MlApi.MLHandle handle, ref MlCameraMetadataTags.MLCameraMetadataControlAWBLock data);

        /// <summary>
        /// Set AWB mode
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="data">AWB mode Null pointer will clear the data</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to set AWB mode due to invalid input parameter
        /// MLResult_Ok Set AWB mode successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to set AWB mode to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataSetControlAWBMode(MlApi.MLHandle handle, ref MlCameraMetadataTags.MLCameraMetadataControlAWBMode data);

        /// <summary>
        /// Set sensor exposure time
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="data">Sensor exposure time Null pointer will clear the data</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to set sensor exposure time due to invalid input parameter
        /// MLResult_Ok Set sensor exposure time successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to set sensor exposure time to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataSetSensorExposureTime(MlApi.MLHandle handle, ref long data);

        /// <summary>
        /// Set sensor sensitivity
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="data">Sensor sensitivity Null pointer will clear the data</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to set sensor sensitivity due to invalid input parameter
        /// MLResult_Ok Set sensor sensitivity successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to set sensor sensitivity to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataSetSensorSensitivity(MlApi.MLHandle handle, ref int data);

        /// <summary>
        /// Set scaler crop region
        /// </summary>
        /// <param name="handle">Camera request metadata handle acquired from MLCameraPrepareCapture</param>
        /// <param name="data">Cropped region [left, top, right, bottom] Null pointer will clear the data</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to set scaler crop region due to invalid input parameter
        /// MLResult_Ok Set scaler crop region successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to set scaler crop region to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataSetScalerCropRegion(MlApi.MLHandle handle, [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)] int[] data);

        /// <summary>
        /// Get color correction
        /// </summary>
        /// <param name="handle">Camera result metadata handle acquired from MLCameraGetResultMetadata</param>
        /// <param name="out_data">Color correction mode</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain color correction due to invalid input parameter
        /// MLResult_Ok Obtained color correction successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain color correction to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetColorCorrectionModeResultMetadata(MlApi.MLHandle handle, ref MlCameraMetadataTags.MLCameraMetadataColorCorrectionMode out_data);

        /// <summary>
        /// Get color correction transform
        /// </summary>
        /// <param name="handle">Camera result metadata handle acquired from MLCameraGetResultMetadata</param>
        /// <param name="out_data">3x3 color correction transform matrix</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain color correction transform due to invalid input parameter
        /// MLResult_Ok Obtained color correction transform successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain color correction transform to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetColorCorrectionTransformResultMetadata(MlApi.MLHandle handle, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPArray, SizeConst = 3)] MlCameraMetadata.MLCameraMetadataRational[][] out_data);

        /// <summary>
        /// Get color correction aberration
        /// </summary>
        /// <param name="handle">Camera result metadata handle acquired from MLCameraGetResultMetadata</param>
        /// <param name="out_data">Color correction aberration mode</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain color correction aberration due to invalid input parameter
        /// MLResult_Ok Obtained color correction aberration successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain color correction aberration to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetColorCorrectionAberrationModeResultMetadata(MlApi.MLHandle handle, ref MlCameraMetadataTags.MLCameraMetadataColorCorrectionAberrationMode out_data);

        /// <summary>
        /// Get color correction gains
        /// </summary>
        /// <param name="handle">Camera result metadata handle acquired from MLCameraGetResultMetadata</param>
        /// <param name="out_data">Color correction gains</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain color correction gains due to invalid input parameter
        /// MLResult_Ok Obtained color correction gains successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain color correction gains to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetColorCorrectionGainsResultMetadata(MlApi.MLHandle handle, [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)] float[] out_data);

        /// <summary>
        /// Get AE antibanding mode
        /// </summary>
        /// <param name="handle">Camera result metadata handle acquired from MLCameraGetResultMetadata</param>
        /// <param name="out_data">AE antibanding mode</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain AE antibanding mode due to invalid input parameter
        /// MLResult_Ok Obtained AE antibanding mode successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain AE antibanding mode to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetControlAEAntibandingModeResultMetadata(MlApi.MLHandle handle, ref MlCameraMetadataTags.MLCameraMetadataControlAEAntibandingMode out_data);

        /// <summary>
        /// Get AE exposure compensation
        /// </summary>
        /// <param name="handle">Camera result metadata handle acquired from MLCameraGetResultMetadata</param>
        /// <param name="out_data">AE exposure compensation</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain AE exposure compensation due to invalid input parameter
        /// MLResult_Ok Obtained AE exposure compensation successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain AE exposure compensation to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetControlAEExposureCompensationResultMetadata(MlApi.MLHandle handle, ref int out_data);

        /// <summary>
        /// Get AE lock
        /// </summary>
        /// <param name="handle">Camera result metadata handle acquired from MLCameraGetResultMetadata</param>
        /// <param name="out_data">AE lock</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain AE lock due to invalid input parameter
        /// MLResult_Ok Obtained AE lock successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain AE lock to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetControlAELockResultMetadata(MlApi.MLHandle handle, ref MlCameraMetadataTags.MLCameraMetadataControlAELock out_data);

        /// <summary>
        /// Get AE mode
        /// </summary>
        /// <param name="handle">Camera result metadata handle acquired from MLCameraGetResultMetadata</param>
        /// <param name="out_data">AE control mode</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain AE mode due to invalid input parameter
        /// MLResult_Ok Obtained AE mode successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain AE mode to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetControlAEModeResultMetadata(MlApi.MLHandle handle, ref MlCameraMetadataTags.MLCameraMetadataControlAEMode out_data);

        /// <summary>
        /// Get AE target FPS range
        /// </summary>
        /// <param name="handle">Camera result metadata handle acquired from MLCameraGetResultMetadata</param>
        /// <param name="out_data">AE target FPS range</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain AE target FPS range due to invalid input parameter
        /// MLResult_Ok Obtained AE target FPS range successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain AE target FPS range to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetControlAETargetFPSRangeResultMetadata(MlApi.MLHandle handle, [MarshalAs(UnmanagedType.LPArray, SizeConst = 2)] int[] out_data);

        /// <summary>
        /// Get AE state
        /// </summary>
        /// <param name="handle">Camera result metadata handle acquired from MLCameraGetResultMetadata</param>
        /// <param name="out_data">AE state</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain AE state due to invalid input parameter
        /// MLResult_Ok Obtained AE state successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain AE state to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetControlAEStateResultMetadata(MlApi.MLHandle handle, ref MlCameraMetadataTags.MLCameraMetadataControlAEState out_data);

        /// <summary>
        /// Get AWB lock
        /// </summary>
        /// <param name="handle">Camera result metadata handle acquired from MLCameraGetResultMetadata</param>
        /// <param name="out_data">AWB Lock</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain AWB lock due to invalid input parameter
        /// MLResult_Ok Obtained AWB lock successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain AWB lock to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetControlAWBLockResultMetadata(MlApi.MLHandle handle, ref MlCameraMetadataTags.MLCameraMetadataControlAWBLock out_data);

        /// <summary>
        /// Get AWB state
        /// </summary>
        /// <param name="handle">Camera result metadata handle acquired from MLCameraGetResultMetadata</param>
        /// <param name="out_data">AWB state</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain AWB state due to invalid input parameter
        /// MLResult_Ok Obtained AWB state successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain AWB state to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetControlAWBStateResultMetadata(MlApi.MLHandle handle, ref MlCameraMetadataTags.MLCameraMetadataControlAWBState out_data);

        /// <summary>
        /// Get sensor exposure time
        /// </summary>
        /// <param name="handle">Camera result metadata handle acquired from MLCameraGetResultMetadata</param>
        /// <param name="out_data">Sensor exposure time</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain sensor exposure time due to invalid input parameter
        /// MLResult_Ok Obtained sensor exposure time successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain sensor exposure time to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetSensorExposureTimeResultMetadata(MlApi.MLHandle handle, ref long out_data);

        /// <summary>
        /// Get sensor sensitivity
        /// </summary>
        /// <param name="handle">Camera result metadata handle acquired from MLCameraGetResultMetadata</param>
        /// <param name="out_data">Sensor sensitivity</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain sensor sensitivity due to invalid input parameter
        /// MLResult_Ok Obtained sensor sensitivity successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain sensor sensitivity to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetSensorSensitivityResultMetadata(MlApi.MLHandle handle, ref int out_data);

        /// <summary>
        /// Get frame captured timestamp
        /// </summary>
        /// <param name="handle">Camera result metadata handle acquired from MLCameraGetResultMetadata</param>
        /// <param name="out_data">Timestamp in nanoseconds when captured</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain frame captured timestamp due to invalid input parameter
        /// MLResult_Ok Obtained frame captured timestamp successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain frame captured timestamp to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetSensorTimestampResultMetadata(MlApi.MLHandle handle, ref long out_data);

        /// <summary>
        /// Get scaler crop region
        /// </summary>
        /// <param name="handle">Camera result metadata handle acquired from MLCameraGetResultMetadata</param>
        /// <param name="out_data">Cropped region [left, top, right, bottom]</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain scaler crop region due to invalid input parameter
        /// MLResult_Ok Obtained scaler crop region successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain scaler crop region to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetScalerCropRegionResultMetadata(MlApi.MLHandle handle, [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)] int[] out_data);

        /// <summary>
        /// Get sensor frame duration
        /// </summary>
        /// <param name="handle">Camera result metadata handle acquired from MLCameraGetResultMetadata</param>
        /// <param name="out_data">Sensor frame duration</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain sensor frame duration due to invalid input parameter
        /// MLResult_Ok Obtained sensor frame duration successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to obtain sensor frame duration to internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraMetadataGetSensorFrameDurationResultMetadata(MlApi.MLHandle handle, ref long out_data);
    }
}

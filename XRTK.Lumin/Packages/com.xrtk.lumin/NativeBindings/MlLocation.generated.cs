//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlLocation
    {
        /// <summary>
        ///  Location Location
        ///  Location
        /// APIs for device location
        /// </summary>
        /// <remarks>
        /// \
        /// {
        /// </remarks>
        public const int MLResultAPIPrefix_Location = unchecked((int)0xda19 << 16);

        /// <summary>
        /// A set of possible location result codes
        /// @apilevel 4
        /// </summary>
        public enum MLLocationResult : int
        {
            /// <summary>
            /// Unknown location error
            /// </summary>
            MLLocationResult_Unknown = unchecked((int)MLResultAPIPrefix_Location),

            /// <summary>
            /// No connection to server
            /// </summary>
            MLLocationResult_NetworkConnection,

            /// <summary>
            /// No location data received
            /// </summary>
            MLLocationResult_NoLocation,

            /// <summary>
            /// Location provider is not found
            /// </summary>
            MLLocationResult_ProviderNotFound,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLLocationResult_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Mask value to determine the validity of MLLocationData
        /// @apilevel 4
        /// </summary>
        [Flags]
        public enum MLLocationDataMask : int
        {
            /// <summary>
            /// Mask for determinig the validity of the postal code
            /// </summary>
            MLLocationDataMask_HasPostalCode = unchecked((int)1 << (int) 0),
        }

        public const int MLLocation_MaxPostalCodeSize = unchecked((int)64);

        /// <summary>
        /// Location request result
        /// @apilevel 4
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLLocationData
        {
            /// <summary>
            /// Version of this structure
            /// </summary>
            public uint version;

            /// <summary>
            /// Location latitude
            /// </summary>
            public float latitude;

            /// <summary>
            /// Location longitude
            /// </summary>
            public float longitude;

            /// <summary>
            /// Location mask value, see MLLocationDataMask
            /// </summary>
            public uint location_mask;

            /// <summary>
            /// Approximate postal code
            /// </summary>
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
            public string postal_code;
        }

        /// <summary>
        /// Returns an ASCII string for each result code
        /// </summary>
        /// <param name="result_code">MLResult to select the result code</param>
        /// <returns>
        /// ASCII string containing readable version of result code
        /// </returns>
        /// <remarks>
        /// This call returns strings for all of the MLResult and MLLocationResult codes
        /// @apilevel 4
        /// </remarks>
        [DllImport("ml_location", CallingConvention = CallingConvention.Cdecl)]
        [return: MarshalAs(UnmanagedType.LPStr)]
        public static extern string MLLocationGetResultString(MlApi.MLResult result_code);

        /// <summary>
        /// Gets device last known coarse location
        /// @apilevel 4
        /// </summary>
        /// <param name="out_location">Device's last known location This is only valid when the API returns MLResult_Ok</param>
        /// <returns>
        /// MLResult_InvalidParam Failed due to invalid input parameter
        /// MLResult_Ok Obtained location successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed due to internal error
        /// MLLocationResult Specific location error
        /// </returns>
        /// <remarks>
        /// @priv CoarseLocation
        /// </remarks>
        [DllImport("ml_location", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLLocationGetLastCoarseLocation(ref MlLocation.MLLocationData out_location);
    }
}

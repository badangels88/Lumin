//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlMediaExtractor
    {
        /// <summary>
        /// Sample flag output from MLMediaExtractorGetSampleFlags
        /// </summary>
        public enum MLMediaExtractorSampleFlag : int
        {
            MLMediaExtractorSampleFlag_Sync = unchecked((int)1),

            MLMediaExtractorSampleFlag_Encrypted = unchecked((int)2),

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLMediaExtractorSampleFlag_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Seek mode used by MLMediaExtractorSeekTo
        /// </summary>
        public enum MLMediaExtractorSeekPostion : int
        {
            MLMediaExtractorSeekPosition_Previous_Sync,

            MLMediaExtractorSeekPosition_Next_Sync,

            MLMediaExtractorSeekPosition_Closest_Sync,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLMediaExtractorSeekPostion_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// DRM Scheme initialization data
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMediaExtractorDRMSchemeInitData
        {
            /// <summary>
            /// Mimetype of the DRM Scheme initialization data
            /// </summary>
            public IntPtr mime_type;

            /// <summary>
            /// Size of the DRM Scheme initialization data
            /// </summary>
            public Interop.size_t size;

            /// <summary>
            /// DRM Scheme initialization data
            /// </summary>
            public IntPtr data;
        }

        /// <summary>
        /// PSSH entry
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly struct MLMediaExtractorPSSHEntry : IEquatable<MLMediaExtractorPSSHEntry>
        {
            public MLMediaExtractorPSSHEntry(MlMediaTypes.MLPSSHEntry value) => this.Value = value;

            public readonly MlMediaTypes.MLPSSHEntry Value;

            public bool Equals(MLMediaExtractorPSSHEntry other) => Value.Equals(other.Value);

            public override bool Equals(object obj) => obj is MLMediaExtractorPSSHEntry other && Equals(other);

            public override int GetHashCode() => Value.GetHashCode();

            public override string ToString() => Value.ToString();

            public static implicit operator MlMediaTypes.MLPSSHEntry(MLMediaExtractorPSSHEntry from) => from.Value;

            public static implicit operator MLMediaExtractorPSSHEntry(MlMediaTypes.MLPSSHEntry from) => new MLMediaExtractorPSSHEntry(from);

            public static bool operator ==(MLMediaExtractorPSSHEntry left, MLMediaExtractorPSSHEntry right) => left.Equals(right);

            public static bool operator !=(MLMediaExtractorPSSHEntry left, MLMediaExtractorPSSHEntry right) => !left.Equals(right);
        }

        /// <summary>
        /// Create a new
        ///  MediaExtractor
        ///  MediaExtractor
        /// </summary>
        /// <param name="out_handle">A handle to the created</param>
        /// <returns>
        /// MLResult_AllocFailed If MediaExtractor handle cannot be allocated
        /// MLResult_InvalidParam If out_handle is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// If there is an error during creation, it will
        /// return ML_INVALID_HANDLE
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaextractor", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaExtractorCreate(ref MlApi.MLHandle out_handle);

        /// <summary>
        /// Destroy a
        ///  MediaExtractor
        ///  MediaExtractor object
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <returns>
        /// MLResult_InvalidParam If handle is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaextractor", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaExtractorDestroy(MlApi.MLHandle handle);

        /// <summary>
        /// Set a local file path as the data source
        ///  MediaExtractor
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="path">Content path of the file</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// The path should be an absolute path and should
        /// reference a world-readable file
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaextractor", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaExtractorSetDataSourceForPath(MlApi.MLHandle handle, [MarshalAs(UnmanagedType.LPStr)] string path);

        /// <summary>
        /// Set a URI string as the data source
        ///  MediaExtractor
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="uri">C-style string representing the URI complete string</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv Internet
        /// </remarks>
        [DllImport("ml_mediaextractor", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaExtractorSetDataSourceForURI(MlApi.MLHandle handle, [MarshalAs(UnmanagedType.LPStr)] string uri);

        /// <summary>
        /// Set a URI string as the data source
        ///  MediaExtractor
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="uri">C-style string representing the complete URL</param>
        /// <param name="headers">Array of char * headers to be sent</param>
        /// <param name="len">Number of headers passed-in</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv Internet
        /// </remarks>
        [DllImport("ml_mediaextractor", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaExtractorSetDataSourceForURIWithHeaders(MlApi.MLHandle handle, [MarshalAs(UnmanagedType.LPStr)] string uri, out string headers, Interop.size_t len);

        /// <summary>
        /// Set the data source as the file-descriptor to use
        /// </summary>
        /// <param name="handle">MLHandle to the MediaExtractor</param>
        /// <param name="fd">File-descriptor for the file to extract from</param>
        /// <param name="offset">Offset in bytes into the file where the data
        /// to be extracted starts</param>
        /// <param name="length">Length in bytes of the data to be extracted</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// It is the caller's responsibility to close the file descriptor
        /// It is safe to do so as soon as this call returns
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaextractor", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaExtractorSetDataSourceForFD(MlApi.MLHandle handle, int fd, long offset, long length);

        /// <summary>
        /// Sets the data source as user defined media data source
        /// </summary>
        /// <param name="handle">MLHandle to the MediaExtractor</param>
        /// <param name="media_data_source">MLHandle returned by MLMediaDataSourceCreate</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NameNotFound If media_data_source cannot be found
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaextractor", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaExtractorSetMediaDataSource(MlApi.MLHandle handle, MlApi.MLHandle media_data_source);

        /// <summary>
        /// Extract DRM initialization data for a given DRM Scheme if it exists
        ///  MediaExtractor
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="drm_uuid">UUID of the DRM scheme</param>
        /// <param name="out_drm_init_data">DRM initialization data pointer
        /// To release the DRM initialization data upon successful return, call
        /// MLMediaExtractorReleaseDRMInitData</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaextractor", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaExtractorGetDRMInitData(MlApi.MLHandle handle, MlTypes.MLUUID drm_uuid, ref MlMediaExtractor.MLMediaExtractorDRMSchemeInitData out_drm_init_data);

        /// <summary>
        /// Release DRM initialization data which was previously retrieved
        ///  MediaExtractor
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="drm_init_data">DRM initialization data that needs to be released</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaextractor", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaExtractorReleaseDRMInitData(MlApi.MLHandle handle, ref MlMediaExtractor.MLMediaExtractorDRMSchemeInitData drm_init_data);

        /// <summary>
        /// Count the number of tracks found in the data source
        ///  MediaExtractor
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="out_track_count">Number of tracks found in data source</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaextractor", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaExtractorGetTrackCount(MlApi.MLHandle handle, ref ulong out_track_count);

        /// <summary>
        /// Get the track format at the specified index
        ///  MediaExtractor
        ///  MediaFormat handle that represents track format
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="index">Index of the track</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaextractor", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaExtractorGetTrackFormat(MlApi.MLHandle handle, Interop.size_t index, ref MlApi.MLHandle out_track_handle);

        /// <summary>
        /// Select a track for the subsequent operations
        ///  MediaExtractor
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="index">Index of the track</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// Subsequent calls to readSampleData, getSampleTrackIndex and
        /// getSampleTime only retrieve information for the subset of
        /// tracks selected Selecting the same track multiple times has
        /// no effect, the track is only selected once
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaextractor", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaExtractorSelectTrack(MlApi.MLHandle handle, Interop.size_t index);

        /// <summary>
        /// Unselect a track for the subsequent operations
        ///  MediaExtractor
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="index">Index of the track</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// Subsequent calls to readSampleData, getSampleTrackIndex and
        /// getSampleTime only retrieve information for the subset of
        /// tracks selected
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaextractor", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaExtractorUnselectTrack(MlApi.MLHandle handle, Interop.size_t index);

        /// <summary>
        /// All selected tracks seek near the requested time according to the specified mode
        ///  MediaExtractor
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="time_us">Seek time</param>
        /// <param name="mode">Seek mode defined by MLMediaSeekMode</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaextractor", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaExtractorSeekTo(MlApi.MLHandle handle, long time_us, MlMediaCommon.MLMediaSeekMode mode);

        /// <summary>
        /// Advance to the next sample Returns @c false if no more
        /// sample data is available (end of stream)
        ///  MediaExtractor instance
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <returns>
        /// MLResult_InvalidParam If handle is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_FailedTransaction If Advance operation failed
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaextractor", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaExtractorAdvance(MlApi.MLHandle handle);

        /// <summary>
        /// Retrieve the current encoded sample and store it in the byte buffer starting at the given offset
        ///  MediaExtractor
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="byte_buf">Destination byte buffer</param>
        /// <param name="buf_size">Size of the destination buffer</param>
        /// <param name="offset">Offset within the buffer</param>
        /// <param name="out_data_size">Sample size or -1 if no more samples are available</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaextractor", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaExtractorReadSampleData(MlApi.MLHandle handle, ref byte byte_buf, Interop.size_t buf_size, Interop.size_t offset, ref long out_data_size);

        /// <summary>
        /// Return the track index the current sample originates from
        ///  MediaExtractor
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="out_track_index">Track index or -1 if no more samples are available</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaextractor", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaExtractorGetSampleTrackIndex(MlApi.MLHandle handle, ref long out_track_index);

        /// <summary>
        /// Return the current sample's presentation time in microseconds
        ///  MediaExtractor instance
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="out_sample_time">Sample time or -1 if no more samples are available</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaextractor", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaExtractorGetSampleTime(MlApi.MLHandle handle, ref long out_sample_time);

        /// <summary>
        /// Return the current sample's flags
        ///  MediaExtractor instance
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="out_sample_flags">Sample flag defined by MLMediaExtractorSampleFlag, or -1 if on failure</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaextractor", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaExtractorGetSampleFlags(MlApi.MLHandle handle, ref int out_sample_flags);

        /// <summary>
        /// Return the current sample's Crypto info if has encrypted sample
        ///  MediaExtractor instance
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="out_info_handle">On success it returns handle to Crypto info of the sample</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaextractor", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaExtractorGetSampleCryptoInfo(MlApi.MLHandle handle, ref MlApi.MLHandle out_info_handle);

        /// <summary>
        /// Release the Crypto Info
        ///  MediaExtractor instance
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="info_handle">handle to Crypto info that needs to be released</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaextractor", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaExtractorReleaseCryptoInfo(MlApi.MLHandle handle, ref MlApi.MLHandle info_handle);

        /// <summary>
        /// Return an estimate of how much data is presently cached in memoryexpressed in microseconds
        ///  MediaExtractor
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="out_cached_duration">Cached amount or -1 if that
        /// information is unavailable or not applicable (no cache)</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaextractor", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaExtractorGetCachedDuration(MlApi.MLHandle handle, ref long out_cached_duration);

        /// <summary>
        /// Return @c true if we are caching data and the cache has
        /// reached the end of the data stream (for now, a future
        /// seek may of course restart the fetching of data)
        ///  MediaExtractor instance
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// This API only returns a meaningful result if getCachedDuration
        /// indicates the presence of a cache, ie does NOT return -1
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaextractor", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaExtractorHasCacheReachedEOS(MlApi.MLHandle handle);

        /// <summary>
        /// Get the Number of PSSH info if present
        ///  MediaExtractor instance
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="out_index">On successful return contains number of PSSH entries</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// The PSSH(Protection System Specific Header)
        /// contains a UUID representing a DRM scheme along with opaque data blob
        /// used for creating crypto session, which in turn used to configure codec
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaextractor", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaExtractorGetPSSHInfoCount(MlApi.MLHandle handle, ref Interop.size_t out_index);

        /// <summary>
        /// Get the PSSH info if present The PSSH(Protection System Specific Header)
        /// contains a UUID representing a DRM scheme along with opaque data blob
        /// used for creating crypto session, which in turn used to configure codec
        ///  MediaExtractor instance
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="index">Index of the PSSH info data element being retrieved</param>
        /// <param name="out_pssh_entry">Pointer to the PSSH info data element being retrieved</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// Upon successful return, if a MLMediaExtractorPSSHEntry is returned,
        /// same should be released by calling MLMediaExtractorReleasePSSHInfo
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaextractor", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaExtractorGetPSSHInfo(MlApi.MLHandle handle, Interop.size_t index, ref MlMediaExtractor.MLMediaExtractorPSSHEntry out_pssh_entry);

        /// <summary>
        /// Clear the PSSH info data
        ///  MediaExtractor instance
        /// </summary>
        /// <param name="handle">MLHandle to the</param>
        /// <param name="pssh_entry">Pointer to the PSSH info data element that needs to be released</param>
        /// <returns>
        /// MLResult_InvalidParam If one of parameters is invalid
        /// MLResult_Ok If operation succeeded
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// Clears the entire cached PSSH info data in the library
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaextractor", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaExtractorReleasePSSHInfo(MlApi.MLHandle handle, ref MlMediaExtractor.MLMediaExtractorPSSHEntry pssh_entry);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlSnapshot
    {
        /// <summary>
        ///  Perception
        /// </summary>
        /// <remarks>
        /// \
        /// {
        /// </remarks>
        public const int MLResultAPIPrefix_Snapshot = unchecked((int)0x87b8 << 16);

        /// <summary>
        /// Return values for Snapshot API calls
        /// </summary>
        public enum MLSnapshotResult : int
        {
            /// <summary>
            /// Pose not found
            /// </summary>
            MLSnapshotResult_PoseNotFound = unchecked((int)MLResultAPIPrefix_Snapshot),
        }

        /// <summary>
        /// Opaque snapshot of system state
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly struct MLSnapshot : IEquatable<MLSnapshot>
        {
            private readonly IntPtr _handle;

            public MLSnapshot(IntPtr handle) => _handle = handle;

            public IntPtr Handle => _handle;

            public bool Equals(MLSnapshot other) => _handle.Equals(other._handle);

            public override bool Equals(object obj) => obj is MLSnapshot other && Equals(other);

            public override int GetHashCode() => _handle.GetHashCode();

            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));

            public static bool operator ==(MLSnapshot left, MLSnapshot right) => left.Equals(right);

            public static bool operator !=(MLSnapshot left, MLSnapshot right) => !left.Equals(right);
        }

        /// <summary>
        /// Get transform between world origin and the coordinate frame `id'
        /// </summary>
        /// <param name="snapshot">A snapshot of tracker state Can be obtained with MLPerceptionGetSnapshot</param>
        /// <param name="id">Look up the transform between the current origin and this coordinate frame id</param>
        /// <param name="out_transform">Valid pointer to a MLTransform To be filled out with requested transform data</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain transform due to invalid parameter
        /// MLResult_Ok Obtained transform successfully
        /// MLResult_UnspecifiedFailure Failed to obtain transform due to internal error
        /// MLSnapshotResult_PoseNotFound Coordinate Frame is valid, but not found in the current pose snapshot
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLSnapshotGetTransform(MlSnapshot.MLSnapshot snapshot, in MlCoordinateFrameUid.MLCoordinateFrameUID id, ref MlTypes.MLTransform out_transform);

        /// <summary>
        /// Returns an ASCII string representation for each result code
        /// </summary>
        /// <param name="result_code">MLResult type to be converted to string</param>
        /// <returns>
        /// ASCII string containing readable version of the result code
        /// </returns>
        /// <remarks>
        /// This call returns strings for all of the global MLResult and
        /// MLSnapshotResult codes
        /// @priv None
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        [return: MarshalAs(UnmanagedType.LPStr)]
        public static extern string MLSnapshotGetResultString(MlApi.MLResult result_code);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlTypes
    {
        /// <summary>
        /// 2D vector represented with X and Y floats
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLVec2f
        {
            public float x;

            public float y;
        }

        /// <summary>
        /// Internal structure used to simplify access of MLVec3f Do not create
        /// this structure directly and always use MLVec3f instead
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLXYZf
        {
            public float x;

            public float y;

            public float z;
        }

        /// <summary>
        /// 3D vector represented with X, Y, and Z floats
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLVec3f
        {
            [StructLayout(LayoutKind.Explicit, CharSet = CharSet.Ansi)]
            public struct MLVec3funion
            {
                [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
                public struct MLVec3funionstruct
                {
                    public float x;

                    public float y;

                    public float z;
                }

                [FieldOffset(0)]
                public MlTypes.MLXYZf xyz;

                [FieldOffset(0)]
                [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]
                public float[] values;
            }
        }

        /// <summary>
        /// Quaternion stored as X, Y, Z, W floats
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLQuaternionf
        {
            [StructLayout(LayoutKind.Explicit, CharSet = CharSet.Ansi)]
            public struct MLQuaternionfunion
            {
                [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
                public struct MLQuaternionfunionstruct
                {
                    public float x;

                    public float y;

                    public float z;

                    public float w;
                }

                /// <summary>
                /// Values of the quaternions laid out as X, Y, Z, W
                /// </summary>
                [FieldOffset(0)]
                [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]
                public float[] values;
            }
        }

        /// <summary>
        /// Information used to transform from one coordinate frame to another
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLTransform
        {
            /// <summary>
            /// The rotation of the coordinate frame to apply after the translation
            /// </summary>
            public MlTypes.MLQuaternionf rotation;

            /// <summary>
            /// The translation to apply to get to the coordinate frame in the proper
            /// location
            /// </summary>
            public MlTypes.MLVec3f position;
        }

        /// <summary>
        /// An arbitrary 4x4 matrix represented with an array of floats
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMat4f
        {
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 16)]
            public float[] matrix_colmajor;
        }

        /// <summary>
        /// A 2D float rectangle
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLRectf
        {
            public float x;

            public float y;

            public float w;

            public float h;
        }

        /// <summary>
        /// A 2D integer rectangle
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLRecti
        {
            public int x;

            public int y;

            public int w;

            public int h;
        }

        /// <summary>
        /// Color represented by 4 unsigned bytes
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLColor32
        {
            [StructLayout(LayoutKind.Explicit, CharSet = CharSet.Ansi)]
            public struct MLColor32union
            {
                [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
                public struct MLColor32unionstruct
                {
                    public byte a;

                    public byte b;

                    public byte g;

                    public byte r;
                }

                [FieldOffset(0)]
                public uint rgba;
            }
        }

        /// <summary>
        /// Color represented by 4 floats
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLColor4f
        {
            public float r;

            public float g;

            public float b;

            public float a;
        }

        /// <summary>
        /// Universally Unique Identifier
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLUUID
        {
            [StructLayout(LayoutKind.Explicit, CharSet = CharSet.Ansi)]
            public struct MLUUIDunion
            {
                [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
                public struct MLUUIDunionstruct
                {
                    public uint time_low;

                    public ushort time_mid;

                    public ushort time_hi_and_version;

                    public byte clock_seq_hi_and_reserved;

                    public byte clock_seq_low;

                    [MarshalAs(UnmanagedType.LPArray, SizeConst = 6)]
                    public byte[] node;
                }

                [FieldOffset(0)]
                [MarshalAs(UnmanagedType.LPArray, SizeConst = 16)]
                public byte[] data;
            }
        }
    }
}

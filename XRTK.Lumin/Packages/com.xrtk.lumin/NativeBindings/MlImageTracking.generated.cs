//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlImageTracking
    {
        /// <summary>
        /// Identifies the status of an Image Target
        /// </summary>
        /// <remarks>
        /// Each MLImageTrackerTargetResult will include a MLImageTrackerTargetStatus
        /// giving the current status of the target
        /// </remarks>
        public enum MLImageTrackerTargetStatus : int
        {
            /// <summary>
            /// Image Target is tracked
            /// </summary>
            /// <remarks>
            /// The Image Tracker system will provide a 6 DOF pose when queried using
            /// MLSnapshotGetTransform function
            /// </remarks>
            MLImageTrackerTargetStatus_Tracked,

            /// <summary>
            /// Image Target is tracked with low confidence
            /// </summary>
            /// <remarks>
            /// The Image Tracker system will still provide a 6 DOF pose But this
            /// pose might be inaccurate and might have jitter When the tracking is
            /// unreliable one of the following two events will happen quickly : Either the
            /// tracking will recover to MLImageTrackerTargetStatus_Tracked or tracking
            /// will be lost and the status will change to MLImageTrackerTargetStatus_NotTracked
            /// </remarks>
            MLImageTrackerTargetStatus_Unreliable,

            /// <summary>
            /// Image Target is lost
            /// </summary>
            /// <remarks>
            /// The Image Tracker system will not report any pose for this target Querying
            /// for the pose using MLSnapshotGetTransform will return @c false
            /// </remarks>
            MLImageTrackerTargetStatus_NotTracked,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLImageTrackerTargetStatus_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Identifies the Image format
        /// </summary>
        /// <remarks>
        /// When adding image targets to the Image Tracker using
        /// MLImageTrackerAddTargetFromArray specify the image format using this enum
        /// For a pixel at (x, y) the channel c data of that pixel is at the position
        /// given by [(width * y + x)*channels + c]
        /// </remarks>
        public enum MLImageTrackerImageFormat : int
        {
            /// <summary>
            /// Grayscale, range: [0, 255]
            /// </summary>
            MLImageTrackerImageFormat_Grayscale,

            /// <summary>
            /// RGB, range: [0, 255]
            /// </summary>
            MLImageTrackerImageFormat_RGB,

            /// <summary>
            /// RGBA, range: [0, 255]
            /// </summary>
            MLImageTrackerImageFormat_RGBA,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLImageTrackerImageFormat_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Represent the list of Image Tracker settings
        /// </summary>
        /// <remarks>
        /// This will be used to initialize the Image Tracker system
        /// MLImageTrackerInitSettings can be used to get the default values that will
        /// be used by the Image Tracker system
        /// </remarks>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLImageTrackerSettings
        {
            /// <summary>
            /// Maximum number of targets that need to be actively tracked at one time
            /// </summary>
            /// <remarks>
            /// Image Tracker looks for new images to track in the environment only if it
            /// is not already tracking the maximum number of simultaneous targets
            /// This helps reduce load on the CPU
            /// For example, if you are only interested in recognizing and tracking two
            /// targets from your image set at any one time, set this parameter to 2
            /// Higher values will work, but Image Tracker would waste CPU resources
            /// needlessly looking for and tracking images that are not going to be used
            /// The valid range for this parameter is 1 to 25
            /// </remarks>
            public uint max_simultaneous_targets;

            /// <summary>
            /// If @c true, image tracker will detect and track targets
            /// </summary>
            /// <remarks>
            /// Image Tracker should be disabled when app is paused and enabled when app
            /// resumes
            /// When enabled Image Tracker will gain access to the camera and start
            /// tracking images Enabling image tracker is expensive, takes about 1500ms
            /// on the average
            /// When disabled Image Tracker will release the camera and stop tracking
            /// images Internal state of the tracker will be maintained (ie list of
            /// active/inactive targets and their target_handles)
            /// </remarks>
            [MarshalAs(UnmanagedType.U1)]
            public bool enable_image_tracking;
        }

        /// <summary>
        /// Represents the settings of a Image Target
        /// </summary>
        /// <remarks>
        /// All fields are required for an Image Target to be tracked
        /// </remarks>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLImageTrackerTargetSettings
        {
            /// <summary>
            /// Name of the target
            /// </summary>
            /// <remarks>
            /// This name has to be unique across all targets added to the Image Tracker
            /// Caller should allocate memory for this
            /// Encoding should be in UTF8
            /// This will be copied internally
            /// </remarks>
            [MarshalAs(UnmanagedType.LPStr)]
            public string name;

            /// <summary>
            /// longer_dimension Size of longer side of the Image Target in scene units
            /// </summary>
            /// <remarks>
            /// The scene units here refers to the units used in the game engine
            /// This value does not affect the performance of the detection or tracking
            /// </remarks>
            public float longer_dimension;

            /// <summary>
            /// Set this to true to improve detection for stationary targets
            /// </summary>
            /// <remarks>
            /// An Image Target is a stationary target if its position in the physical
            /// world does not change
            /// This is best suited for cases where the target is stationary and when the
            /// local geometry (environment surrounding the target) is planar
            /// When in doubt set this to false
            /// </remarks>
            [MarshalAs(UnmanagedType.U1)]
            public bool is_stationary;

            /// <summary>
            /// Set this to @c true to track the image target
            /// </summary>
            /// <remarks>
            /// Disabling the target when not needed marginally improves the tracker CPU
            /// performance
            /// This is best suited for cases where the target is temporarily not needed
            /// If the target no longer needs to be tracked it is best to use
            /// MLImageTrackerRemoveTarget
            /// </remarks>
            [MarshalAs(UnmanagedType.U1)]
            public bool is_enabled;
        }

        /// <summary>
        /// Represents the static information about an Image Target
        /// </summary>
        /// <remarks>
        /// Populate this structure with MLImageTrackerGetTargetStaticData
        /// </remarks>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLImageTrackerTargetStaticData
        {
            /// <summary>
            /// MLCoordinateFrameUID of the target
            /// </summary>
            /// <remarks>
            /// This should be passed to the MLSnapshotGetTransform function to get
            /// the 6 DOF pose of the target
            /// First call MLImageTrackerGetTargetResult to check to see if the target is
            /// being tracked If it is not being tracked then the call to
            /// MLSnapshotGetTransform will return @c false
            /// </remarks>
            public MlCoordinateFrameUid.MLCoordinateFrameUID coord_frame_target;
        }

        /// <summary>
        /// Represents an Image Target result
        /// </summary>
        /// <remarks>
        /// The result for every Image Target added to the Image Tracker can be queried
        /// using MLImageTrackerGetTargetResult
        /// </remarks>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLImageTrackerTargetResult
        {
            /// <summary>
            /// Status of the target
            /// </summary>
            /// <remarks>
            /// Every target will have an associated status indicating the current tracking status
            /// </remarks>
            public MlImageTracking.MLImageTrackerTargetStatus status;
        }

        /// <summary>
        /// Create the Image Tracker
        /// </summary>
        /// <param name="tracker_settings">List of Image Tracker settings</param>
        /// <param name="out_handle">MLHandle to the created Image Tracker Only valid if the return
        /// value is MLResult_Ok</param>
        /// <returns>
        /// MLResult_InvalidParam Image tracker was not created due to invalid out_handle
        /// MLResult_Ok Image tracker was created successfully
        /// MLResult_PrivilegeDenied Image tracker was not created due to lack of privilege(s)
        /// MLResult_UnspecifiedFailure Image tracker was not created due to an internal error
        /// </returns>
        /// <remarks>
        /// This can be called only after starting the Perception system using
        /// MLPerceptionStartup and HeadTracker using MLHeadTrackingCreate
        /// Pass a nullptr for @p tracker_settings to use the default settings Override
        /// the default settings by passing a MLImageTrackerSettings struct as input
        /// This function should be called only once Do not create multiple Image Trackers
        /// This function is time consuming and will block the calling thread Current
        /// estimate for the execution time is 500ms - 6000ms
        /// On an average cold start takes about 6000ms, otherwise it should be
        /// about 1500ms
        /// @priv CameraCapture, LowLatencyLightwear
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLImageTrackerCreate(in MlImageTracking.MLImageTrackerSettings tracker_settings, ref MlApi.MLHandle out_handle);

        /// <summary>
        /// Update the Image Tracker with new settings
        /// </summary>
        /// <param name="tracker_handle">MLHandle to the Image Tracker created by MLImageTrackerCreate</param>
        /// <param name="tracker_settings">List of Image Tracker settings</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to update the settings due to invalid tracker_settings
        /// MLResult_Ok Successfully updated the Image Tracker settings
        /// MLResult_PrivilegeDenied Failed to update the settings due to lack of privilege(s)
        /// MLResult_UnspecifiedFailure Failed to update the settings due to an internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture, LowLatencyLightwear
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLImageTrackerUpdateSettings(MlApi.MLHandle tracker_handle, in MlImageTracking.MLImageTrackerSettings tracker_settings);

        /// <summary>
        /// Destroy the Image Tracker
        /// </summary>
        /// <param name="tracker_handle">MLHandle to the Image Tracker created by MLImageTrackerCreate</param>
        /// <returns>
        /// MLResult_Ok Successfully destroyed the Image Tracker
        /// MLResult_PrivilegeDenied  Failed to destroy the tracker due to lack of privilege(s)
        /// MLResult_UnspecifiedFailure Failed to destroy the tracker due to an internal error
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture, LowLatencyLightwear
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLImageTrackerDestroy(MlApi.MLHandle tracker_handle);

        /// <summary>
        /// Sets the values of an MLImageTrackerSettings structure to defaults
        /// </summary>
        /// <param name="out_settings">Pointer to MLImageTrackerSettings structure that will be initialized</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to initialise the settings due to invalid out_settings
        /// MLResult_Ok Successfully initialised out_settings with the default values
        /// MLResult_UnspecifiedFailure Failed to initialise the settings due to an internal error
        /// </returns>
        /// <remarks>
        /// Call this function to get the default MLImageTrackerSettings used by
        /// the Image Tracker system
        /// @priv None
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLImageTrackerInitSettings(ref MlImageTracking.MLImageTrackerSettings out_settings);

        /// <summary>
        /// Add an Image Target from an image file
        /// </summary>
        /// <param name="tracker_handle">MLHandle to the Image Tracker created by MLImageTrackerCreate</param>
        /// <param name="target_settings">List of settings to be used for the new target</param>
        /// <param name="path">The Unix-style path of the file</param>
        /// <param name="out_handle">A target_handle to the created Image Target Only valid if the
        /// return value is MLResult_Ok</param>
        /// <returns>
        /// MLResult_Ok Successfully added the target to the Image Tracker
        /// MLResult_UnspecifiedFailure Failed to add the target due to invalid argument(s)
        /// MLResult_UnspecifiedFailure Failed to add the target due to an internal error
        /// </returns>
        /// <remarks>
        /// "Create" and "Add" a new target to the Image Tracker from an image file
        /// Supported image formats : jpg
        /// Image should not be larger than 2MB
        /// Image Tracker will start searching for this target once created
        /// This function is time consuming and will block the calling thread Time taken
        /// depends on the size and quality of the image
        /// @priv None
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLImageTrackerAddTargetFromImageFile(MlApi.MLHandle tracker_handle, in MlImageTracking.MLImageTrackerTargetSettings target_settings, [MarshalAs(UnmanagedType.LPStr)] string path, ref MlApi.MLHandle out_handle);

        /// <summary>
        /// Add a target from an array
        /// </summary>
        /// <param name="tracker_handle">MLHandle to the Image Tracker created by MLImageTrackerCreate</param>
        /// <param name="target_settings">List of settings to be used for the new target</param>
        /// <param name="image_data">Pointer to the array of pixel data</param>
        /// <param name="width">Width of the image</param>
        /// <param name="height">Height of the image</param>
        /// <param name="format">Specify the image format using MLImageTrackerImageFormat</param>
        /// <param name="out_handle">A target_handle to the created Image Target Only valid if the
        /// return value is MLResult_Ok</param>
        /// <returns>
        /// MLResult_Ok Successfully added the target to the Image Tracker
        /// MLResult_UnspecifiedFailure Failed to add the target due to invalid argument(s)
        /// MLResult_UnspecifiedFailure Failed to add the target due to an internal error
        /// </returns>
        /// <remarks>
        /// "Create" 
        /// &amp;
        /// "Add" a new target to the image tracker from an array
        /// The data should be in the form of a pointer to unsigned char array
        /// Supported formats: Grayscale, RGB, 
        /// &amp;
        /// RGBA, should be specified using the
        /// MLImageTrackerImageFormat enum
        /// For a pixel at (x,y) the channel c data of that pixel is at the position
        /// given by [(width * y + x)*channels + c]
        /// The calling function owns the pointer, image_data will be copied internally
        /// Image Tracker will start searching for this target once created
        /// This function is time consuming and will block the calling thread Time taken
        /// depends on the size and quality of the image
        /// @priv None
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLImageTrackerAddTargetFromArray(MlApi.MLHandle tracker_handle, in MlImageTracking.MLImageTrackerTargetSettings target_settings, IntPtr image_data, uint width, uint height, MlImageTracking.MLImageTrackerImageFormat format, ref MlApi.MLHandle out_handle);

        /// <summary>
        /// Remove an Image Target from the Image Tracker
        /// </summary>
        /// <param name="tracker_handle">MLHandle to a Image Tracker created by MLImageTrackerCreate</param>
        /// <param name="target_handle">MLHandle to a Image Target that needs to be removed</param>
        /// <returns>
        /// MLResult_Ok Successfully removed the target from the Image Tracker
        /// MLResult_UnspecifiedFailure Failed to remove the target due to an internal error
        /// </returns>
        /// <remarks>
        /// "Remove" and "destroy" a previously added Image Target from the Image Tracker
        /// Image Tracker will stop searching for this Image Target once its destroyed
        /// @priv None
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLImageTrackerRemoveTarget(MlApi.MLHandle tracker_handle, MlApi.MLHandle target_handle);

        /// <summary>
        /// Update the settings of an Image Target
        /// </summary>
        /// <param name="tracker_handle">MLHandle to a Image Tracker created by MLImageTrackerCreate</param>
        /// <param name="target_handle">MLHandle to a Image Target whose settings needs to be updated</param>
        /// <param name="target_settings">List of the updated settings to be used for the new target</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to update the target setting due to invalid target_settings
        /// MLResult_Ok Successfully updated the Target settings
        /// MLResult_UnspecifiedFailure Failed to update the target setting due to an internal error
        /// </returns>
        /// <remarks>
        /// Updates the settings of an Image Target that is already added to the Image Tracker system
        /// @priv None
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLImageTrackerUpdateTargetSettings(MlApi.MLHandle tracker_handle, MlApi.MLHandle target_handle, in MlImageTracking.MLImageTrackerTargetSettings target_settings);

        /// <summary>
        /// Get the static data for an Image Target in the Image Tracker
        /// </summary>
        /// <param name="tracker_handle">MLHandle to an Image Tracker created by MLImageTrackerCreate</param>
        /// <param name="target_handle">MLHandle to an Image Target whose static data needs to be retrieved</param>
        /// <param name="out_data">Pointer to MLImageTrackerTargetStaticData which contains the static data</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to fetch the static data due to invalid out_data
        /// MLResult_Ok Successfully fetched the static data for specified target
        /// MLResult_UnspecifiedFailure Failed to fetch the static data due to an internal error
        /// </returns>
        /// <remarks>
        /// Use the MLCoordinateFrameUID included in @p out_data to get the
        /// 6DOF pose from the MLSnapshotGetTransform function
        /// First call MLImageTrackerGetTargetResult to check to see if the target is
        /// being tracked If it is not being tracked then the call to MLSnapshotGetTransform will return @c false
        /// @priv None
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLImageTrackerGetTargetStaticData(MlApi.MLHandle tracker_handle, MlApi.MLHandle target_handle, ref MlImageTracking.MLImageTrackerTargetStaticData out_data);

        /// <summary>
        /// Get the result for a Image Target from the Image Tracker
        /// </summary>
        /// <param name="tracker_handle">MLHandle to a Image Tracker created by MLImageTrackerCreate</param>
        /// <param name="target_handle">MLHandle to a Image Target whose result needs to be retrieved</param>
        /// <param name="out_data">Pointer to MLImageTrackerTargetResult which contains the results</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to fetch the target result due to invalid out_data
        /// MLResult_Ok Successfully fetched the target result for specified target
        /// MLResult_UnspecifiedFailure Failed to fetch the target result due to an internal error
        /// </returns>
        /// <remarks>
        /// This function should always be called after MLPerceptionGetSnapshot
        /// The result returned is from the result cached during the last call to MLPerceptionGetSnapshot
        /// Query for the pose only when MLImageTrackerTargetResultstatus != MLImageTrackerTargetStatus_NotTracked
        /// @priv None
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLImageTrackerGetTargetResult(MlApi.MLHandle tracker_handle, MlApi.MLHandle target_handle, ref MlImageTracking.MLImageTrackerTargetResult out_data);
    }
}

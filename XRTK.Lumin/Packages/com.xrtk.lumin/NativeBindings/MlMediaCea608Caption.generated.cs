//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlMediaCea608Caption
    {
        /// <summary>
        /// Cea608 Caption Dimension constants
        /// @apilevel 2
        /// </summary>
        public enum MLCea608CaptionDimension : int
        {
            MLCea608_CCMaxRows = unchecked((int)15),

            MLCea608_CCMaxCols = unchecked((int)32),

            MLCea608_CCMaxRowsPlus2 = unchecked((int)17),

            MLCea608_CCMaxColsPlus2 = unchecked((int)34),

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLCea608_CCMaxRowsCols_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Cea608 caption color code
        /// @apilevel 2
        /// </summary>
        public enum MLCea608CaptionColor : int
        {
            MLCea608CaptionColor_White = unchecked((int)0),

            MLCea608CaptionColor_Green = unchecked((int)1),

            MLCea608CaptionColor_Blue = unchecked((int)2),

            MLCea608CaptionColor_Cyan = unchecked((int)3),

            MLCea608CaptionColor_Red = unchecked((int)4),

            MLCea608CaptionColor_Yellow = unchecked((int)5),

            MLCea608CaptionColor_Magenta = unchecked((int)6),

            MLCea608CaptionColor_Invalide = unchecked((int)7),

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLCea608CaptionColor_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Cea608 caption style code
        /// @apilevel 2
        /// </summary>
        public enum MLCea608CaptionStyle : int
        {
            MLCea608CaptionStyle_Italics = unchecked((int)0x00000001),

            MLCea608CaptionStyle_Underline = unchecked((int)0x00000002),

            MLCea608CaptionStyle_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Cea608 caption style and color
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLCea608CaptionStyleColor
        {
            public uint style;

            public uint color;
        }

        /// <summary>
        /// Cea608 caption preamble address code
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLCea608CaptionPAC
        {
            public MlMediaCea608Caption.MLCea608CaptionStyleColor styleColor;

            public uint row;

            public uint col;
        }

        /// <summary>
        /// Cea608 caption line structure
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLCea608CaptionLine
        {
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 34)]
            public string displayChars;

            [MarshalAs(UnmanagedType.LPArray, SizeConst = 34)]
            public IntPtr[] midRowStyles;

            [MarshalAs(UnmanagedType.LPArray, SizeConst = 34)]
            public IntPtr[] pacStyles;
        }

        /// <summary>
        /// Cea608 caption segment structure
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLCea608CaptionSegment
        {
            public uint version;

            [MarshalAs(UnmanagedType.LPArray, SizeConst = 17)]
            public IntPtr[] ccLine;
        }

        /// <summary>
        /// Cea608 caption color code
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly struct MLClosedCaptionColor : IEquatable<MLClosedCaptionColor>
        {
            public MLClosedCaptionColor(MlMediaCea608Caption.MLCea608CaptionColor value) => this.Value = value;

            public readonly MlMediaCea608Caption.MLCea608CaptionColor Value;

            public bool Equals(MLClosedCaptionColor other) => Value.Equals(other.Value);

            public override bool Equals(object obj) => obj is MLClosedCaptionColor other && Equals(other);

            public override int GetHashCode() => Value.GetHashCode();

            public override string ToString() => Value.ToString();

            public static implicit operator MlMediaCea608Caption.MLCea608CaptionColor(MLClosedCaptionColor from) => from.Value;

            public static implicit operator MLClosedCaptionColor(MlMediaCea608Caption.MLCea608CaptionColor from) => new MLClosedCaptionColor(from);

            public static bool operator ==(MLClosedCaptionColor left, MLClosedCaptionColor right) => left.Equals(right);

            public static bool operator !=(MLClosedCaptionColor left, MLClosedCaptionColor right) => !left.Equals(right);
        }

        /// <summary>
        /// Create internal closed caption parser object
        /// @apilevel 2
        /// </summary>
        /// <param name="out_handle">A pointer to an MLHandle which will contain the handle to the CC parser
        /// If this operation fails, out_handle will be ML_INVALID_HANDLE</param>
        /// <returns>
        /// MLResult_Ok Internal closed caption parser object was created successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_media_ccparser", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaCCParserCreate(ref MlApi.MLHandle out_handle);

        /// <summary>
        /// Return closed caption for display
        /// @apilevel 2
        /// </summary>
        /// <param name="cc_handle">A handle to a CC parser</param>
        /// <param name="subtitle_data">data of MLMediaPlayerSubtitleData structure returned from
        /// MLMediaPlayerGetSubtitleEx function</param>
        /// <param name="subtitle_data_size">data_size of MLMediaPlayerSubtitleData structure returned
        /// from MLMediaPlayerGetSubtitleEx function</param>
        /// <param name="out_cc_seg">The returned MLCea608CaptionSegment pointer for CC display</param>
        /// <returns>
        /// MLResult_Ok CC is ready to display and content is stored in out_ccSeg
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLMediaGenericResult_NoInit CC parser was not properly built or initialized
        /// MLMediaGenericResult_NotEnoughData more data is required and no displayable CC for now
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_media_ccparser", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaCCParserGetDisplayable(MlApi.MLHandle cc_handle, ref byte subtitle_data, int subtitle_data_size, ref MlMediaCea608Caption.MLCea608CaptionSegment out_cc_seg);

        /// <summary>
        /// Release memory held by last displayable CC segment
        /// @apilevel 2
        /// </summary>
        /// <param name="cc_handle">A handle to a CC parser</param>
        /// <param name="cc_seg">MLCea608CaptionSegment pointer holding last displayable CC</param>
        /// <returns>
        /// MLResult_Ok memeory was released successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_media_ccparser", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaCCParserReleaseSegment(MlApi.MLHandle cc_handle, ref MlMediaCea608Caption.MLCea608CaptionSegment cc_seg);

        /// <summary>
        /// Release internal CC parser object
        /// @apilevel 2
        /// </summary>
        /// <param name="cc_handle">A handle to a CC parser</param>
        /// <returns>
        /// MLResult_Ok internal CC parser object was released successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_media_ccparser", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaCCParserDestroy(MlApi.MLHandle cc_handle);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlIdentity
    {
        /// <summary>
        /// MLIdentityAttributeKey identifies an attribute in a user profile
        /// Attributes that were not known at the time the library was built, are marked as
        /// MLIdentityAttributeKey_Unknown
        /// </summary>
        public enum MLIdentityAttributeKey : int
        {
            /// <summary>
            /// Unknown
            /// </summary>
            MLIdentityAttributeKey_Unknown,

            /// <summary>
            /// Given name
            /// </summary>
            MLIdentityAttributeKey_GivenName,

            /// <summary>
            /// Family name
            /// </summary>
            MLIdentityAttributeKey_FamilyName,

            /// <summary>
            /// Email
            /// </summary>
            MLIdentityAttributeKey_Email,

            /// <summary>
            /// Bio
            /// </summary>
            MLIdentityAttributeKey_Bio,

            /// <summary>
            /// Phone number
            /// </summary>
            MLIdentityAttributeKey_PhoneNumber,

            /// <summary>
            /// 2D avatar
            /// </summary>
            MLIdentityAttributeKey_Avatar2D,

            /// <summary>
            /// 3D avatar
            /// </summary>
            MLIdentityAttributeKey_Avatar3D,

            /// <summary>
            /// The number of keys
            /// </summary>
            MLIdentityAttributeKey_Count,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLIdentityAttributeKey_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        public const int MLResultAPIPrefix_Identity = unchecked((int)0x7d4d << 16);

        /// <summary>
        /// Return values for Identity API calls
        /// </summary>
        public enum MLIdentityResult : int
        {
            /// <summary>
            /// The local service is not running, or it cannot be accessed
            /// </summary>
            MLIdentityResult_FailedToConnectToLocalService = unchecked((int)MLResultAPIPrefix_Identity),

            /// <summary>
            /// The service failed to access the cloud service
            /// Either there is no IP connection or the cloud service is not available
            /// </summary>
            MLIdentityResult_FailedToConnectToCloudService,

            /// <summary>
            /// The user does not have the required privileges to use the requesting service
            /// or the refresh token used by the service is invalid
            /// </summary>
            MLIdentityResult_CloudAuthentication,

            /// <summary>
            /// Signature verification failed on the information returned by the cloud or a parsing error occurred
            /// </summary>
            MLIdentityResult_InvalidInformationFromCloud,

            /// <summary>
            /// The operation failed because the user is not logged in to the cloud
            /// </summary>
            MLIdentityResult_NotLoggedIn,

            /// <summary>
            /// The user's credentials have expired
            /// </summary>
            MLIdentityResult_ExpiredCredentials,

            /// <summary>
            /// Failed to retrieve attributes of the user's profile
            /// </summary>
            MLIdentityResult_FailedToGetUserProfile,

            /// <summary>
            /// The cloud rejected the operation because the user is not authorized to execute it
            /// </summary>
            MLIdentityResult_Unauthorized,

            /// <summary>
            /// The device failed to authenticate the server
            /// </summary>
            MLIdentityResult_CertificateError,

            /// <summary>
            /// The cloud rejected the operation
            /// </summary>
            MLIdentityResult_RejectedByCloud,

            /// <summary>
            /// The user is already logged in
            /// </summary>
            MLIdentityResult_AlreadyLoggedIn,

            /// <summary>
            /// The cloud does not support modification of an attribute value
            /// </summary>
            MLIdentityResult_ModifyIsNotSupported,

            /// <summary>
            /// The device is not connected to a network
            /// </summary>
            MLIdentityResult_NetworkError,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLIdentityResult_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// MLIdentityAttribute represents an attribute of a user's profile
        /// (for instance: name, address, email) Each attribute has a name (represented by key and value)
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLIdentityAttribute
        {
            /// <summary>
            /// Identity attribute
            /// </summary>
            public MlIdentity.MLIdentityAttributeKey key;

            /// <summary>
            /// Name
            /// </summary>
            [MarshalAs(UnmanagedType.LPStr)]
            public string name;

            /// <summary>
            /// Value
            /// </summary>
            [MarshalAs(UnmanagedType.LPStr)]
            public string value;

            /// <summary>
            /// /c true if requested /c false otherwise
            /// </summary>
            [MarshalAs(UnmanagedType.U1)]
            public bool is_requested;

            /// <summary>
            /// /c true if granted /c false otherwise
            /// </summary>
            [MarshalAs(UnmanagedType.U1)]
            public bool is_granted;
        }

        /// <summary>
        /// MLIdentityProfile represents a set of attribute of a user's profile
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLIdentityProfile
        {
            /// <summary>
            /// The number of MLIdentityAttribute structures pointed to by attribute_ptrs
            /// </summary>
            public uint attribute_count;

            /// <summary>
            /// An array of MLIdentityAttributes containing user profile information
            /// </summary>
            public IntPtr attribute_ptrs;
        }

        /// <summary>
        /// MLIdentityGetAttributeNames is a blocking function that access the cloud and
        /// returns a MLIdentityProfile structure containing all of the attributes that are available
        /// for the Audience of the calling service
        /// </summary>
        /// <param name="out_profile">@parblock A pointer to a MLIdentityProfile pointer that is allocated by the library
        /// In each attribute of the returned profile the name field will point to the name of the
        /// attribute, the value field will point to an empty string and the is_requested and is_granted
        /// flags will both be @c false</param>
        /// <returns>
        /// MLResult_AllocFailed The operation failed to allocate memory
        /// MLResult_InvalidParam out_profile was 0 (null)
        /// MLResult_Ok The operation completed successfully
        /// MLResult_PrivilegeDenied The caller does not have the IdentityRead privilege
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLIdentityResult An identity specific failure occurred during the operation
        /// </returns>
        /// <remarks>
        /// The library deduces the Audience being requested from the name of the calling service
        /// This method does not request access to the values of the attributes from the user and does
        /// not return the values of these attributes Only the names are provided
        /// In order to request access for the attributes values and to receive them, set the
        /// is_requested field of each required attribute in the profile that is returned and call
        /// one of the methods: MLIdentityRequestAttributeValues or MLIdentityRequestAttributeValuesAsync
        /// The returned profile structure and any of its fields must not be modified by the caller except
        /// to set the is_requested field (See MLIdentityRequestAttributeValues)
        /// The returned profile must be released when no longer needed by calling MLIdentityReleaseUserProfile
        /// @endparblock
        /// @priv IdentityRead
        /// </remarks>
        [DllImport("ml_identity", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLIdentityGetAttributeNames(out IntPtr out_profile);

        /// <summary>
        /// MLIdentityGetKnownAttributeNames returns a MLIdentityProfile structure containing
        /// attributes of a user's profile whose names are specified in the attributeNames array
        /// </summary>
        /// <param name="keys">is an array of distinct MLIdentityAttributeKey values that
        /// are not equal to MLIdentityAttributeKey_Unknown</param>
        /// <param name="key_count">is the number of elements in the MLIdentityAttributeKey array</param>
        /// <param name="out_profile">@parblock A pointer to MLIdentityProfile pointer which will be allocated by the library
        /// The returned profile will contain an array of MLIdentityAttribute structures such that the
        /// enumValue of each attribute is contained in the keys array</param>
        /// <returns>
        /// MLResult_AllocFailed The operation failed to allocate memory
        /// MLResult_InvalidParam either keys or out_profile were 0 (null)
        /// MLResult_Ok The operation completed successfully
        /// MLResult_PrivilegeDenied The caller does not have the IdentityRead privilege
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLIdentityResult An identity specific failure occurred during the operation
        /// </returns>
        /// <remarks>
        /// Each element of the attributeNames array may only be one of the values specified above
        /// This method does not access the cloud to discover which attribute names are actually
        /// available for the calling service, does not request access to the values of these
        /// attributes for the service by the user, and does not return the values of these attributes
        /// In order to request access for the attributes and to receive their values, pass the profile
        /// that is returned by MLIdentityGetKnownAttributeNames to one of the methods:
        /// MLIdentityRequestAttributeValues or MLIdentityRequestAttributeValuesAsync
        /// If the attribute specified by any of the keys is not available, a corresponding
        /// MLIdentityAttribute will not appear in the MLIdentityProfile
        /// Not available in this context means that the user profile does not contain the attribute,
        /// not that the caller does not have permission to access its value
        /// All attributes in the returned profile will have their is_requested field set to true and
        /// their is_granted field to false The values of the attributes will point to empty strings
        /// The returned profile must be released using MLIdentityReleaseUserProfile when no longer needed
        /// @endparblock
        /// @priv IdentityRead
        /// </remarks>
        [DllImport("ml_identity", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLIdentityGetKnownAttributeNames(ref MlIdentity.MLIdentityAttributeKey keys, uint key_count, out IntPtr out_profile);

        /// <summary>
        /// MLIdentityGetAttributeNamesAsync invokes the MLIdentityGetAttributeNames
        /// function asynchronously (in a different thread)
        /// </summary>
        /// <param name="out_future">@parblock A pointer to an MLInvokeFuture pointer which provides the means to poll for completion and
        /// to retrieve the profile returned by MLIdentityGetAttributeNames</param>
        /// <returns>
        /// MLResult_AllocFailed The operation failed to allocate memory
        /// MLResult_InvalidParam out_future was 0 (null)
        /// MLResult_Ok The operation completed successfully
        /// MLResult_PrivilegeDenied The caller does not have the IdentityRead privilege
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLIdentityResult An identity specific failure occurred during the operation
        /// </returns>
        /// <remarks>
        /// Note: This pointer will be freed by the library before returning from the first (and last)
        /// call to MLIdentityGetAttributeNamesWait, after the asynchronous call completed, , that is
        /// after MLIdentityGetAttributeNamesWait returns any value that is not MLResult_Pending
        /// @endparblock
        /// @priv IdentityRead
        /// </remarks>
        [DllImport("ml_identity", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLIdentityGetAttributeNamesAsync(out MlInvokeAsync.MLInvokeFuture out_future);

        /// <summary>
        /// Having made a call to MLIdentityGetAttributeNamesAsync, the user can call
        /// MLIdentityGetAttributeNamesWait to detect whether the asynchronous call completed and if
        /// successful, to retrieve the profile in out_profile
        /// </summary>
        /// <param name="future">The pointer returned by the MLIdentityGetAttributeNamesAsync function</param>
        /// <param name="msec_timeout">The timeout in milliseconds</param>
        /// <param name="out_profile">The location in memory where the pointer to the profile structure allocated by
        /// the library will be copied, if the asynchronous call completed, or 0 (null) if not</param>
        /// <returns>
        /// MLResult_AllocFailed The operation failed to allocate memory
        /// MLResult_InvalidParam future or out_profile were 0 (null)
        /// MLResult_Ok The operation completed successfully before the timeout elapsed
        /// The location pointed to by out_profile was set to the address of the MLIdentityProfile
        /// structure allocated by the library The returned profile must be released when no longer
        /// needed by calling MLIdentityReleaseUserProfile
        /// If any other value is returned, the location pointed to by out_profile is set to 0 (null)
        /// MLResult_Pending The timeout elapsed before the asynchronous call completed
        /// MLResult_PrivilegeDenied The caller does not have the IdentityRead privilege
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLIdentityResult An identity specific failure occurred during the operation
        /// </returns>
        /// <remarks>
        /// The call to MLIdentityGetAttributeNamesWait blocks until either msec_timeout msec elapses or the
        /// asynchronous function completes
        /// Note:
        /// 1 To poll without blocking use msec_timeout = 0
        /// 2 After the function returns a value other than MLResult_Pending, future is freed by the
        /// library and must not be used again in a call to MLIdentityGetAttributeNamesWait
        /// @priv IdentityRead
        /// </remarks>
        [DllImport("ml_identity", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLIdentityGetAttributeNamesWait(MlInvokeAsync.MLInvokeFuture future, uint msec_timeout, out IntPtr out_profile);

        /// <summary>
        /// MLIdentityRequestAttributeValues is a blocking function that accesses the cloud
        /// and requests permission from the user in order to fill the attribute values that are marked as
        /// requested in the MLIdentityProfile pointed to by the profile argument
        /// </summary>
        /// <param name="profile">@parblock A pointer to the MLIdentityProfile that was allocated by the library in which
        /// (none, ) one or more of the attributes have had their is_requested field set to true
        /// Attributes for which the is_requested field is true, that are still available in the cloud and
        /// which the user has approved to make available for the calling service will have their
        /// values filled
        /// The is_granted field will be set by the library to true in those attributes that were filled
        /// and false in the others
        /// @endparblock</param>
        /// <returns>
        /// MLResult_AllocFailed The operation failed to allocate memory
        /// MLResult_InvalidParam profile was 0 (null)
        /// MLResult_Ok The operation completed successfully
        /// MLResult_PrivilegeDenied The caller does not have the IdentityRead privilege
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLIdentityResult An identity specific failure occurred during the operation
        /// </returns>
        /// <remarks>
        /// Note: If any (even all) of the attributes passed in have is_requested set to false this will not
        /// cause the function to return an error
        /// If any (even all) of the attributes passed in are no longer available for the user, this
        /// will not cause the function to return an error
        /// @priv IdentityRead
        /// </remarks>
        [DllImport("ml_identity", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLIdentityRequestAttributeValues(ref MlIdentity.MLIdentityProfile profile);

        /// <summary>
        /// MLIdentityRequestAttributeValuesAsync invokes the
        /// MLIdentityRequestAttributeValues function in a different thread
        /// </summary>
        /// <param name="profile">@parblock A pointer to the MLIdentityProfile that was allocated by the library in which
        /// (none, ) one or more of the attributes have had their is_requested field set to true</param>
        /// <param name="out_future">@parblock A pointer to an MLInvokeFuture pointer which provides the means to poll for completion and
        /// to retrieve the profile returned by MLIdentityRequestAttributeValues</param>
        /// <returns>
        /// MLResult_AllocFailed The operation failed to allocate memory
        /// MLResult_InvalidParam profile or out_future were 0 (null)
        /// MLResult_Ok The operation completed successfully and out_future points
        /// to an allocated MLInvokeFuture If any other value is returned, the location pointed to
        /// by out_future is set to 0 (null)
        /// MLResult_PrivilegeDenied The caller does not have the IdentityRead privilege
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLIdentityResult An identity specific failure occurred during the operation
        /// </returns>
        /// <remarks>
        /// Attributes for which the is_requested field is true, that are still available in the cloud and
        /// which the user has approved to make available for the calling service will have their
        /// values filled
        /// The is_granted field will be set by the library to @c true in those attributes that were filled
        /// and @c false in the others
        /// profile must not be released (using MLIdentityReleaseUserProfile) until
        /// MLIdentityRequestAttributeValuesWait returns a value other than MLResult_Pending, because
        /// it will be written to asynchronously by MLIdentityRequestAttributeValuesAsync
        /// @endparblock
        /// Note: This pointer will be freed by the library before returning from the first (and last) call
        /// to MLIdentityRequestAttributeValuesWait after the asynchronous call completed, that is
        /// after MLIdentityRequestAttributeValuesWait returns any value that is not MLResult_Pending
        /// @endparblock
        /// @priv IdentityRead
        /// </remarks>
        [DllImport("ml_identity", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLIdentityRequestAttributeValuesAsync(ref MlIdentity.MLIdentityProfile profile, out MlInvokeAsync.MLInvokeFuture out_future);

        /// <summary>
        /// Having made a call to MLIdentityRequestAttributeValuesAsync, the user can call
        /// MLIdentityRequestAttributeValuesWait to detect whether the asynchronous call completed
        /// </summary>
        /// <param name="future">The pointer returned by the MLIdentityRequestAttributeValuesAsync function</param>
        /// <param name="msec_timeout">The timeout in milliseconds</param>
        /// <returns>
        /// MLResult_AllocFailed The operation failed to allocate memory
        /// MLResult_InvalidParam future was 0 (null)
        /// MLResult_Ok The operation completed successfully before the timeout elapsed
        /// The profile provided in the MLIdentityRequestAttributeValuesAsync call was updated as follows:
        /// Attributes for which the is_requested field is true, that are still available in the cloud and
        /// which the user has approved to make available for the calling service will have their
        /// values filled
        /// The is_granted field will be set by the library to true in those attributes that were filled
        /// and false in the others
        /// If any other value is returned, the profile provided in the
        /// MLIdentityRequestAttributeValuesAsync call was not updated
        /// MLResult_Pending The timeout elapsed before the asynchronous call completed
        /// MLResult_PrivilegeDenied The caller does not have the IdentityRead privilege
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLIdentityResult An identity specific failure occurred during the operation
        /// </returns>
        /// <remarks>
        /// The call to MLIdentityRequestAttributeValuesWait blocks until either msec_timeout msec elapses
        /// or the asynchronous function completes
        /// Note:
        /// 1 To poll without blocking use msec_timeout = 0
        /// 2 After the function returns a result other than MLResult_Pending, future is freed by the
        /// library and must not be used again in a call to MLIdentityRequestAttributeValuesWait
        /// @priv IdentityRead
        /// </remarks>
        [DllImport("ml_identity", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLIdentityRequestAttributeValuesWait(MlInvokeAsync.MLInvokeFuture future, uint msec_timeout);

        /// <summary>
        /// MLIdentityReleaseUserProfile releases all resources associated with the
        /// MLIdentityProfile stucture that was returned by the library
        /// </summary>
        /// <param name="profile">A pointer to a library allocated structure received using one of:
        /// MLIdentityGetAttributeNames, MLIdentityGetAttributeNamesWait or
        /// MLIdentityGetKnownAttributeNames</param>
        /// <returns>
        /// MLResult_InvalidParam profile was 0 (null)
        /// MLResult_Ok The operation completed successfully
        /// </returns>
        /// <remarks>
        /// @priv IdentityRead
        /// </remarks>
        [DllImport("ml_identity", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLIdentityReleaseUserProfile(ref MlIdentity.MLIdentityProfile profile);

        /// <summary>
        /// Returns an ASCII string for MLIdentityResult and MLResultGlobal codes
        /// </summary>
        /// <param name="result_code">The input MLResult enum from MLIdentity functions</param>
        /// <returns>
        /// ASCII string containing readable version of result code
        /// @priv None
        /// </returns>
        [DllImport("ml_identity", CallingConvention = CallingConvention.Cdecl)]
        [return: MarshalAs(UnmanagedType.LPStr)]
        public static extern string MLIdentityGetResultString(MlApi.MLResult result_code);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlCamera
    {
        /// <summary>
        /// Camera errors
        /// </summary>
        public enum MLCameraError : int
        {
            MLCameraError_None = unchecked((int)0),

            /// <summary>
            /// Invalid state
            /// </summary>
            MLCameraError_Invalid,

            /// <summary>
            /// Camera disabled
            /// </summary>
            MLCameraError_Disabled,

            /// <summary>
            /// Camera device failed
            /// </summary>
            MLCameraError_DeviceFailed,

            /// <summary>
            /// Camera service failed
            /// </summary>
            MLCameraError_ServiceFailed,

            /// <summary>
            /// Capture failed
            /// </summary>
            MLCameraError_CaptureFailed,

            /// <summary>
            /// Unknown capture error
            /// </summary>
            MLCameraError_Unknown,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLCameraError_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Captured output format
        /// </summary>
        public enum MLCameraOutputFormat : int
        {
            MLCameraOutputFormat_Unknown,

            /// <summary>
            /// YUV planar format
            /// </summary>
            MLCameraOutputFormat_YUV_420_888,

            /// <summary>
            /// Compressed output stream
            /// </summary>
            MLCameraOutputFormat_JPEG,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLCameraOutputFormat_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        public const int MLCamera_MaxImagePlanes = unchecked((int)3);

        /// <summary>
        /// Capture operation type
        /// @apilevel 5
        /// </summary>
        public enum MLCameraCaptureType : int
        {
            /// <summary>
            /// To capture an image and save the JPEG-compressed data to a file
            /// </summary>
            MLCameraCaptureType_Image = unchecked((int)0),

            /// <summary>
            /// To capture an image and access the raw buffer of the image
            /// </summary>
            MLCameraCaptureType_ImageRaw,

            /// <summary>
            /// To capture a video and save it to a file
            /// </summary>
            MLCameraCaptureType_Video,

            /// <summary>
            /// To capture a video and and access the raw buffer of the frames
            /// </summary>
            MLCameraCaptureType_VideoRaw,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLCameraCaptureType_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Client can implement polling mechanism to retrieve device status and use these masks to view device status
        /// </summary>
        [Flags]
        public enum MLCameraDeviceStatusFlag : int
        {
            /// <summary>
            /// Available
            /// </summary>
            MLCameraDeviceStatusFlag_Available = unchecked((int)1 << (int) 0),

            /// <summary>
            /// Opened
            /// </summary>
            MLCameraDeviceStatusFlag_Opened = unchecked((int)1 << (int) 1),

            /// <summary>
            /// Disconnected
            /// </summary>
            MLCameraDeviceStatusFlag_Disconnected = unchecked((int)1 << (int) 2),

            /// <summary>
            /// Error
            /// </summary>
            MLCameraDeviceStatusFlag_Error = unchecked((int)1 << (int) 3),
        }

        /// <summary>
        /// Client can implement polling mechanism to retrieve capture status and use these masks to view capture status
        /// </summary>
        [Flags]
        public enum MLCameraCaptureStatusFlag : int
        {
            /// <summary>
            /// Started
            /// </summary>
            MLCameraCaptureStatusFlag_Started = unchecked((int)1 << (int) 0),

            /// <summary>
            /// Failed
            /// </summary>
            MLCameraCaptureStatusFlag_Failed = unchecked((int)1 << (int) 1),

            /// <summary>
            /// Buffer lost
            /// </summary>
            MLCameraCaptureStatusFlag_BufferLost = unchecked((int)1 << (int) 2),

            /// <summary>
            /// In progress
            /// </summary>
            MLCameraCaptureStatusFlag_InProgress = unchecked((int)1 << (int) 3),

            /// <summary>
            /// Completed
            /// </summary>
            MLCameraCaptureStatusFlag_Completed = unchecked((int)1 << (int) 4),
        }

        /// <summary>
        /// Per plane info for captured output
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLCameraPlaneInfo
        {
            /// <summary>
            /// Width of the output image in pixels
            /// </summary>
            public uint width;

            /// <summary>
            /// Height of the output image in pixels
            /// </summary>
            public uint height;

            /// <summary>
            /// Stride of the output image in bytes
            /// </summary>
            public uint stride;

            /// <summary>
            /// Number of bytes used to represent a pixel
            /// </summary>
            public uint bytes_per_pixel;

            /// <summary>
            /// Image data
            /// </summary>
            public IntPtr data;

            /// <summary>
            /// Number of bytes in the image output data
            /// </summary>
            public uint size;
        }

        /// <summary>
        /// Captured output
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLCameraOutput
        {
            /// <summary>
            /// Number of output image planes:
            /// 1 for compressed output such as JPEG stream,
            /// 3 for separate color component output such as YUV/RGB
            /// </summary>
            public byte plane_count;

            /// <summary>
            /// Output image plane info The number of output planes is specified by plane_count
            /// </summary>
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]
            public MlCamera.MLCameraPlaneInfo[] planes;

            /// <summary>
            /// Supported output format specified by MLCameraOutputFormat
            /// </summary>
            public MlCamera.MLCameraOutputFormat format;
        }

        /// <summary>
        /// Structure to encapsulate various indices for a capture result
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLCameraResultExtras
        {
            /// <summary>
            /// An integer to index the request sequence that this result belongs to
            /// </summary>
            public int request_id;

            /// <summary>
            /// An integer to index this result inside a request sequence, starting from 0 Reserved for future use
            /// </summary>
            public int burst_id;

            /// <summary>
            /// A 64bit integer to index the frame number associated with this result
            /// </summary>
            public long frame_number;

            /// <summary>
            /// The partial result count (index) for this capture result
            /// </summary>
            public int partial_result_count;

            /// <summary>
            /// To be deprecated
            /// </summary>
            public ulong vcam_timestamp_us;
        }

        /// <summary>
        /// Structure to encapsulate camera frame specific metadata
        /// @apilevel 5
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLCameraFrameMetadata
        {
            /// <summary>
            /// Frame exposure time for the given frame in nanoseconds
            /// </summary>
            public long exposure_time_ns;
        }

        /// <summary>
        /// Device status callbacks to be implemented by client to receive device status if callback mechanism is used
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLCameraDeviceStatusCallbacks
        {
            public MlCamera.MLCameraDeviceStatusCallbacks.on_device_available_delegate on_device_available;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_device_available_delegate(IntPtr data);

            public MlCamera.MLCameraDeviceStatusCallbacks.on_device_unavailable_delegate on_device_unavailable;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_device_unavailable_delegate(IntPtr data);

            public MlCamera.MLCameraDeviceStatusCallbacks.on_device_opened_delegate on_device_opened;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_device_opened_delegate(IntPtr data);

            public MlCamera.MLCameraDeviceStatusCallbacks.on_device_closed_delegate on_device_closed;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_device_closed_delegate(IntPtr data);

            public MlCamera.MLCameraDeviceStatusCallbacks.on_device_disconnected_delegate on_device_disconnected;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_device_disconnected_delegate(IntPtr data);

            public MlCamera.MLCameraDeviceStatusCallbacks.on_device_error_delegate on_device_error;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_device_error_delegate(MlCamera.MLCameraError error, IntPtr data);

            public MlCamera.MLCameraDeviceStatusCallbacks.on_preview_buffer_available_delegate on_preview_buffer_available;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_preview_buffer_available_delegate(MlApi.MLHandle output, IntPtr data);
        }

        /// <summary>
        /// Capture callbacks to be implemented by client to receive capture status if callback mechanism is used
        /// </summary>
        /// <remarks>
        /// Deprecated since 0210 Scheduled for removal Replaced by MLCameraCaptureCallbacksEx
        /// </remarks>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLCameraCaptureCallbacks
        {
            public MlCamera.MLCameraCaptureCallbacks.on_capture_started_delegate on_capture_started;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_capture_started_delegate(in MlCamera.MLCameraResultExtras extra, IntPtr data);

            public MlCamera.MLCameraCaptureCallbacks.on_capture_failed_delegate on_capture_failed;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_capture_failed_delegate(in MlCamera.MLCameraResultExtras extra, IntPtr data);

            public MlCamera.MLCameraCaptureCallbacks.on_capture_buffer_lost_delegate on_capture_buffer_lost;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_capture_buffer_lost_delegate(in MlCamera.MLCameraResultExtras extra, IntPtr data);

            public MlCamera.MLCameraCaptureCallbacks.on_capture_progressed_delegate on_capture_progressed;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_capture_progressed_delegate(MlApi.MLHandle metadata_handle, in MlCamera.MLCameraResultExtras extra, IntPtr data);

            public MlCamera.MLCameraCaptureCallbacks.on_capture_completed_delegate on_capture_completed;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_capture_completed_delegate(MlApi.MLHandle metadata_handle, in MlCamera.MLCameraResultExtras extra, IntPtr data);

            public MlCamera.MLCameraCaptureCallbacks.on_image_buffer_available_delegate on_image_buffer_available;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_image_buffer_available_delegate(in MlCamera.MLCameraOutput output, IntPtr data);
        }

        /// <summary>
        /// Capture callbacks to be implemented by client to receive capture status if callback mechanism is used
        /// </summary>
        /// <remarks>
        /// This structure must be initialized by calling MLCameraCaptureCallbacksExInit before use
        /// @apilevel 5
        /// </remarks>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLCameraCaptureCallbacksEx
        {
            /// <summary>
            /// version contains the version number for this structure
            /// </summary>
            public uint version;

            public MlCamera.MLCameraCaptureCallbacksEx.on_capture_started_delegate on_capture_started;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_capture_started_delegate(in MlCamera.MLCameraResultExtras extra, IntPtr data);

            public MlCamera.MLCameraCaptureCallbacksEx.on_capture_failed_delegate on_capture_failed;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_capture_failed_delegate(in MlCamera.MLCameraResultExtras extra, IntPtr data);

            public MlCamera.MLCameraCaptureCallbacksEx.on_capture_buffer_lost_delegate on_capture_buffer_lost;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_capture_buffer_lost_delegate(in MlCamera.MLCameraResultExtras extra, IntPtr data);

            public MlCamera.MLCameraCaptureCallbacksEx.on_capture_progressed_delegate on_capture_progressed;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_capture_progressed_delegate(MlApi.MLHandle metadata_handle, in MlCamera.MLCameraResultExtras extra, IntPtr data);

            public MlCamera.MLCameraCaptureCallbacksEx.on_capture_completed_delegate on_capture_completed;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_capture_completed_delegate(MlApi.MLHandle metadata_handle, in MlCamera.MLCameraResultExtras extra, IntPtr data);

            public MlCamera.MLCameraCaptureCallbacksEx.on_image_buffer_available_delegate on_image_buffer_available;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_image_buffer_available_delegate(in MlCamera.MLCameraOutput output, IntPtr data);

            public MlCamera.MLCameraCaptureCallbacksEx.on_video_buffer_available_delegate on_video_buffer_available;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_video_buffer_available_delegate(in MlCamera.MLCameraOutput output, in MlCamera.MLCameraResultExtras extra, in MlCamera.MLCameraFrameMetadata frame_metadata, IntPtr data);
        }

        /// <summary>
        /// Connect to camera device
        /// </summary>
        /// <returns>
        /// MLResult_AllocFailed Failed to allocate memory
        /// MLResult_Ok Connected to camera device successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_Timeout Failed to connect to camera device due to timeout
        /// MLResult_UnspecifiedFailure Failed to connect to camera device due to internal error
        /// MLMediaGenericResult_UnexpectedNull Failed to connect to camera device due to null pointer
        /// </returns>
        /// <remarks>
        /// After this function returns, a preview stream will be created The preview
        /// might not have good quailty image at beginning due to the camera sensor
        /// requires to adjust and lock the exposure(AE) and white balance(AWB) This
        /// process takes several frames and it might take up to half second in low light
        /// condition environment
        /// Caller could receive the buffer through use on_preview_buffer_available
        /// callback
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_audio", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraConnect();

        /// <summary>
        /// Disconnect from camera device
        /// </summary>
        /// <returns>
        /// MLResult_Ok Connected to camera device successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// </returns>
        /// <remarks>
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_audio", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraDisconnect();

        /// <summary>
        /// Prepare for capture
        /// </summary>
        /// <param name="type">Capture operation type</param>
        /// <param name="out_handle">Handle to the capture metadata Only valid if result is MLResult_Ok</param>
        /// <returns>
        /// MLResult_AllocFailed Failed to allocate memory
        /// MLResult_InvalidParam Failed to prepare for capture due to invalid input parameter
        /// MLResult_Ok Prepared for capture successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to prepare for capture due to internal error
        /// MLMediaGenericResult_BadType Failed to prepare for capture due to invalid capture type
        /// MLMediaGenericResult_UnexpectedNull Failed to prepare for capture due to null pointer
        /// </returns>
        /// <remarks>
        /// This API prepares for capture per specified MLCameraCaptureType by creating
        /// a capture request, and a handle to which is returned to the user, who can choose
        /// to manipulate the request data(metadata) via APIs defined in ml_camera_metadatah
        /// before performing the capture
        /// Shall be called after MLCameraConnect
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraPrepareCapture(MlCamera.MLCameraCaptureType type, ref MlApi.MLHandle out_handle);

        /// <summary>
        /// Set the client-implemented callbacks to convey camera device status
        /// </summary>
        /// <param name="device_status_callbacks">Camera device status callbacks</param>
        /// <param name="data">User metadata</param>
        /// <returns>
        /// MLResult_Ok Set device status callbacks successfully
        /// MLResult_UnspecifiedFailure An internal failure occurred
        /// </returns>
        /// <remarks>
        /// Client needs to implement the callbacks defined by MLCameraDeviceStatusCallbacks
        /// The library passes the camera device status to the client via those callbacks
        /// Shall be called before MLCameraConnect
        /// @priv None
        /// </remarks>
        [DllImport("ml_camera", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraSetDeviceStatusCallbacks(ref MlCamera.MLCameraDeviceStatusCallbacks device_status_callbacks, IntPtr data);

        /// <summary>
        /// Set the client-implemented callbacks to convey capture status
        /// </summary>
        /// <param name="capture_callbacks">Capture status callbacks</param>
        /// <param name="data">User metadata</param>
        /// <returns>
        /// MLResult_Ok Set capture callbacks successfully
        /// MLResult_UnspecifiedFailure An internal failure occurred
        /// </returns>
        /// <remarks>
        /// Deprecated since 0210 Scheduled for removal Replaced by MLCameraSetCaptureCallbacksEx
        /// Client needs to implement the callbacks defined by MLCameraCaptureCallbacks
        /// The library passes the capture status to the client via those callbacks
        /// Shall be called before capture operation for preview/image/video
        /// @priv None
        /// </remarks>
        [DllImport("ml_camera", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraSetCaptureCallbacks(ref MlCamera.MLCameraCaptureCallbacks capture_callbacks, IntPtr data);

        /// <summary>
        /// Set the client-implemented callbacks to convey capture status
        /// </summary>
        /// <param name="capture_callbacks">Capture status callbacks</param>
        /// <param name="data">User metadata</param>
        /// <returns>
        /// MLResult_Ok Set capture callbacks successfully
        /// MLResult_UnspecifiedFailure An internal failure occurred
        /// </returns>
        /// <remarks>
        /// Client needs to implement the callbacks defined by MLCameraCaptureCallbacksEx
        /// The library passes the capture status to the client via those callbacks
        /// Shall be called before capture operation for preview/image/video
        /// @apilevel 5
        /// @priv None
        /// </remarks>
        [DllImport("ml_camera", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraSetCaptureCallbacksEx(ref MlCamera.MLCameraCaptureCallbacksEx capture_callbacks, IntPtr data);

        /// <summary>
        /// Set the output format of captured image file or image raw buffer
        /// </summary>
        /// <param name="format">Output format</param>
        /// <returns>
        /// MLResult_Ok Set output format successfully
        /// MLResult_InvalidParam Invalid input parameter
        /// </returns>
        /// <remarks>
        /// After changing output format, MLCameraPrepareCapture must be invoked to take
        /// effect or capture will fail
        /// Without calling this function, default output format will be JPEG
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraSetOutputFormat(MlCamera.MLCameraOutputFormat format);

        /// <summary>
        /// Capture still image and save output to a file
        /// </summary>
        /// <param name="path">File path to store the output image</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to capture image due to invalid input parameter
        /// MLResult_Ok Captured image successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_Timeout Failed to capture image due to timeout
        /// MLMediaGenericResult_InvalidOperation Failed to capture image due to on-going video recording
        /// MLMediaGenericResult_UnexpectedNull Failed to capture image due to null pointer
        /// </returns>
        /// <remarks>
        /// The output image will be stored in the format set by MLCameraSetOutputFormat and
        /// saved into the file specified by the file path The library is responsible for
        /// opening and closing the file
        /// If this function is invoked before the camera sensor has locked AE and AWB,
        /// it will be blocked till AE,AWB is locked and then starts to capture
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraCaptureImage([MarshalAs(UnmanagedType.LPStr)] string path);

        /// <summary>
        /// Capture still image and get output data in buffer
        /// </summary>
        /// <returns>
        /// MLResult_Ok Captured raw image successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_Timeout Failed to capture raw image due to timeout
        /// MLMediaGenericResult_InvalidOperation Failed to capture raw image due to on-going video recording
        /// MLMediaGenericResult_UnexpectedNull Failed to capture raw image due to null pointer
        /// </returns>
        /// <remarks>
        /// The output is the raw image data with format set by MLCameraSetOutputFormat
        /// and passed to client via on_image_buffer_available Client can also choose to
        /// implement polling mechanism and obtain the stream by MLCameraPollImageStream
        /// If this function is invoked before the camera sensor has locked AE and AWB,
        /// it will be blocked till AE,AWB is locked and then starts to capture
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraCaptureImageRaw();

        /// <summary>
        /// Start video capture and save output to a file
        /// </summary>
        /// <param name="path">File path to store the output video</param>
        /// <returns>
        /// MLResult_AllocFailed Failed to allocate memory
        /// MLResult_InvalidParam Failed to start video recording due to invalid input parameter
        /// MLResult_Ok Started video recording successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_Timeout Failed to start video recording due to timeout
        /// MLResult_UnspecifiedFailure Failed to start video recording due to internal error
        /// MLMediaGenericResult_UnexpectedNull Failed to start video recording due to null pointer
        /// </returns>
        /// <remarks>
        /// The captured video and audio streams will be encoded with AVC and AAC codecs
        /// and packed in mp4 container format and stored into the file specified by the
        /// file path The library is responsible for opening and closing the file The
        /// current supported video resolution is 1080p
        /// If this function is invoked before the camera sensor has locked AE and AWB,
        /// it will be blocked till AE,AWB is locked and then starts to capture
        /// MLCameraCaptureVideoStop needs to be called to stop the capture
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraCaptureVideoStart([MarshalAs(UnmanagedType.LPStr)] string path);

        /// <summary>
        /// Start video capture and provide raw frames through callback
        /// </summary>
        /// <returns>
        /// MLResult_AllocFailed Failed to allocate memory
        /// MLResult_InvalidParam Failed to start video recording due to invalid input parameter
        /// MLResult_Ok Started video recording successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_Timeout Failed to start video recording due to timeout
        /// MLResult_UnspecifiedFailure Failed to start video recording due to internal error
        /// MLMediaGenericResult_UnexpectedNull Failed to start video recording due to null pointer
        /// </returns>
        /// <remarks>
        /// The captured video YUV frames will be returned to the application via on_video_buffer_available
        /// The current supported video resolution is 1080p
        /// If this function is invoked before the camera sensor has locked AE and AWB,
        /// it will be blocked till AE,AWB is locked and then starts to capture
        /// MLCameraCaptureVideoStop needs to be called to stop the capture
        /// @apilevel 5
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraCaptureRawVideoStart();

        /// <summary>
        /// Stop video capture
        /// </summary>
        /// <returns>
        /// MLResult_Ok Stopped video recording successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed to stop video recording due to internal error
        /// MLMediaGenericResult_UnexpectedNull Failed to stop video recording due to null pointer
        /// </returns>
        /// <remarks>
        /// User should allow some time, ie, &gt;500ms, after MLCameraCaptureVideoStart and before
        /// calling this API, as captured frames are being encoded Otherwise, MLResult_UnspecifiedFailure
        /// will be returned
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraCaptureVideoStop();

        /// <summary>
        /// Poll camera device status
        /// </summary>
        /// <param name="out_device_status">Device status</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain device status due to invalid input parameter
        /// MLResult_Ok Obtained device status successfully
        /// </returns>
        /// <remarks>
        /// Use MLCameraDeviceStatusFlag to view specific status bit
        /// Call MLCameraGetErrorCode to obtain the error code if
        /// MLCameraDeviceStatusFlag_Error bit is set
        /// Note: This API can still be used even if MLCameraSetDeviceStatusCallbacks has been called
        /// @priv None
        /// </remarks>
        [DllImport("ml_camera", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraGetDeviceStatus(ref uint out_device_status);

        /// <summary>
        /// Poll capture status
        /// </summary>
        /// <param name="out_capture_status">Capture status</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain capture status due to invalid input parameter
        /// MLResult_Ok Obtained capture status successfully
        /// </returns>
        /// <remarks>
        /// Use MLCameraCaptureStatusFlag to view specific status bit
        /// Call MLCameraGetErrorCode to obtain the error code if
        /// MLCameraCaptureStatusFlag_Error bit is set
        /// Note: This API can still be used even if MLCameraSetCaptureStatusCallbacks has been called
        /// @priv None
        /// </remarks>
        [DllImport("ml_camera", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraGetCaptureStatus(ref uint out_capture_status);

        /// <summary>
        /// Obtain device error code
        /// </summary>
        /// <param name="out_error_code">Device error code</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain device error code due to invalid input parameter
        /// MLResult_Ok Obtained device error code successfully
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_camera", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraGetErrorCode(ref MlCamera.MLCameraError out_error_code);

        /// <summary>
        /// Poll preview stream
        /// </summary>
        /// <param name="out_preview">Preview stream</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain preview stream due to invalid input parameter
        /// MLResult_Ok Obtained preview stream successfully
        /// </returns>
        /// <remarks>
        /// The preview stream and image stream are separate streams The preview data is
        /// available upon MLCameraConnect, and will always be available; whereas the image stream
        /// is produced when the user captures images
        /// The library allocates the buffer and destroys it when disconnecting from the camera
        /// Note: This API can still be used even if MLCameraSetDeviceStatusCallbacks has been called
        /// @priv None
        /// </remarks>
        [DllImport("ml_camera", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraGetPreviewStream(ref MlApi.MLHandle out_preview);

        /// <summary>
        /// Poll raw image stream
        /// </summary>
        /// <param name="out_image">Raw image stream</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain raw image stream due to invalid input parameter
        /// MLResult_Ok Obtained raw image stream successfully
        /// </returns>
        /// <remarks>
        /// The library allocates the buffer and destroys it when disconnecting from the camera
        /// Note: This API can still be used even if MLCameraSetCaptureStatusCallbacks has been called
        /// @priv None
        /// </remarks>
        [DllImport("ml_camera", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraGetImageStream(out IntPtr out_image);

        /// <summary>
        /// Poll capture result extras data
        /// </summary>
        /// <param name="out_result_extras">Capture result extras data</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain result extras due to invalid input parameter
        /// MLResult_Ok Obtained result extras data successfully
        /// </returns>
        /// <remarks>
        /// The library allocates the buffer and destroys it when disconnecting from the camera
        /// Note: This API can still be used even if MLCameraSetCaptureStatusCallbacks has been called
        /// @priv None
        /// </remarks>
        [DllImport("ml_camera", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraGetCaptureResultExtras(out IntPtr out_result_extras);

        /// <summary>
        /// Obtain handle for retrieving camera characteristics
        /// </summary>
        /// <param name="out_handle">Handle to access camera characteristic metadata Only valid if result is MLResult_Ok</param>
        /// <returns>
        /// MLResult_AllocFailed Failed to allocate memory
        /// MLResult_InvalidParam Failed to obtain camera characteristic handle due to invalid input parameter
        /// MLResult_Ok Obtained camera characteristic handle successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLMediaGenericResult_UnexpectedNull obtain camera characteristic handle due to null pointer
        /// </returns>
        /// <remarks>
        /// This API provides the handle for retrieving camera characteristics via APIs
        /// defined in ml_camera_metadatah
        /// @priv CameraCapture
        /// </remarks>
        [DllImport("ml_camera", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraGetCameraCharacteristics(ref MlApi.MLHandle out_handle);

        /// <summary>
        /// Obtains handle for retrieving capture result metadata
        /// </summary>
        /// <param name="out_handle">Handle to access capture result metadata Only valid if result is MLResult_Ok</param>
        /// <returns>
        /// MLResult_InvalidParam Failed to obtain capture result handle due to invalid input parameter
        /// MLResult_Ok Obtained capture result handle successfully
        /// MLMediaGenericResult_UnexpectedNull obtain capture result handle due to null pointer
        /// </returns>
        /// <remarks>
        /// This API provides the handle for retrieving capture result metadata via APIs
        /// defined in ml_camera_metadatah
        /// Note: that this handle is also available via callbacks if capture callbacks has been set
        /// @priv None
        /// </remarks>
        [DllImport("ml_camera", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLCameraGetResultMetadata(ref MlApi.MLHandle out_handle);
    }
}

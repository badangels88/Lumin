//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlMediaCrypto
    {
        /// <summary>
        /// Create a
        ///  MediaCrypto instance from a UUID
        ///  MediaCrypto
        ///  MediaCrypto object was created successfully
        /// </summary>
        /// <param name="uuid">The universal unique ID of the crypto scheme uuid must be 16 bytes</param>
        /// <param name="data">Opaque initialization data specific to the crypto scheme, This value must never be NULL</param>
        /// <param name="out_handle">Upon successful return will point to handle to the created</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok
        /// </returns>
        /// <returns>
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// Or else, it will point to ML_INVALID_HANDLE
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacrypto", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaCryptoCreate(MlTypes.MLUUID uuid, in MlMediaDrm.MLMediaDRMByteArray data, ref MlApi.MLHandle out_handle);

        /// <summary>
        /// Release the
        ///  MediaCrypto instance
        ///  MediaCrypto
        ///  MediaCrypto object is invalid
        ///  MediaCrypto object was successfully destroyed
        /// </summary>
        /// <param name="media_crypto">MLHandle to the</param>
        /// <returns>
        /// MLResult_InvalidParam
        /// </returns>
        /// <returns>
        /// MLResult_Ok
        /// </returns>
        /// <returns>
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacrypto", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaCryptoRelease(MlApi.MLHandle media_crypto);

        /// <summary>
        /// Query if the given scheme identified by its UUID is supported on this device
        /// </summary>
        /// <param name="uuid">Identifies the universal unique ID of the crypto scheme uuid must be 16 bytes</param>
        /// <param name="out_supported">On successful return contains @c true or @c false based on
        /// whether the given crypto scheme is supported or not</param>
        /// <returns>
        /// MLResult_InvalidParam Parameter is invalid
        /// MLResult_Ok The query has run successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacrypto", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaCryptoIsCryptoSchemeSupported(MlTypes.MLUUID uuid, ref bool out_supported);

        /// <summary>
        /// Query if the crypto scheme requires the use of a secure decoder to decode data of
        /// the given mime type
        /// </summary>
        /// <param name="mime_type">The MIME type of the media container, eg "video/mp4"</param>
        /// <param name="out_required">On successful return contains @c true or @c false based on
        /// whether the given mime type requires a secure decoder</param>
        /// <returns>
        /// MLResult_InvalidParam Parameter is invalid
        /// MLResult_Ok The query has run successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacrypto", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaCryptoRequiresSecureDecoderComponent([MarshalAs(UnmanagedType.LPStr)] string mime_type, ref bool out_required);

        /// <summary>
        /// Associate a MediaDRM session with this
        ///  MediaCrypto instance
        ///  MediaCrypto
        /// </summary>
        /// <param name="media_crypto">MLHandle to the</param>
        /// <param name="session_id">Session ID for the DRM session</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok Media DRM session was set successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacrypto", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaCryptoSetMediaDRMSession(MlApi.MLHandle media_crypto, in MlMediaDrm.MLMediaDRMByteArray session_id);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlEyeTracking
    {
        /// <summary>
        /// A set of possible error codes that the Eye Tracking system can report
        /// </summary>
        public enum MLEyeTrackingError : int
        {
            /// <summary>
            /// No error, tracking is nominal
            /// </summary>
            MLEyeTrackingError_None,

            /// <summary>
            /// Eye Tracker failed
            /// </summary>
            MLEyeTrackingError_Generic,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLEyeTrackingError_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// A set of possible calibration status codes that the Eye Tracking system can report
        /// </summary>
        public enum MLEyeTrackingCalibrationStatus : int
        {
            /// <summary>
            /// Calibration not completed
            /// </summary>
            MLEyeTrackingCalibrationStatus_None,

            /// <summary>
            /// Calibration completed but outside desired thresholds
            /// </summary>
            MLEyeTrackingCalibrationStatus_Bad,

            /// <summary>
            /// Calibration completed and within desired thresholds
            /// </summary>
            MLEyeTrackingCalibrationStatus_Good,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLEyeTrackingCalibrationStatus_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Static information about the Eye Tracker Populate with MLEyeTrackingGetStaticData
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLEyeTrackingStaticData
        {
            /// <summary>
            /// Fixation
            /// </summary>
            public MlCoordinateFrameUid.MLCoordinateFrameUID fixation;

            /// <summary>
            /// Left center
            /// </summary>
            public MlCoordinateFrameUid.MLCoordinateFrameUID left_center;

            /// <summary>
            /// Right center
            /// </summary>
            public MlCoordinateFrameUid.MLCoordinateFrameUID right_center;
        }

        /// <summary>
        /// Information about the state of the Eye Tracking system
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLEyeTrackingState
        {
            /// <summary>
            /// A quality metric confidence value 00 - 10 to indicate accuracy of fixation
            /// </summary>
            public float fixation_confidence;

            /// <summary>
            /// A quality metric confidence value 00 - 10 to indicate accuracy of left eye center
            /// </summary>
            public float left_center_confidence;

            /// <summary>
            /// A quality metric confidence value 00 - 10 to indicate accuracy of right eye center
            /// </summary>
            public float right_center_confidence;

            /// <summary>
            /// @c true if eyes are inside a blink When not wearing the device, values can be arbitrary
            /// </summary>
            [MarshalAs(UnmanagedType.U1)]
            public bool left_blink;

            [MarshalAs(UnmanagedType.U1)]
            public bool right_blink;

            /// <summary>
            /// Represents what eye tracking error (if any) is present
            /// </summary>
            public MlEyeTracking.MLEyeTrackingError error;

            /// <summary>
            /// Has eye calibration been run
            /// </summary>
            public MlEyeTracking.MLEyeTrackingCalibrationStatus calibration_status;

            /// <summary>
            /// Is the user's fixation point too close for sustained use This value is true if the user is
            /// focused on a point that is closer than the clipping plane
            /// </summary>
            /// <remarks>
            /// User should not fixate at an uncomfortable close distance
            /// </remarks>
            [MarshalAs(UnmanagedType.U1)]
            public bool fixation_depth_is_uncomfortable;

            /// <summary>
            /// Number of seconds remaining that the user may be fixated at an uncomfortable depth If this
            /// persists for too long, the system may take action to move the fixation point further away
            /// </summary>
            /// <remarks>
            /// User should not fixate at an uncomfortable close distance
            /// </remarks>
            public float remaining_time_at_uncomfortable_depth;

            /// <summary>
            /// True if the user has fixated on a point that is closer than the clipping plane for longer than
            /// 0 seconds within the last minute
            /// </summary>
            /// <remarks>
            /// User should not fixate at an uncomfortable close distance
            /// </remarks>
            [MarshalAs(UnmanagedType.U1)]
            public bool fixation_depth_violation_has_occurred;
        }

        /// <summary>
        /// Create an Eye Tracker
        /// </summary>
        /// <param name="out_handle">A pointer to an MLHandle which will contain the handle of the head tracker
        /// If this operation fails, out_handle will be ML_INVALID_HANDLE</param>
        /// <returns>
        /// MLResult_InvalidParam The out_handle parameter was not valid (null)
        /// MLResult_Ok Tracker was successfully created
        /// MLResult_UnspecifiedFaiure The eye tracker was not created successfully
        /// </returns>
        /// <remarks>
        /// @priv LowLatencyLightwear
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLEyeTrackingCreate(ref MlApi.MLHandle out_handle);

        /// <summary>
        /// Destroy an Eye Tracker
        /// </summary>
        /// <param name="eye_tracker">A handle to an Eye Tracker created by MLEyeTrackingCreate</param>
        /// <returns>
        /// MLResult_Ok The eye tracker was successfully destroyed
        /// MLResult_UnspecifiedFailure The eye tracker was not successfully destroyed
        /// </returns>
        /// <remarks>
        /// @priv LowLatencyLightwear
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLEyeTrackingDestroy(MlApi.MLHandle eye_tracker);

        /// <summary>
        /// Get static information about the eye tracker
        /// </summary>
        /// <param name="eye_tracker">A handle to an Eye Tracker created by MLEyeTrackingCreate</param>
        /// <param name="out_data">Target to populate the data about the eye tracker</param>
        /// <returns>
        /// MLResult_InvalidParam The out_data parameter was not valid (null)
        /// MLResult_Ok Eye tracking static data was successfully received
        /// MLResult_UnspecifiedFailure Failed to receive eye tracking static data
        /// </returns>
        /// <remarks>
        /// @priv LowLatencyLightwear
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLEyeTrackingGetStaticData(MlApi.MLHandle eye_tracker, ref MlEyeTracking.MLEyeTrackingStaticData out_data);

        /// <summary>
        /// Get information about the user's eyes
        /// </summary>
        /// <param name="eye_tracker">A handle to an Eye Tracker created by MLEyeTrackingCreate</param>
        /// <param name="out_state">Information about the eyes</param>
        /// <returns>
        /// MLResult_InvalidParam The out_state parameter was not valid (null)
        /// MLResult_Ok Eye tracking state was successfully received
        /// MLResult_UnspecifiedFailure Failed to receive eye tracking state data
        /// </returns>
        /// <remarks>
        /// @priv LowLatencyLightwear
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLEyeTrackingGetState(MlApi.MLHandle eye_tracker, ref MlEyeTracking.MLEyeTrackingState out_state);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlContacts
    {
        public const int MLResultAPIPrefix_Contacts = unchecked((int)0x94a0 << 16);

        /// <summary>
        /// Return values for Contacts API calls
        /// @apilevel 2
        /// </summary>
        public enum MLContactsResult : int
        {
            /// <summary>
            /// This MLHandle is not yet recognized
            /// </summary>
            MLContactsResult_HandleNotFound = unchecked((int)MLResultAPIPrefix_Contacts),

            /// <summary>
            /// /brief Request is completed, its corresponding result has been returned, and its related resources
            /// are pending to be freed See MLContactsReleaseRequestResources
            /// </summary>
            MLContactsResult_Completed,

            /// <summary>
            /// Request is successfully cancelled
            /// </summary>
            MLContactsResult_Cancelled,

            /// <summary>
            /// Request failed due to system being in an illegal state, eg, when the user hasn't successfully logged-in
            /// </summary>
            MLContactsResult_IllegalState,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLContactsResult_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        public const int MLContacts_DefaultFetchLimit = unchecked((int)250);

        /// <summary>
        /// Fields that will be used for search operations
        /// @apilevel 2
        /// </summary>
        [Flags]
        public enum MLContactsSearchField : int
        {
            /// <summary>
            /// Search field for nickname
            /// </summary>
            MLContactsSearchField_Name = unchecked((int)1u),

            /// <summary>
            /// Search field for phone
            /// </summary>
            MLContactsSearchField_Phone = unchecked((int)1u<< (int)1u),

            /// <summary>
            /// Search field for email
            /// </summary>
            MLContactsSearchField_Email = unchecked((int)1u<< (int)2u),

            /// <summary>
            /// Search across all fields
            /// </summary>
            MLContactsSearchField_All = unchecked((int)MLContactsSearchField_Name | MLContactsSearchField_Phone | MLContactsSearchField_Email),

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLContactsSearchField_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Defines possible status values for an operation performed on a MLContactsContact
        /// @apilevel 2
        /// </summary>
        public enum MLContactsOperationStatus : int
        {
            /// <summary>
            /// Operation succeeded
            /// </summary>
            MLContactsOperationStatus_Success,

            /// <summary>
            /// Operation failed
            /// </summary>
            MLContactsOperationStatus_Fail,

            /// <summary>
            /// MLContactsContact with the details specified for an insert already exists
            /// </summary>
            MLContactsOperationStatus_Duplicate,

            /// <summary>
            /// MLContactsContact to be deleted/updated doesn't exist
            /// </summary>
            MLContactsOperationStatus_NotFound,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLContactsOperationStatus_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Stores a tagged value, such as phone number or email address
        /// Optional tag indicates what type of value is stored, eg "home", "work", etc
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLContactsTaggedAttribute
        {
            /// <summary>
            /// Version of this structure
            /// </summary>
            public uint version;

            /// <summary>
            /// Name of the Tag
            /// </summary>
            [MarshalAs(UnmanagedType.LPStr)]
            public string tag;

            /// <summary>
            /// Value of this attribute
            /// </summary>
            [MarshalAs(UnmanagedType.LPStr)]
            public string value;
        }

        /// <summary>
        /// Stores a list of MLContactsTaggedAttribute instances
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLContactsTaggedAttributeList
        {
            /// <summary>
            /// Version of this structure
            /// </summary>
            public uint version;

            /// <summary>
            /// Number of tagged attributes in this list
            /// </summary>
            public Interop.size_t count;

            /// <summary>
            /// Pointer referring to the array of tagged attributes
            /// </summary>
            public IntPtr items;
        }

        /// <summary>
        /// Representation of available information for a single contact in address book
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLContactsContact
        {
            /// <summary>
            /// Version of this structure
            /// </summary>
            public uint version;

            /// <summary>
            /// Locally-unique contact identifier Generated by the system May change across reboots
            /// </summary>
            public MlContacts.MLContactsID id;

            /// <summary>
            /// Contacts's name
            /// </summary>
            [MarshalAs(UnmanagedType.LPStr)]
            public string name;

            /// <summary>
            /// List of tagged phone numbers Tag-value pairs are not required to be unique Tags are
            /// optional (empty strings allowed)
            /// </summary>
            public MlContacts.MLContactsPhoneNumberList phone_number_list;

            /// <summary>
            /// List of tagged email addresses Tag-value pairs are not required to be unique Tags are
            /// optional (empty strings allowed)
            /// </summary>
            public MlContacts.MLContactsEmailAddressList email_address_list;
        }

        /// <summary>
        /// Stores a contact identifier
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly struct MLContactsID : IEquatable<MLContactsID>
        {
            public MLContactsID(string value) => this.Value = value;

            [MarshalAs(UnmanagedType.LPStr)]
            public readonly string Value;

            public bool Equals(MLContactsID other) => Value.Equals(other.Value);

            public override bool Equals(object obj) => obj is MLContactsID other && Equals(other);

            public override int GetHashCode() => Value.GetHashCode();

            public override string ToString() => Value.ToString();

            public static implicit operator string(MLContactsID from) => from.Value;

            public static implicit operator MLContactsID(string from) => new MLContactsID(from);

            public static bool operator ==(MLContactsID left, MLContactsID right) => left.Equals(right);

            public static bool operator !=(MLContactsID left, MLContactsID right) => !left.Equals(right);
        }

        /// <summary>
        /// Stores a list of phone numbers
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly struct MLContactsPhoneNumberList : IEquatable<MLContactsPhoneNumberList>
        {
            public MLContactsPhoneNumberList(MlContacts.MLContactsTaggedAttributeList value) => this.Value = value;

            public readonly MlContacts.MLContactsTaggedAttributeList Value;

            public bool Equals(MLContactsPhoneNumberList other) => Value.Equals(other.Value);

            public override bool Equals(object obj) => obj is MLContactsPhoneNumberList other && Equals(other);

            public override int GetHashCode() => Value.GetHashCode();

            public override string ToString() => Value.ToString();

            public static implicit operator MlContacts.MLContactsTaggedAttributeList(MLContactsPhoneNumberList from) => from.Value;

            public static implicit operator MLContactsPhoneNumberList(MlContacts.MLContactsTaggedAttributeList from) => new MLContactsPhoneNumberList(from);

            public static bool operator ==(MLContactsPhoneNumberList left, MLContactsPhoneNumberList right) => left.Equals(right);

            public static bool operator !=(MLContactsPhoneNumberList left, MLContactsPhoneNumberList right) => !left.Equals(right);
        }

        /// <summary>
        /// Stores a list of email addresses
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly struct MLContactsEmailAddressList : IEquatable<MLContactsEmailAddressList>
        {
            public MLContactsEmailAddressList(MlContacts.MLContactsTaggedAttributeList value) => this.Value = value;

            public readonly MlContacts.MLContactsTaggedAttributeList Value;

            public bool Equals(MLContactsEmailAddressList other) => Value.Equals(other.Value);

            public override bool Equals(object obj) => obj is MLContactsEmailAddressList other && Equals(other);

            public override int GetHashCode() => Value.GetHashCode();

            public override string ToString() => Value.ToString();

            public static implicit operator MlContacts.MLContactsTaggedAttributeList(MLContactsEmailAddressList from) => from.Value;

            public static implicit operator MLContactsEmailAddressList(MlContacts.MLContactsTaggedAttributeList from) => new MLContactsEmailAddressList(from);

            public static bool operator ==(MLContactsEmailAddressList left, MLContactsEmailAddressList right) => left.Equals(right);

            public static bool operator !=(MLContactsEmailAddressList left, MLContactsEmailAddressList right) => !left.Equals(right);
        }

        /// <summary>
        /// Stores a list of MLContactsContact
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLContactsContactList
        {
            /// <summary>
            /// Version of this structure
            /// </summary>
            public uint version;

            /// <summary>
            /// Number of contacts
            /// </summary>
            public Interop.size_t count;

            /// <summary>
            /// Pointer referring to array of contacts
            /// </summary>
            public IntPtr contacts;
        }

        /// <summary>
        /// Stores arguments for a List request (MLContactsRequestList)
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLContactsListArgs
        {
            /// <summary>
            /// Version of this structure
            /// </summary>
            public uint version;

            /// <summary>
            /// Request results offset by this amount assuming contacts are ordered in a consistent way
            /// </summary>
            public MlContacts.MLContactsOffset offset;

            /// <summary>
            /// Limit the number of results returned by list operation Min limit is 1
            /// </summary>
            public uint limit;
        }

        /// <summary>
        /// Offset to be used to get the next batch of results
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly struct MLContactsOffset : IEquatable<MLContactsOffset>
        {
            public MLContactsOffset(string value) => this.Value = value;

            [MarshalAs(UnmanagedType.LPStr)]
            public readonly string Value;

            public bool Equals(MLContactsOffset other) => Value.Equals(other.Value);

            public override bool Equals(object obj) => obj is MLContactsOffset other && Equals(other);

            public override int GetHashCode() => Value.GetHashCode();

            public override string ToString() => Value.ToString();

            public static implicit operator string(MLContactsOffset from) => from.Value;

            public static implicit operator MLContactsOffset(string from) => new MLContactsOffset(from);

            public static bool operator ==(MLContactsOffset left, MLContactsOffset right) => left.Equals(right);

            public static bool operator !=(MLContactsOffset left, MLContactsOffset right) => !left.Equals(right);
        }

        /// <summary>
        /// Stores arguments for a search request See MLContactsRequestSearch
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLContactsSearchArgs
        {
            /// <summary>
            /// Version of this structure
            /// </summary>
            public uint version;

            /// <summary>
            /// Request results offset by this amount assuming contacts are ordered in a consistent way
            /// </summary>
            public MlContacts.MLContactsOffset offset;

            /// <summary>
            /// Limit the number of results returned by search operation Min limit is 1
            /// </summary>
            public uint limit;

            /// <summary>
            /// Query text/keywords
            /// </summary>
            [MarshalAs(UnmanagedType.LPStr)]
            public string query;

            /// <summary>
            /// Bitwise mask of fields where to search See MLContactsSearchField
            /// </summary>
            public MlContacts.MLContactsSearchField fields;
        }

        /// <summary>
        /// Stores the result of an operation performed on a MLContactsContact
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLContactsOperationResult
        {
            /// <summary>
            /// Version of this structure
            /// </summary>
            public uint version;

            /// <summary>
            /// Status of the operation
            /// </summary>
            public MlContacts.MLContactsOperationStatus operation_status;

            /// <summary>
            /// Resultant contact with updated fields, for eg, the 'id' of the contact would be available
            /// in this resultant contact for MLContactsRequestInsert
            /// </summary>
            public IntPtr contact;
        }

        /// <summary>
        /// Stores result of an operation that returns a list of contacts
        /// @apilevel 2
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLContactsListResult
        {
            /// <summary>
            /// Version of this structure
            /// </summary>
            public uint version;

            /// <summary>
            /// Status of operation
            /// </summary>
            public MlContacts.MLContactsOperationStatus operation_status;

            /// <summary>
            /// Resultant list of contacts
            /// </summary>
            public MlContacts.MLContactsContactList result_list;

            /// <summary>
            /// Offset to be used to get the next batch of results for this operation
            /// </summary>
            public MlContacts.MLContactsOffset offset;

            /// <summary>
            /// Total number of hits for this request
            /// </summary>
            public Interop.size_t total_hits;
        }

        /// <summary>
        /// Initialize all necessary resources for using MLContacts API
        /// @apilevel 2
        /// </summary>
        /// <returns>
        /// MLResult_Ok If successfully initialized
        /// </returns>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLContactsStartup();

        /// <summary>
        /// Deinitialize all resources for this API
        /// @apilevel 2
        /// </summary>
        /// <returns>
        /// MLResult_Ok If successfully shutdown
        /// </returns>
        [DllImport("ml_camera_metadata", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLContactsShutdown();

        /// <summary>
        /// Insert a MLContactsContact
        /// </summary>
        /// <param name="contact">Contact info</param>
        /// <param name="out_request_handle">A pointer to an MLHandle which will contain the handle to the request
        /// If this operation fails, out_handle will be ML_INVALID_HANDLE</param>
        /// <returns>
        /// MLResult_InvalidParam If either of the parameters are invalid
        /// MLResult_Ok If successfully submitted
        /// MLResult_PrivilegeDenied If permissions haven't been granted to make this API call
        /// </returns>
        /// <remarks>
        /// Request add operation for new contact To get result of this operation,
        /// see MLContactsTryGetOperationResult Operation will fail for a contact that does not
        /// contain a name and at least one email address or phone numbers or for a contact that is a
        /// duplicate of existing one Contact id is assigned upon successful completion of add operation; any
        /// id specified for input parameter here will be ignored
        /// @apilevel 2
        /// @priv AddressBookWrite
        /// </remarks>
        [DllImport("ml_contacts", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLContactsRequestInsert(in MlContacts.MLContactsContact contact, ref MlApi.MLHandle out_request_handle);

        /// <summary>
        /// Update an existing MLContactsContact
        /// </summary>
        /// <param name="contact">Contact info</param>
        /// <param name="out_request_handle">A pointer to an MLHandle which will contain the handle to the request
        /// If this operation fails, out_handle will be ML_INVALID_HANDLE</param>
        /// <returns>
        /// MLResult_InvalidParam If either of the parameters are invalid
        /// MLResult_Ok If successfully submitted
        /// MLResult_PrivilegeDenied If permissions haven't been granted to make this API call
        /// </returns>
        /// <remarks>
        /// Request edit operation for existing contact To get result of this operation,
        /// see MLContactsTryGetOperationResult Contacts are matched by id and input contact must
        /// contain a valid id Operation will fail for a contact that does not contain a name and at least
        /// one email address or phone numbers or for a contact that is a duplicate of existing one
        /// @apilevel 2
        /// @priv AddressBookWrite
        /// </remarks>
        [DllImport("ml_contacts", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLContactsRequestUpdate(in MlContacts.MLContactsContact contact, ref MlApi.MLHandle out_request_handle);

        /// <summary>
        /// Delete an existing MLContactsContact
        /// </summary>
        /// <param name="contact">Contact info</param>
        /// <param name="out_request_handle">A pointer to an MLHandle which will contain the handle to the request
        /// If this operation fails, out_handle will be ML_INVALID_HANDLE</param>
        /// <returns>
        /// MLResult_InvalidParam If either of the parameters are invalid
        /// MLResult_Ok If successfully submitted
        /// MLResult_PrivilegeDenied If permissions haven't been granted to make this API call
        /// </returns>
        /// <remarks>
        /// Request delete operation for existing contact To get result of this operation,
        /// see MLContactsTryGetOperationResult Contacts are matched by id and input contact must
        /// contain a valid id
        /// @apilevel 2
        /// @priv AddressBookWrite
        /// </remarks>
        [DllImport("ml_contacts", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLContactsRequestDelete(in MlContacts.MLContactsContact contact, ref MlApi.MLHandle out_request_handle);

        /// <summary>
        /// Try to get result of an operation that was previously requested on a single MLContactsContact
        /// (ie Insert, Update, or Delete)
        /// </summary>
        /// <param name="request_handle">A handle to the request</param>
        /// <param name="out_result">Result See MLContactsOperationResult</param>
        /// <returns>
        /// MLResult_InvalidParam If the request handle doesn't correspond to this operation
        /// MLResult_Pending If the request is still pending
        /// MLContactsResult_Completed If the request is completed
        /// MLContactsResult_HandleNotFound If the request corresponding to the handle was not found
        /// </returns>
        /// <remarks>
        /// @apilevel 2
        /// @priv None
        /// </remarks>
        [DllImport("ml_contacts", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLContactsTryGetOperationResult(MlApi.MLHandle request_handle, out IntPtr out_result);

        /// <summary>
        /// List available contacts
        /// </summary>
        /// <param name="args">See MLContactsListArgs</param>
        /// <param name="out_request_handle">A pointer to an MLHandle which will contain the handle to the request
        /// If this operation fails, out_handle will be ML_INVALID_HANDLE</param>
        /// <returns>
        /// MLResult_InvalidParam Invalid input parameter
        /// MLResult_Ok If successfully submitted
        /// </returns>
        /// <remarks>
        /// Request list operation To get result of this operation, see MLContactsTryGetListResult
        /// Contacts are listed in lexicographical order based on serialization of name, [tag, email] list,
        /// and [tag, phone_number] list
        /// @apilevel 2
        /// @priv AddressBookRead
        /// </remarks>
        [DllImport("ml_contacts", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLContactsRequestList(in MlContacts.MLContactsListArgs args, ref MlApi.MLHandle out_request_handle);

        /// <summary>
        /// Search for contacts with a given query across specified fields
        /// </summary>
        /// <param name="args">See MLContactsSearchArgs</param>
        /// <param name="out_request_handle">A pointer to an MLHandle which will contain the handle to the request
        /// If this operation fails, out_handle will be ML_INVALID_HANDLE</param>
        /// <returns>
        /// MLResult_InvalidParam Invalid input parameter
        /// MLResult_Ok If successfully submitted
        /// </returns>
        /// <remarks>
        /// Request search operation To get result of this operation, see MLContactsTryGetListResult
        /// Search results will be listed in lexicographical order based on serialization of name, [tag,
        /// email] list, and [tag, phone_number] list Partial matching of search keywords is supported
        /// @apilevel 2
        /// @priv AddressBookRead
        /// </remarks>
        [DllImport("ml_contacts", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLContactsRequestSearch(in MlContacts.MLContactsSearchArgs args, ref MlApi.MLHandle out_request_handle);

        /// <summary>
        /// Try to get result of a request which is expected to return MLContactsListResult (ie List or Search)
        /// @apilevel 2
        /// </summary>
        /// <param name="request_handle">A handle to the request</param>
        /// <param name="out_result">Result See MLContactsListResult</param>
        /// <returns>
        /// MLResult_InvalidParam If the request handle doesn't correspond to this operation
        /// MLResult_Pending If the request is still pending
        /// MLContactsResult_Completed If the request is completed
        /// MLContactsResult_HandleNotFound If the request corresponding to the handle was not found
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_contacts", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLContactsTryGetListResult(MlApi.MLHandle request_handle, out IntPtr out_result);

        /// <summary>
        /// Cancel a request corresponding to the handle Request cancellation will also release
        /// resources associated with request handle
        /// </summary>
        /// <param name="request_handle">A handle to the request</param>
        /// <returns>
        /// MLContactsResult_Cancelled If request was successfully cancelled
        /// @retval MLContactsResult_HandleNotFound If the request corresponding to the handle was not found
        /// </returns>
        /// <remarks>
        /// @apilevel 2
        /// @priv None
        /// </remarks>
        [DllImport("ml_contacts", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLContactsCancelRequest(MlApi.MLHandle request_handle);

        /// <summary>
        /// Free all resources for a request corresponding to the handle MLContacts API users are
        /// expected to free resources for all handles
        /// </summary>
        /// <param name="request_handle">A handle to the request</param>
        /// <returns>
        /// MLResult_Ok If all resources for the request were successfully freed
        /// MLContactsResult_HandleNotFound If the request corresponding to the handle was not found
        /// </returns>
        /// <remarks>
        /// @apilevel 2
        /// @priv None
        /// </remarks>
        [DllImport("ml_contacts", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLContactsReleaseRequestResources(MlApi.MLHandle request_handle);

        /// <summary>
        /// Serialize MLResult
        /// </summary>
        /// <param name="result">MLResult to be serialized</param>
        /// <returns>
        /// Serialized human-readable version of MLResult
        /// </returns>
        /// <remarks>
        /// Serialize MLResult (including MLContactsResult)
        /// @apilevel 2
        /// @priv None
        /// </remarks>
        [DllImport("ml_contacts", CallingConvention = CallingConvention.Cdecl)]
        [return: MarshalAs(UnmanagedType.LPStr)]
        public static extern string MLContactsGetResultString(MlApi.MLResult result);
    }
}

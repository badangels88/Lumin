//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlFoundObject
    {
        /// <summary>
        ///  FoundObject Found Object
        ///  FoundObject
        /// APIs for the Found Object Tracker system
        /// EXPERIMENTAL
        /// Not expected to function at runtime API for early review only
        /// </summary>
        /// <remarks>
        /// - Found Object Tracker allows for spatial querying of real objects and
        /// attaching content to them
        /// \
        /// {
        /// </remarks>
        public enum __AnonymousCppEnum_ml_found_object_2207 : int
        {
            /// <summary>
            /// Maximum char size for a label
            /// </summary>
            MLFoundObject_MaxLabelSize = unchecked((int)64),

            /// <summary>
            /// Maximum char size for a property key
            /// </summary>
            MLFoundObject_MaxPropertyKeySize = unchecked((int)64),

            /// <summary>
            /// Maximum char size for a property value
            /// </summary>
            MLFoundObject_MaxPropertyValueSize = unchecked((int)64),

            /// <summary>
            /// Maximum char size for the file type used for property data
            /// </summary>
            MLFoundObject_MaxFileTypeSize = unchecked((int)2048),
        }

        /// <summary>
        /// Struct used to identify the supported types of found objects
        /// </summary>
        public enum MLFoundObjectType : int
        {
            /// <summary>
            /// None
            /// </summary>
            MLFoundObjectType_None = unchecked((int)-1),

            /// <summary>
            /// Object refers to a physical object
            /// </summary>
            MLFoundObjectType_Object,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLFoundObjectType_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Enum for the various types of state change events
        /// </summary>
        public enum MLFoundObjectStateChangeType : int
        {
            MLFoundObjectStateChange_None = unchecked((int)-1),

            /// <summary>
            /// A property belonging to the found object has changed
            /// </summary>
            MLFoundObjectStateChange_Property,

            /// <summary>
            /// Position has changed for the found object
            /// </summary>
            MLFoundObjectStateChange_Position,

            /// <summary>
            /// Orientation (rotation) has changed for the found object
            /// </summary>
            MLFoundObjectStateChange_Orientation,

            /// <summary>
            /// Bindings have changed for the found object
            /// </summary>
            MLFoundObjectStateChange_Binding,

            /// <summary>
            /// An event has occurred which requires getting new transforms for found objects
            /// </summary>
            MLFoundObjectStateChange_MapEvent,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLFoundObjectStateChange_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Properties are key value pairs used for either filters or characteristics of an object
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLFoundObjectProperty
        {
            /// <summary>
            /// Key for an objects property Type is string Max size is defined by
            /// MLFoundObject_MaxPropertyKeySize Example of a key would be 'texture'
            /// </summary>
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
            public string key;

            /// <summary>
            /// Value for an objects property Type is string Max size is defined by
            /// MLFoundObject_MaxPropertyValueSize Example of a value would be 'smooth'
            /// </summary>
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
            public string value;

            /// <summary>
            /// Size of the data for this found objectThis a binary blob Use file_type to deserialize correctly
            /// </summary>
            public uint data_size;

            /// <summary>
            /// File type for the data belonging to this property This does not need to be
            /// filled out when making a query It serves as a way to know how to deserialize
            /// the data belonging to the property as the data is in blob format It could
            /// also be used as a way of filtering for found objects that have a explicit
            /// property containing data in a specific format
            /// </summary>
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2048)]
            public string file_type;

            /// <summary>
            /// Last time this object was updated in UTC time Not filled out when creating a query
            /// </summary>
            public ulong last_update_epoch_time;
        }

        /// <summary>
        /// Struct used to compose a query
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLFoundObjectQueryFilter
        {
            /// <summary>
            /// Valid ID for a found object This can be obtained from sources such as a prior session
            /// </summary>
            public MlTypes.MLUUID id;

            /// <summary>
            /// Which type of found object this query is looking for
            /// </summary>
            public IntPtr types;

            /// <summary>
            /// How many found object types are you looking for
            /// </summary>
            public uint types_count;

            /// <summary>
            /// Properties to be used as filters for the query
            /// </summary>
            public IntPtr properties;

            /// <summary>
            /// Number of attributes
            /// </summary>
            public uint properties_count;

            /// <summary>
            /// Vector3 float of where you want the spatial query to originate
            /// </summary>
            public MlTypes.MLVec3f center;

            /// <summary>
            /// Vector3 float of the max distance you want the spatial query to span relative to the center of the query
            /// </summary>
            public MlTypes.MLVec3f max_distance;

            /// <summary>
            /// Maximum number of results Used to allocate memory
            /// </summary>
            public uint max_results;
        }

        /// <summary>
        /// Struct to represent a Found Object
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLFoundObject
        {
            /// <summary>
            /// Identifier of the Found Object
            /// </summary>
            public MlTypes.MLUUID id;

            /// <summary>
            /// Type of the found object
            /// </summary>
            public MlFoundObject.MLFoundObjectType type;

            /// <summary>
            /// Number of properties
            /// </summary>
            public uint property_count;

            /// <summary>
            /// Center position of found object
            /// </summary>
            public MlTypes.MLVec3f position;

            /// <summary>
            /// Rotation of found object
            /// </summary>
            public MlTypes.MLQuaternionf rotation;

            /// <summary>
            /// Vector3 float position at the center of the object
            /// </summary>
            public MlTypes.MLVec3f size;

            /// <summary>
            /// Reference the found object is relative to
            /// </summary>
            public MlTypes.MLUUID reference_id;

            /// <summary>
            /// Rate at which the found objects position can be updated at in milliseconds
            /// </summary>
            public uint refresh_rate_ms;
        }

        /// <summary>
        /// Bindings are used to anchor virtual content to the real world
        /// Bindings are persistent across sessions and are explicitly removed
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLFoundObjectBinding
        {
            /// <summary>
            /// ID of the virtual object Virtual objects are game objects created by the app
            /// </summary>
            public MlTypes.MLUUID virtual_object_id;

            /// <summary>
            /// ID of the found object the virtual object is in reference to
            /// </summary>
            public MlTypes.MLUUID found_object_id;

            /// <summary>
            /// ID of the previous found object ID this object was in reference to
            /// This is used when there was an object merge and the object that was
            /// previously referenced has changed its ID
            /// </summary>
            public MlTypes.MLUUID previous_found_object_id;

            /// <summary>
            /// Position of the virtual object
            /// </summary>
            public MlTypes.MLVec3f position;

            /// <summary>
            /// Rotation of the virtual object
            /// </summary>
            public MlTypes.MLQuaternionf rotation;
        }

        /// <summary>
        /// State changes belonging to a found object Only subscribed for found objects
        /// will have state change events broad casted Found Objects are auto-subscribed
        /// for if they have a binding associated with them All others must be manually
        /// subscribed for
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLFoundObjectStateChange
        {
            /// <summary>
            /// Type of state change
            /// </summary>
            public MlFoundObject.MLFoundObjectStateChangeType type;

            /// <summary>
            /// ID of the found object the state change applies to
            /// </summary>
            public MlTypes.MLUUID id;

            /// <summary>
            /// Seconds since the last update Timezone is UTC Format is epoch
            /// </summary>
            public uint last_update_time;
        }

        /// <summary>
        /// Configure the tracker to set defaults Values that go out of bounds will be clamped
        /// to system ceiling/roof Allows for tuning the frequency and quantity
        /// of object updates as well as the maximum result per query
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLFoundObjectTrackerSettings
        {
            /// <summary>
            /// Max refresh rate that the tracker will update in hertz base 10 This impacts
            /// System resources that are used for tracking updates
            /// </summary>
            public uint max_refresh_rate_hz;

            /// <summary>
            /// Max amount of subscriptions the tracker will manage This is used for the quantity of
            /// objects actively looking for updates Subscriptions are explained later in this document
            /// </summary>
            public uint max_subscription_count;

            /// <summary>
            /// Max result returned by a query
            /// </summary>
            public uint max_query_result;

            /// <summary>
            /// Maximum number of found objects to be stored
            /// </summary>
            public uint max_object_cache;
        }

        /// <summary>
        /// Create a Found Object Query tracker
        /// </summary>
        /// <param name="out_handle">A pointer to an MLHandle which will contain the handle of the found object tracker
        /// If this operation fails, out_handle will be ML_INVALID_HANDLE</param>
        /// <returns>
        /// MLResult_InvalidParam The parameter out_handle was not valid (null)
        /// MLResult_Ok Found object tracker was created successfully
        /// MLResult_UnspecifiedFailure Failed to create the found object tracker
        /// </returns>
        /// <remarks>
        /// @priv PwFoundObjRead
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectTrackerCreate(ref MlApi.MLHandle out_handle);

        /// <summary>
        /// Set tracker to the default settings
        /// </summary>
        /// <param name="tracker_handle">Handle to a Found Object Query Tracker</param>
        /// <returns>
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_PrivilegeDenied Privileges not met Check app manifest
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </returns>
        /// <remarks>
        /// @priv PwFoundObjRead
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectTrackerInitSettings(MlApi.MLHandle tracker_handle);

        /// <summary>
        /// Update the tracker settings
        /// </summary>
        /// <param name="tracker_handle">Handleto a Found Object Query Tracker</param>
        /// <param name="settings">Pointer to MLFoundObjectTrackerSettings</param>
        /// <returns>
        /// MLResult_Ok Settings successfully set to initial settings
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectTrackerUpdateSettings(MlApi.MLHandle tracker_handle, in MlFoundObject.MLFoundObjectTrackerSettings settings);

        /// <summary>
        /// Create a new Found Object Query
        /// </summary>
        /// <param name="tracker_handle">Handle to a Found Object Tracker</param>
        /// <param name="query">Query filter to apply during the query</param>
        /// <param name="out_query_handle">Pointer to an MLHandle to hold the handle to the query object</param>
        /// <returns>
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_PrivilegeDenied Privileges not met Check app manifest
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </returns>
        /// <remarks>
        /// Creates a new query for requesting found objects Query criteria is
        /// specified by filling out the MLFoundObjectQueryFilter
        /// @priv PwFoundObjectRead
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectQuery(MlApi.MLHandle tracker_handle, in MlFoundObject.MLFoundObjectQueryFilter query, ref MlApi.MLHandle out_query_handle);

        /// <summary>
        /// Gets the result count of a query
        /// </summary>
        /// <param name="tracker_handle">Handle to a Found Object Query Tracker</param>
        /// <param name="query_handle">MLUUID of an active query</param>
        /// <param name="out_num_results">The number of max results from the query</param>
        /// <returns>
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_PrivilegeDenied Privileges not met Check app manifest
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </returns>
        /// <remarks>
        /// @priv PwFoundObjRead
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectGetResultCount(MlApi.MLHandle tracker_handle, MlApi.MLHandle query_handle, ref uint out_num_results);

        /// <summary>
        /// Get the result of a submitted query
        /// </summary>
        /// <param name="tracker_handle">Handle to a Found Object Query Tracker</param>
        /// <param name="query_handle">MLUUID of an active query</param>
        /// <param name="index">Index of a found object result</param>
        /// <param name="out_found_object">MLFoundObjectStruct object to be written to</param>
        /// <returns>
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectGetResult(MlApi.MLHandle tracker_handle, MlApi.MLHandle query_handle, uint index, ref MlFoundObject.MLFoundObject out_found_object);

        /// <summary>
        /// Gets the property information for a found object ID by index
        /// </summary>
        /// <param name="tracker_handle">Handle to a Found Object Query Tracker</param>
        /// <param name="id">MLUUID of a found object</param>
        /// <param name="index">Index of a found object property</param>
        /// <param name="out_property">MLFoundObjectProperty for a found object</param>
        /// <returns>
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </returns>
        /// <remarks>
        /// This is not the data for a property This is a MLFoundObjectProperty If the
        /// property has a data size greater than zero and you would like to get the data you
        /// will have to call MLFoundObjectRequestPropertyData and then MLFoundObjectGetPropertyData
        /// @priv None
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectGetProperty(MlApi.MLHandle tracker_handle, MlTypes.MLUUID id, uint index, ref MlFoundObject.MLFoundObjectProperty out_property);

        /// <summary>
        /// Request property data for a found object
        /// </summary>
        /// <param name="tracker_handle">Handle to a Found Object Query</param>
        /// <param name="id">MLUUID to a found object</param>
        /// <param name="property_index">Index of the property that the data will be requested for</param>
        /// <returns>
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </returns>
        /// <remarks>
        /// This does not return the data for the found object It requests the data to be
        /// stored inside the tracker You can then call MLFoundObjectGetPropertyData to
        /// access the data It will return false if no data is available for the found object
        /// To prevent bloating memory property data is retrieved on demand instead of all
        /// properties being greedily cached
        /// Property data is a binary blob Use the file_type for deserialization An example of
        /// property data would be color, name, etc
        /// @priv PwFoundObjRead
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectRequestPropertyData(MlApi.MLHandle tracker_handle, MlTypes.MLUUID id, uint property_index);

        /// <summary>
        /// Returns the found data for an object
        /// </summary>
        /// <param name="tracker_handle">Handle to a Found Object Query Tracker</param>
        /// <param name="id">MLUUID of a found object</param>
        /// <param name="property_index">Index of the property that the data is for</param>
        /// <param name="buffer_size">Should be at least the size of the found objects data size + 1</param>
        /// <param name="out_data_container">Data container of a found object</param>
        /// <returns>
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </returns>
        /// <remarks>
        /// This is the data for a property in the form of a binary blob It does not
        /// contain the metadata found in the MLFoundObjectProperty
        /// @priv None
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectGetPropertyData(MlApi.MLHandle tracker_handle, MlTypes.MLUUID id, uint property_index, uint buffer_size, ref byte out_data_container);

        /// <summary>
        /// Sets a binding for a virtual object to a found object
        /// </summary>
        /// <param name="tracker_handle">Handle to a Found Object Query Tracker</param>
        /// <param name="in_out_binding">Binding to be created</param>
        /// <returns>
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </returns>
        /// <remarks>
        /// Bindings create a relative pose between virtual content and found objects If
        /// a Found Object ID is present in the MLFoundObjectBinding then the virtual object
        /// will be bound relative to that found object If no found object ID is present
        /// then the content will be bound to the nearest Found Object relative to the
        /// user's current location at time of the call Bindings persist between sessions
        /// Bindings can be removed manually or will be removed once the maximum number
        /// has been reached in a first in first out order
        /// @priv PwFoundObjRead
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectSetBinding(MlApi.MLHandle tracker_handle, ref MlFoundObject.MLFoundObjectBinding in_out_binding);

        /// <summary>
        /// Removes a binding for a virtual object to a found object
        /// </summary>
        /// <param name="tracker_handle">Handle to a Found Object Query Tracker</param>
        /// <param name="virtual_object_id">MLUUID to be removed from the found object</param>
        /// <returns>
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </returns>
        /// <remarks>
        /// Setting a binding will also add the found object the binding the the binding is
        /// attached to automatically be added to the subscriptions
        /// @priv PwFoundObjRead
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectRemoveBinding(MlApi.MLHandle tracker_handle, MlTypes.MLUUID virtual_object_id);

        /// <summary>
        /// Returns all the bindings for a user for an app ID
        /// </summary>
        /// <param name="tracker_handle">Handle to a Found Object Query Tracker</param>
        /// <param name="out_binding_count">Number of bindings for this app</param>
        /// <returns>
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectGetBindingCount(MlApi.MLHandle tracker_handle, ref uint out_binding_count);

        /// <summary>
        /// Returns the MLUUID and count of a Found Object that has bindings
        /// </summary>
        /// <param name="tracker_handle">Handle to a Found Object Query Tracker</param>
        /// <param name="index">Index of the Found Object with bindings being fetched</param>
        /// <param name="out_found_object_id">MLUUID of the found object that is being fetched</param>
        /// <param name="out_binding_count">Number of bindings belonging to the Found Object that was fetched</param>
        /// <returns>
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectGetFoundObjectBindingCount(MlApi.MLHandle tracker_handle, uint index, ref MlTypes.MLUUID out_found_object_id, ref uint out_binding_count);

        /// <summary>
        /// Get the binding for an app by index
        /// </summary>
        /// <param name="tracker_handle">Handle to a Found Object Query Tracker</param>
        /// <param name="found_object_id">MLUUID of the found object that is being fetched</param>
        /// <param name="index">Index of the binding being fetched</param>
        /// <param name="out_binding">MLFoundObjectBinding at the index submitted for a particular app_id</param>
        /// <returns>
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectGetBinding(MlApi.MLHandle tracker_handle, MlTypes.MLUUID found_object_id, uint index, ref MlFoundObject.MLFoundObjectBinding out_binding);

        /// <summary>
        /// Gets the binding by the virtual object ID
        /// </summary>
        /// <param name="tracker_handle">Handle to a Found Object Query Tracker</param>
        /// <param name="virtual_object_id">MLUUID generated by the application</param>
        /// <param name="out_binding">Binding that will return with the virtual content
        /// The position and rotation will be in the world coordinate frame</param>
        /// <returns>
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectGetBindingByVirtualId(MlApi.MLHandle tracker_handle, MlTypes.MLUUID virtual_object_id, ref MlFoundObject.MLFoundObjectBinding out_binding);

        /// <summary>
        /// Returns the count for all the unique labels available in the environment you are currently in
        /// </summary>
        /// <param name="tracker_handle">Handle to a Found Object Query Tracker</param>
        /// <param name="out_unique_label_count">Count of all the unique labels in the area</param>
        /// <returns>
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </returns>
        /// <remarks>
        /// @priv PwFoundObjRead
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectGetAvailableLabelsCount(MlApi.MLHandle tracker_handle, ref uint out_unique_label_count);

        /// <summary>
        /// Returns the unique label by index in the area you are currently in
        /// </summary>
        /// <param name="tracker_handle">Handle to a Found Object Query Tracker</param>
        /// <param name="unique_label_index">Index of the unique label you are fetching</param>
        /// <param name="buffer_size">Size of the buffer the out_label will be written to</param>
        /// <param name="out_label">Pointer that will be used to write the label to</param>
        /// <returns>
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </returns>
        /// <remarks>
        /// Each found object has an array of labels To facilitate better understanding of the
        /// environment, you can get all the unique labels in the area This is used for
        /// discovering what is available in the users area Unique labels have the
        /// potential to change and expand as the area is explored
        /// @priv PwFoundObjRead
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectGetUniqueLabel(MlApi.MLHandle tracker_handle, uint unique_label_index, uint buffer_size, IntPtr out_label);

        /// <summary>
        /// Subscribes to updates for a Found Object
        /// </summary>
        /// <param name="tracker_handle">Handle to a Found Object Query Tracker</param>
        /// <param name="id">MLUUID of the found object to subscribe to</param>
        /// <returns>
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </returns>
        /// <remarks>
        /// Subscribing to a found object has two core mechanics The first one is that it
        /// will cause the tracker to poll at a specific frequency, defined by the tracker setting
        /// The other mechanic is that it will cause there to be state changes that can be fetched
        /// @priv PwFoundObjRead
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectSubscribe(MlApi.MLHandle tracker_handle, MlTypes.MLUUID id);

        /// <summary>
        /// Unsubscribes to updates for a Found Object
        /// </summary>
        /// <param name="tracker_handle">Handle to a Found Object Query Tracker</param>
        /// <param name="id">MLUUID of the found object to unsubscribe to</param>
        /// <returns>
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </returns>
        /// <remarks>
        /// @priv PwFoundObjRead
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectUnsubscribe(MlApi.MLHandle tracker_handle, MlTypes.MLUUID id);

        /// <summary>
        /// Returns the number of Found Objects that have been subscribed to
        /// </summary>
        /// <param name="tracker_handle">Handle to a Found Object Query Tracker</param>
        /// <param name="out_subscription_list_count">Number of Found Objects that have been subscribed for</param>
        /// <returns>
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </returns>
        /// <remarks>
        /// @priv PwFoundObjRead
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectGetSubscriptionList(MlApi.MLHandle tracker_handle, ref uint out_subscription_list_count);

        /// <summary>
        /// Returns the ID at the index of the subscriptions list
        /// </summary>
        /// <param name="tracker_handle">Handle to a Found Object Query Tracker</param>
        /// <param name="index">Index of the Found Object that is being fetched</param>
        /// <param name="out_id">MLUUID of the Found Object at index location</param>
        /// <returns>
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </returns>
        /// <remarks>
        /// @priv PwFoundObjRead
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectGetSubscriptionIdAtIndex(MlApi.MLHandle tracker_handle, uint index, ref MlTypes.MLUUID out_id);

        /// <summary>
        /// Get the count for how many Found Objects have state changes
        /// </summary>
        /// <param name="tracker_handle">Handle to the Found Object Query Tracker</param>
        /// <param name="out_state_change_count">Pointer used to write the count for how many found objects have changes</param>
        /// <returns>
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </returns>
        /// <remarks>
        /// This keeps the last change per the enum type of change For example a found
        /// object has two changes position and properties change Then a second
        /// position change comes in Only 1 position type state change will be present
        /// for that particular found object There will be a total of two state
        /// changes though One for the position and one for the property change
        /// @priv PwFoundObjRead
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectGetStateChangesCount(MlApi.MLHandle tracker_handle, ref ulong out_state_change_count);

        /// <summary>
        /// Get the count of state changes for a particular index
        /// </summary>
        /// <param name="tracker_handle">Handle to the Found Object Query Tracker</param>
        /// <param name="index">Index into the state changes list</param>
        /// <param name="out_id">UUID of the found object</param>
        /// <param name="out_count">Pointer to a uint32_t for the count to be written to</param>
        /// <returns>
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectGetStateChangesCountForIndex(MlApi.MLHandle tracker_handle, uint index, ref MlTypes.MLUUID out_id, ref uint out_count);

        /// <summary>
        /// Get the state change for a found object by index
        /// </summary>
        /// <param name="tracker_handle">Handle to the Found Object Query Tracker</param>
        /// <param name="id">MLUUID of the found object</param>
        /// <param name="out_state_change">Pointer for where the state change will be written to</param>
        /// <returns>
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectGetNextStateChange(MlApi.MLHandle tracker_handle, MlTypes.MLUUID id, ref MlFoundObject.MLFoundObjectStateChange out_state_change);

        /// <summary>
        /// Releases the resources assigned to the tracker
        /// </summary>
        /// <param name="tracker_handle">Handle to the found Object Query Tracker</param>
        /// <returns>
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectTrackerDestroy(MlApi.MLHandle tracker_handle);
    }
}

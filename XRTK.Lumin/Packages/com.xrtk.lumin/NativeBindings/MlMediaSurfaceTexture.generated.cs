//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlMediaSurfaceTexture
    {
        /// <summary>
        /// Graphic backend to use
        /// @apilevel 6
        /// </summary>
        public enum MLMediaSurfaceTextureBackend : int
        {
            /// <summary>
            /// OpenGL texture
            /// </summary>
            MLMediaSurfaceTextureBackend_OpenGL = unchecked((int)0),

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLMediaSurfaceTextureBackend_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void MLMediaSurfaceTextureOnFrameAvailableCallback(MlApi.MLHandle handle, IntPtr user_data);

        /// <summary>
        /// Create a new MediaSurfaceTexture
        /// </summary>
        /// <param name="backend">The graphic backend to use</param>
        /// <param name="out_handle">Upon successful return will point to handle to the created MediaSurfaceTexture
        /// Or else, it will point to ML_INVALID_HANDLE</param>
        /// <returns>
        /// MLResult_InvalidParam One of the parameters is invalid
        /// MLResult_Ok MediaSurfaceTexture object was created successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @apilevel 6
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacodec", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaSurfaceTextureCreate(MlMediaSurfaceTexture.MLMediaSurfaceTextureBackend backend, ref MlApi.MLHandle out_handle);

        /// <summary>
        /// Destroy a MediaSurfaceTexture
        /// </summary>
        /// <param name="inout_handle">MLHandle to the MediaSurfaceTexture</param>
        /// <returns>
        /// MLResult_InvalidParam MediaSurfaceTexture object is invalid
        /// MLResult_Ok MediaSurfaceTexture object was successfully destroyed
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @apilevel 6
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacodec", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaSurfaceTextureDestroy(ref MlApi.MLHandle inout_handle);

        /// <summary>
        /// Update the texture image to the most recent frame from the image stream
        /// </summary>
        /// <param name="handle">MLHandle to the MediaSurfaceTexture</param>
        /// <returns>
        /// MLResult_InvalidParam MediaSurfaceTexture object is invalid
        /// MLResult_Ok the texture was updated successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// May only be called on the thread with the graphic context that contains the texture object
        /// @apilevel 6
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacodec", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaSurfaceTextureUpdateTexImage(MlApi.MLHandle handle);

        /// <summary>
        /// Attach the MediaSurfaceTexture to the graphic context that is current on the calling thread
        /// </summary>
        /// <param name="handle">MLHandle to the MediaSurfaceTexture</param>
        /// <param name="texture_id">The graphic texture object id</param>
        /// <returns>
        /// MLResult_InvalidParam MediaSurfaceTexture object is invalid
        /// MLResult_Ok the texture was detached successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @apilevel 6
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacodec", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaSurfaceTextureAttachToGLContext(MlApi.MLHandle handle, uint texture_id);

        /// <summary>
        /// Detach the MediaSurfaceTexture from the graphic context that owns the graphic texture object
        /// </summary>
        /// <param name="handle">MLHandle to the MediaSurfaceTexture</param>
        /// <returns>
        /// MLResult_InvalidParam MediaSurfaceTexture object is invalid
        /// MLResult_Ok the texture was detached successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @apilevel 6
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacodec", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaSurfaceTextureDetachFromGLContext(MlApi.MLHandle handle);

        /// <summary>
        /// Retrieve the 4x4 texture coordinate transform matrix associated with the texture image set by the most recent
        /// call to MLMediaSurfaceTextureUpdateTexImage
        /// </summary>
        /// <param name="handle">MLHandle to the MediaSurfaceTexture</param>
        /// <param name="out_matrix">A 4x4 matrix stored in column-major order as 16 consecutive values</param>
        /// <returns>
        /// MLResult_InvalidParam MediaSurfaceTexture object is invalid
        /// MLResult_Ok Operation was successful
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @apilevel 6
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacodec", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaSurfaceTextureGetTransformationMatrix(MlApi.MLHandle handle, [MarshalAs(UnmanagedType.LPArray, SizeConst = 16)] float[] out_matrix);

        /// <summary>
        /// Retrieve the timestamp associated with the texture image set by the most recent call to
        /// MLMediaSurfaceTextureUpdateTexImage
        /// </summary>
        /// <param name="handle">MLHandle to the MediaSurfaceTexture</param>
        /// <param name="out_result">The timestamp in nanoseconds</param>
        /// <returns>
        /// MLResult_InvalidParam MediaSurfaceTexture object is invalid
        /// MLResult_Ok Operation was successful
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @apilevel 6
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacodec", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaSurfaceTextureGetTimestamp(MlApi.MLHandle handle, ref long out_result);

        /// <summary>
        /// Set callback to notify client when a frame is available
        /// </summary>
        /// <param name="handle">MLHandle to the MediaSurfaceTexture</param>
        /// <param name="callback">A MLMediaSurfaceTextureOnFrameAvailableCallback function</param>
        /// <param name="user_data">Pointer to user payload data</param>
        /// <returns>
        /// MLResult_InvalidParam MediaSurfaceTexture object is invalid
        /// MLResult_Ok Callback was set successfully
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </returns>
        /// <remarks>
        /// @apilevel 6
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediacodec", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMediaSurfaceTextureSetOnFrameAvailableCallback(MlApi.MLHandle handle, MlMediaSurfaceTexture.MLMediaSurfaceTextureOnFrameAvailableCallback callback, IntPtr user_data);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlMediaError
    {
        /// <summary>
        ///  MediaError Media Error
        ///  MediaError
        /// </summary>
        /// <remarks>
        /// \
        /// {
        /// </remarks>
        public const int MLResultAPIPrefix_MediaGeneric = unchecked((int)0xbf3b << 16);

        /// <summary>
        /// Generic return values for Multimedia API calls
        /// </summary>
        public enum MLMediaGenericResult : int
        {
            MLMediaGenericResult_InvalidOperation = unchecked((int)MLResultAPIPrefix_MediaGeneric),

            MLMediaGenericResult_BadType,

            MLMediaGenericResult_NameNotFound,

            MLMediaGenericResult_HandleNotFound,

            MLMediaGenericResult_NoInit,

            MLMediaGenericResult_AlreadyExists,

            MLMediaGenericResult_DeadObject,

            MLMediaGenericResult_FailedTransaction,

            MLMediaGenericResult_BadIndex,

            MLMediaGenericResult_NotEnoughData,

            MLMediaGenericResult_WouldBlock,

            MLMediaGenericResult_UnknownTransaction,

            MLMediaGenericResult_FDSNotAllowed,

            MLMediaGenericResult_UnexpectedNull,

            MLMediaGenericResult_NotAvailable,
        }

        public const int MLResultAPIPrefix_Media = unchecked((int)0x4184 << 16);

        /// <summary>
        /// Detailed return values for Multimedia API calls
        /// </summary>
        public enum MLMediaResult : int
        {
            MLMediaResult_AlreadyConnected = unchecked((int)MLResultAPIPrefix_Media),

            MLMediaResult_NotConnected,

            MLMediaResult_UnknownHost,

            MLMediaResult_CannotConnect,

            MLMediaResult_IO,

            MLMediaResult_ConnectionLost,

            MLMediaResult_Legacy1,

            MLMediaResult_Malformed,

            MLMediaResult_OutOfRange,

            MLMediaResult_BufferTooSmall,

            MLMediaResult_Unsupported,

            MLMediaResult_EndOfStream,

            MLMediaResult_FormatChanged,

            MLMediaResult_Discontinuity,

            MLMediaResult_OutputBuffersChanged,

            MLMediaResult_PermissionRevoked,

            MLMediaResult_UnsupportedAudioFormat,

            MLMediaResult_HeartbeatTerminateRequested,
        }

        public const int MLResultAPIPrefix_MediaDRM = unchecked((int)0x62ce << 16);

        /// <summary>
        /// DRM related return values for Multimedia API calls
        /// </summary>
        public enum MLMediaDRMResult : int
        {
            /// <summary>
            /// Error code for undefined type
            /// </summary>
            MLMediaDRMResult_Unknown = unchecked((int)MLResultAPIPrefix_MediaDRM),

            /// <summary>
            /// Error code for no DRM license
            /// </summary>
            MLMediaDRMResult_NoLicense,

            /// <summary>
            /// Error code for DRM license expired
            /// </summary>
            MLMediaDRMResult_LicenseExpired,

            /// <summary>
            /// Error code for DRM session not expired
            /// </summary>
            MLMediaDRMResult_SessionNotOpened,

            /// <summary>
            /// Error code for DRM when decrypt unit is not initialized
            /// </summary>
            MLMediaDRMResult_DecryptUnitNotInitialized,

            /// <summary>
            /// Error code for DRM when failed to decrypt data
            /// </summary>
            MLMediaDRMResult_Decrypt,

            /// <summary>
            /// Error code for DRM can not handle the operation
            /// </summary>
            MLMediaDRMResult_CannotHandle,

            /// <summary>
            /// Error code for DRM when data is tampered/
            /// </summary>
            MLMediaDRMResult_TamperDetect,

            /// <summary>
            /// Error Code when an operation on a
            ///  MediaDRM handle is attempted
            ///  MediaDRM
            /// </summary>
            /// <remarks>
            /// and the device does not have a certificate
            /// The app should obtain and install a certificate using the
            /// provisioning methods then retry the operation
            /// </remarks>
            MLMediaDRMResult_NotProvisioned,

            /// <summary>
            /// Error code for Device License Revoked
            /// </summary>
            MLMediaDRMResult_DeviceRevoked,

            /// <summary>
            /// Error code if the MediaDRM operation fails when the required resources are in use
            /// </summary>
            MLMediaDRMResult_ResourceBusy,

            /// <summary>
            /// Error code for insufficient output protection
            /// </summary>
            MLMediaDRMResult_InsufficientOutputProtection,

            /// <summary>
            /// Error code for insufficient output protection
            /// </summary>
            MLMediaDRMResult_LastUsedErrorCode = unchecked((int)MLMediaDRMResult_InsufficientOutputProtection),

            /// <summary>
            /// Range for vendor specific DRM errors
            /// </summary>
            MLMediaDRMResult_VendorMin = unchecked((int)MLResultAPIPrefix_MediaDRM + 500),

            /// <summary>
            /// Range for vendor specific DRM errors
            /// </summary>
            MLMediaDRMResult_VendorMax = unchecked((int)MLResultAPIPrefix_MediaDRM + 999),
        }

        [Flags]
        public enum __AnonymousCppEnum_ml_media_error_5367 : int
        {
            MLResultAPIPrefix_MediaOMX = unchecked((int)0x5f76 << (int) 16),

            MLResultAPIPrefix_MediaOMXExtensions = unchecked((int)0x11d9 << (int) 16),

            MLResultAPIPrefix_MediaOMXVendors = unchecked((int)0xe4d0 << (int) 16),
        }

        public const int MLResultAPIPrefix_MediaPlayer = unchecked((int)0xc435 << 16);

        /// <summary>
        /// Media player related return values for Multimedia API calls
        /// </summary>
        public enum MLMediaPlayerResult : int
        {
            /// <summary>
            /// Media errors (eg Codec not supported)
            /// </summary>
            MLMediaPlayerResult_ServerDied = unchecked((int)MLResultAPIPrefix_MediaPlayer),

            /// <summary>
            /// Runtime errors
            /// </summary>
            MLMediaPlayerResult_NotValidForProgressivePlayback,
        }

        /// <summary>
        /// Translate a media error code into a human-readable string
        /// </summary>
        /// <param name="code">Error code to translate to a string</param>
        /// <returns>
        /// C-style ASCII string containing readable version of result code
        /// Note that user should not keep a reference to the returned char pointer for future
        /// use as subsequent calls to MLMediaResultGetString will overwrite its content
        /// Consequently, user *must not* explicitly free the returned pointer
        /// </returns>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_mediaerror", CallingConvention = CallingConvention.Cdecl)]
        [return: MarshalAs(UnmanagedType.LPStr)]
        public static extern string MLMediaResultGetString(MlApi.MLResult code);
    }
}

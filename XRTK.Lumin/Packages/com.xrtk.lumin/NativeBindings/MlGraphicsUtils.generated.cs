//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlGraphicsUtils
    {
        /// <summary>
        /// Flags for MLMeshingDepthBufferInfo
        /// </summary>
        public enum MLMeshingPopulateDepthFlags : int
        {
            /// <summary>
            /// None
            /// </summary>
            MLMeshingPopulateDepthFlags_None,

            /// <summary>
            /// If set, will fill the color buffer
            /// </summary>
            MLMeshingPopulateDepthFlags_EnableVisualization,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLMeshingPopulateDepthFlags_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Per virtual camera information needed to render depth
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMeshingVirtualCameraBufferInfo
        {
            /// <summary>
            /// The projection matrix for the camera
            /// </summary>
            public MlTypes.MLMat4f projection;

            /// <summary>
            /// The local space (relative to world) camera transform needed to render content, inverse is view matrix
            /// </summary>
            public MlTypes.MLTransform transform;
        }

        /// <summary>
        /// To be passed to PopulateDepth
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLMeshingDepthBufferInfo
        {
            /// <summary>
            /// Optional flags for Populate Depth
            /// </summary>
            public uint flags;

            /// <summary>
            /// The number of buffers to render to for the frame
            /// </summary>
            public uint buffer_count;

            /// <summary>
            /// [DEBUG_ONLY] The handle (ID) of the color surface to render to for the buffer
            /// Expects handle of a Texture2d Array
            /// </summary>
            public MlApi.MLHandle color_id;

            /// <summary>
            /// The handle (ID) of the depth surface to render to for the buffer Expects handle of a Texture2d Array
            /// </summary>
            public MlApi.MLHandle depth_id;

            /// <summary>
            /// The origin and extents to render to for the camera
            /// </summary>
            public MlTypes.MLRectf viewport;

            /// <summary>
            /// Controls use of far_clip and directionality of z in projection model
            /// </summary>
            public MlGraphics.MLGraphicsProjectionType projection_type;

            /// <summary>
            /// The array of buffers to render to for the frame
            /// </summary>
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 2)]
            public MlGraphicsUtils.MLMeshingVirtualCameraBufferInfo[] buffers;
        }

        /// <summary>
        /// Populates the depth buffer (passed as a Texture2D array) with the meshes given by a user
        /// It has to be called after MLGraphicsBeginFrame which provides the handles for the depth/color buffers
        /// </summary>
        /// <param name="client_handle">The handle to the created client</param>
        /// <param name="info">The per virtual camera info for rendering depth</param>
        /// <param name="meshes">The meshes for which the depth info needs to be populated</param>
        /// <returns>
        /// MLResult_InvalidParam Depth buffers were not populated due to an invalid parameter
        /// MLResult_Ok Depth buffer was populated successfully
        /// </returns>
        /// <remarks>
        /// @priv WorldReconstruction
        /// </remarks>
        [DllImport("ml_graphics_utils", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLMeshingPopulateDepth(MlApi.MLHandle client_handle, in MlGraphicsUtils.MLMeshingDepthBufferInfo info, in MlMeshing2.MLMeshingMesh meshes);
    }
}

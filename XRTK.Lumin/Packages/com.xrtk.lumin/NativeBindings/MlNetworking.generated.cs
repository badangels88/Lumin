//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native.Bindings
{
    using System.Runtime.InteropServices;

    internal static class MlNetworking
    {
        /// <summary>
        ///  Networking Networking
        ///  Networking
        /// Networking APIs provide network status
        /// There are two APIs
        /// MLNetworkingIsInternetConnected indicates the internet is up and accessible,
        /// link layer is up, DNS is good, and internet is accessible
        /// MLNetworkingGetWiFiData returns WiFi parameters if WiFi is connected
        /// </summary>
        /// <remarks>
        /// \
        /// {
        /// </remarks>
        public const int MLResultAPIPrefix_Networking = unchecked((int)0x4c62 << 16);

        /// <summary>
        /// Return values for Networking Service API calls
        /// </summary>
        /// <remarks>
        /// @apilevel 5
        /// </remarks>
        public enum MLNetworkingResult : int
        {
            /// <summary>
            /// The corresponding service is not available
            /// </summary>
            MLNetworkingResult_ServiceNotAvailable = unchecked((int)MLResultAPIPrefix_Networking),

            /// <summary>
            /// The corresponding service returned with error
            /// </summary>
            MLNetworkingResult_ServiceError,

            /// <summary>
            /// The version number in MLNetworkingWiFiData is not recognized
            /// </summary>
            MLNetworkingResult_WiFiDataStructureVersionError,

            /// <summary>
            /// WiFi service is not in the right state
            /// </summary>
            MLNetworkingResult_WiFiServiceInvalidState,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLNetworkingResult_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// WiFi related data
        /// </summary>
        /// <remarks>
        /// @apilevel 5
        /// </remarks>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public struct MLNetworkingWiFiData
        {
            /// <summary>
            /// Version of this structure
            /// </summary>
            public uint version;

            /// <summary>
            /// WiFi RSSI in dbM
            /// </summary>
            public int rssi;

            /// <summary>
            /// WiFi link speed in Mb/s
            /// </summary>
            public int linkspeed;

            /// <summary>
            /// WiFi frequency in MHz
            /// </summary>
            public float frequency;
        }

        /// <summary>
        /// Returns an ASCII string for each result code
        /// </summary>
        /// <param name="result_code">MLResult to select the result code</param>
        /// <returns>
        /// ASCII string containing readable version of result code
        /// </returns>
        /// <remarks>
        /// This call returns strings for all of the MLResult and MLNetworkingResult codes
        /// @apilevel 5
        /// </remarks>
        [DllImport("ml_networking", CallingConvention = CallingConvention.Cdecl)]
        [return: MarshalAs(UnmanagedType.LPStr)]
        public static extern string MLNetworkingGetResultString(MlApi.MLResult result_code);

        /// <summary>
        /// Returns whether the internet is connected
        /// It means link layer is up, internet is accessible, DNS is good
        /// The out_is_connected value is valid only if the function returns MLResult_Ok
        /// </summary>
        /// <param name="out_is_connected">Indicates whether the internet is up and accessible</param>
        /// <returns>
        /// MLResult_InvalidParam If input parameter is invalid
        /// MLResult_Ok If the call was successful
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Internal error
        /// MLNetworkingResult Network Manager Service specific errors
        /// </returns>
        /// <remarks>
        /// @apilevel 5
        /// @priv MLPrivilegeID_Internet
        /// </remarks>
        [DllImport("ml_networking", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLNetworkingIsInternetConnected(ref bool out_is_connected);

        /// <summary>
        /// Gets device WiFi related data
        /// The out_wifidata is valid only if the API returns MLResult_Ok
        /// </summary>
        /// <param name="out_wifidata">It has WiFi related data</param>
        /// <returns>
        /// MLResult_InvalidParam Failed due to invalid input parameter
        /// MLResult_Ok Obtained WiFi data successfully
        /// MLResult_PrivilegeDenied Necessary privilege is missing
        /// MLResult_UnspecifiedFailure Failed due to internal error
        /// MLNetworkingWiFiResult Specific WiFi service error
        /// </returns>
        /// <remarks>
        /// @apilevel 5
        /// @priv MLPrivilegeID_WifiStatusRead
        /// </remarks>
        [DllImport("ml_networking", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLNetworkingGetWiFiData(ref MlNetworking.MLNetworkingWiFiData out_wifidata);
    }
}
